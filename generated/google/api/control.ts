/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/control.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./policy";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class Control extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environment?: string;
            method_policies?: dependency_1.google.api.MethodPolicy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environment" in data && data.environment != undefined) {
                    this.environment = data.environment;
                }
                if ("method_policies" in data && data.method_policies != undefined) {
                    this.method_policies = data.method_policies;
                }
            }
        }
        get environment() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environment(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get method_policies() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.api.MethodPolicy, 4) as dependency_1.google.api.MethodPolicy[];
        }
        set method_policies(value: dependency_1.google.api.MethodPolicy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            environment?: string;
            method_policies?: ReturnType<typeof dependency_1.google.api.MethodPolicy.prototype.toObject>[];
        }): Control {
            const message = new Control({});
            if (data.environment != null) {
                message.environment = data.environment;
            }
            if (data.method_policies != null) {
                message.method_policies = data.method_policies.map(item => dependency_1.google.api.MethodPolicy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                environment?: string;
                method_policies?: ReturnType<typeof dependency_1.google.api.MethodPolicy.prototype.toObject>[];
            } = {};
            if (this.environment != null) {
                data.environment = this.environment;
            }
            if (this.method_policies != null) {
                data.method_policies = this.method_policies.map((item: dependency_1.google.api.MethodPolicy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environment.length)
                writer.writeString(1, this.environment);
            if (this.method_policies.length)
                writer.writeRepeatedMessage(4, this.method_policies, (item: dependency_1.google.api.MethodPolicy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Control {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Control();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environment = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.method_policies, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.google.api.MethodPolicy.deserialize(reader), dependency_1.google.api.MethodPolicy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Control {
            return Control.deserialize(bytes);
        }
    }
}
