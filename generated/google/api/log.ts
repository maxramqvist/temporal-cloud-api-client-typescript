/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/log.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./label";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class LogDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: dependency_1.google.api.LabelDescriptor[];
            description?: string;
            display_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("display_name" in data && data.display_name != undefined) {
                    this.display_name = data.display_name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.api.LabelDescriptor, 2) as dependency_1.google.api.LabelDescriptor[];
        }
        set labels(value: dependency_1.google.api.LabelDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get display_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set display_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            labels?: ReturnType<typeof dependency_1.google.api.LabelDescriptor.prototype.toObject>[];
            description?: string;
            display_name?: string;
        }): LogDescriptor {
            const message = new LogDescriptor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.labels != null) {
                message.labels = data.labels.map(item => dependency_1.google.api.LabelDescriptor.fromObject(item));
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.display_name != null) {
                message.display_name = data.display_name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: ReturnType<typeof dependency_1.google.api.LabelDescriptor.prototype.toObject>[];
                description?: string;
                display_name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = this.labels.map((item: dependency_1.google.api.LabelDescriptor) => item.toObject());
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.display_name != null) {
                data.display_name = this.display_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.labels.length)
                writer.writeRepeatedMessage(2, this.labels, (item: dependency_1.google.api.LabelDescriptor) => item.serialize(writer));
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.display_name.length)
                writer.writeString(4, this.display_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.labels, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.google.api.LabelDescriptor.deserialize(reader), dependency_1.google.api.LabelDescriptor));
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.display_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogDescriptor {
            return LogDescriptor.deserialize(bytes);
        }
    }
}
