/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/routing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class RoutingRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            routing_parameters?: RoutingParameter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("routing_parameters" in data && data.routing_parameters != undefined) {
                    this.routing_parameters = data.routing_parameters;
                }
            }
        }
        get routing_parameters() {
            return pb_1.Message.getRepeatedWrapperField(this, RoutingParameter, 2) as RoutingParameter[];
        }
        set routing_parameters(value: RoutingParameter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            routing_parameters?: ReturnType<typeof RoutingParameter.prototype.toObject>[];
        }): RoutingRule {
            const message = new RoutingRule({});
            if (data.routing_parameters != null) {
                message.routing_parameters = data.routing_parameters.map(item => RoutingParameter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                routing_parameters?: ReturnType<typeof RoutingParameter.prototype.toObject>[];
            } = {};
            if (this.routing_parameters != null) {
                data.routing_parameters = this.routing_parameters.map((item: RoutingParameter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.routing_parameters.length)
                writer.writeRepeatedMessage(2, this.routing_parameters, (item: RoutingParameter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoutingRule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoutingRule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.routing_parameters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RoutingParameter.deserialize(reader), RoutingParameter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoutingRule {
            return RoutingRule.deserialize(bytes);
        }
    }
    export class RoutingParameter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            path_template?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("path_template" in data && data.path_template != undefined) {
                    this.path_template = data.path_template;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path_template() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path_template(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            field?: string;
            path_template?: string;
        }): RoutingParameter {
            const message = new RoutingParameter({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.path_template != null) {
                message.path_template = data.path_template;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                path_template?: string;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.path_template != null) {
                data.path_template = this.path_template;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.path_template.length)
                writer.writeString(2, this.path_template);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoutingParameter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoutingParameter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.path_template = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoutingParameter {
            return RoutingParameter.deserialize(bytes);
        }
    }
}
