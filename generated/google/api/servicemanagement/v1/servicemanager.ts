/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicemanagement/v1/servicemanager.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../annotations";
import * as dependency_2 from "./../../client";
import * as dependency_3 from "./../../field_behavior";
import * as dependency_4 from "./../../service";
import * as dependency_5 from "./resources";
import * as dependency_6 from "./../../../longrunning/operations";
import * as dependency_7 from "./../../../protobuf/any";
import * as dependency_8 from "./../../../protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.servicemanagement.v1 {
    export class ListServicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            producer_project_id?: string;
            page_size?: number;
            page_token?: string;
            /** @deprecated*/
            consumer_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("producer_project_id" in data && data.producer_project_id != undefined) {
                    this.producer_project_id = data.producer_project_id;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("consumer_id" in data && data.consumer_id != undefined) {
                    this.consumer_id = data.consumer_id;
                }
            }
        }
        get producer_project_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set producer_project_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        /** @deprecated*/
        get consumer_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        /** @deprecated*/
        set consumer_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            producer_project_id?: string;
            page_size?: number;
            page_token?: string;
            consumer_id?: string;
        }): ListServicesRequest {
            const message = new ListServicesRequest({});
            if (data.producer_project_id != null) {
                message.producer_project_id = data.producer_project_id;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.consumer_id != null) {
                message.consumer_id = data.consumer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                producer_project_id?: string;
                page_size?: number;
                page_token?: string;
                consumer_id?: string;
            } = {};
            if (this.producer_project_id != null) {
                data.producer_project_id = this.producer_project_id;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.consumer_id != null) {
                data.consumer_id = this.consumer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.producer_project_id.length)
                writer.writeString(1, this.producer_project_id);
            if (this.page_size != 0)
                writer.writeInt32(5, this.page_size);
            if (this.page_token.length)
                writer.writeString(6, this.page_token);
            if (this.consumer_id.length)
                writer.writeString(7, this.consumer_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.producer_project_id = reader.readString();
                        break;
                    case 5:
                        message.page_size = reader.readInt32();
                        break;
                    case 6:
                        message.page_token = reader.readString();
                        break;
                    case 7:
                        message.consumer_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServicesRequest {
            return ListServicesRequest.deserialize(bytes);
        }
    }
    export class ListServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            services?: dependency_5.google.api.servicemanagement.v1.ManagedService[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("services" in data && data.services != undefined) {
                    this.services = data.services;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get services() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.api.servicemanagement.v1.ManagedService, 1) as dependency_5.google.api.servicemanagement.v1.ManagedService[];
        }
        set services(value: dependency_5.google.api.servicemanagement.v1.ManagedService[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            services?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>[];
            next_page_token?: string;
        }): ListServicesResponse {
            const message = new ListServicesResponse({});
            if (data.services != null) {
                message.services = data.services.map(item => dependency_5.google.api.servicemanagement.v1.ManagedService.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                services?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.services != null) {
                data.services = this.services.map((item: dependency_5.google.api.servicemanagement.v1.ManagedService) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.services.length)
                writer.writeRepeatedMessage(1, this.services, (item: dependency_5.google.api.servicemanagement.v1.ManagedService) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.google.api.servicemanagement.v1.ManagedService.deserialize(reader), dependency_5.google.api.servicemanagement.v1.ManagedService));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServicesResponse {
            return ListServicesResponse.deserialize(bytes);
        }
    }
    export class GetServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            service_name?: string;
        }): GetServiceRequest {
            const message = new GetServiceRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceRequest {
            return GetServiceRequest.deserialize(bytes);
        }
    }
    export class CreateServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: dependency_5.google.api.servicemanagement.v1.ManagedService;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.api.servicemanagement.v1.ManagedService, 1) as dependency_5.google.api.servicemanagement.v1.ManagedService;
        }
        set service(value: dependency_5.google.api.servicemanagement.v1.ManagedService) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>;
        }): CreateServiceRequest {
            const message = new CreateServiceRequest({});
            if (data.service != null) {
                message.service = dependency_5.google.api.servicemanagement.v1.ManagedService.fromObject(data.service);
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>;
            } = {};
            if (this.service != null) {
                data.service = this.service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service)
                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => message.service = dependency_5.google.api.servicemanagement.v1.ManagedService.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServiceRequest {
            return CreateServiceRequest.deserialize(bytes);
        }
    }
    export class DeleteServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            service_name?: string;
        }): DeleteServiceRequest {
            const message = new DeleteServiceRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteServiceRequest {
            return DeleteServiceRequest.deserialize(bytes);
        }
    }
    export class UndeleteServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            service_name?: string;
        }): UndeleteServiceRequest {
            const message = new UndeleteServiceRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UndeleteServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UndeleteServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UndeleteServiceRequest {
            return UndeleteServiceRequest.deserialize(bytes);
        }
    }
    export class UndeleteServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: dependency_5.google.api.servicemanagement.v1.ManagedService;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.api.servicemanagement.v1.ManagedService, 1) as dependency_5.google.api.servicemanagement.v1.ManagedService;
        }
        set service(value: dependency_5.google.api.servicemanagement.v1.ManagedService) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>;
        }): UndeleteServiceResponse {
            const message = new UndeleteServiceResponse({});
            if (data.service != null) {
                message.service = dependency_5.google.api.servicemanagement.v1.ManagedService.fromObject(data.service);
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ManagedService.prototype.toObject>;
            } = {};
            if (this.service != null) {
                data.service = this.service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service)
                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UndeleteServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UndeleteServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => message.service = dependency_5.google.api.servicemanagement.v1.ManagedService.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UndeleteServiceResponse {
            return UndeleteServiceResponse.deserialize(bytes);
        }
    }
    export class GetServiceConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            config_id?: string;
            view?: GetServiceConfigRequest.ConfigView;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set config_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 3, GetServiceConfigRequest.ConfigView.BASIC) as GetServiceConfigRequest.ConfigView;
        }
        set view(value: GetServiceConfigRequest.ConfigView) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            config_id?: string;
            view?: GetServiceConfigRequest.ConfigView;
        }): GetServiceConfigRequest {
            const message = new GetServiceConfigRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                config_id?: string;
                view?: GetServiceConfigRequest.ConfigView;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.config_id.length)
                writer.writeString(2, this.config_id);
            if (this.view != GetServiceConfigRequest.ConfigView.BASIC)
                writer.writeEnum(3, this.view);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.config_id = reader.readString();
                        break;
                    case 3:
                        message.view = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceConfigRequest {
            return GetServiceConfigRequest.deserialize(bytes);
        }
    }
    export namespace GetServiceConfigRequest {
        export enum ConfigView {
            BASIC = 0,
            FULL = 1
        }
    }
    export class ListServiceConfigsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            page_token?: string;
            page_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            page_token?: string;
            page_size?: number;
        }): ListServiceConfigsRequest {
            const message = new ListServiceConfigsRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                page_token?: string;
                page_size?: number;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServiceConfigsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServiceConfigsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServiceConfigsRequest {
            return ListServiceConfigsRequest.deserialize(bytes);
        }
    }
    export class ListServiceConfigsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_configs?: dependency_4.google.api.Service[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_configs" in data && data.service_configs != undefined) {
                    this.service_configs = data.service_configs;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get service_configs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.google.api.Service, 1) as dependency_4.google.api.Service[];
        }
        set service_configs(value: dependency_4.google.api.Service[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            service_configs?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>[];
            next_page_token?: string;
        }): ListServiceConfigsResponse {
            const message = new ListServiceConfigsResponse({});
            if (data.service_configs != null) {
                message.service_configs = data.service_configs.map(item => dependency_4.google.api.Service.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                service_configs?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.service_configs != null) {
                data.service_configs = this.service_configs.map((item: dependency_4.google.api.Service) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_configs.length)
                writer.writeRepeatedMessage(1, this.service_configs, (item: dependency_4.google.api.Service) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServiceConfigsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServiceConfigsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.google.api.Service.deserialize(reader), dependency_4.google.api.Service));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServiceConfigsResponse {
            return ListServiceConfigsResponse.deserialize(bytes);
        }
    }
    export class CreateServiceConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            service_config?: dependency_4.google.api.Service;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("service_config" in data && data.service_config != undefined) {
                    this.service_config = data.service_config;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_config() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.Service, 2) as dependency_4.google.api.Service;
        }
        set service_config(value: dependency_4.google.api.Service) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_service_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            service_name?: string;
            service_config?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>;
        }): CreateServiceConfigRequest {
            const message = new CreateServiceConfigRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.service_config != null) {
                message.service_config = dependency_4.google.api.Service.fromObject(data.service_config);
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                service_config?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.service_config != null) {
                data.service_config = this.service_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.has_service_config)
                writer.writeMessage(2, this.service_config, () => this.service_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServiceConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServiceConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.service_config, () => message.service_config = dependency_4.google.api.Service.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServiceConfigRequest {
            return CreateServiceConfigRequest.deserialize(bytes);
        }
    }
    export class SubmitConfigSourceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            config_source?: dependency_5.google.api.servicemanagement.v1.ConfigSource;
            validate_only?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("config_source" in data && data.config_source != undefined) {
                    this.config_source = data.config_source;
                }
                if ("validate_only" in data && data.validate_only != undefined) {
                    this.validate_only = data.validate_only;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_source() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.api.servicemanagement.v1.ConfigSource, 2) as dependency_5.google.api.servicemanagement.v1.ConfigSource;
        }
        set config_source(value: dependency_5.google.api.servicemanagement.v1.ConfigSource) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_config_source() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get validate_only() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set validate_only(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            config_source?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ConfigSource.prototype.toObject>;
            validate_only?: boolean;
        }): SubmitConfigSourceRequest {
            const message = new SubmitConfigSourceRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.config_source != null) {
                message.config_source = dependency_5.google.api.servicemanagement.v1.ConfigSource.fromObject(data.config_source);
            }
            if (data.validate_only != null) {
                message.validate_only = data.validate_only;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                config_source?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ConfigSource.prototype.toObject>;
                validate_only?: boolean;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.config_source != null) {
                data.config_source = this.config_source.toObject();
            }
            if (this.validate_only != null) {
                data.validate_only = this.validate_only;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.has_config_source)
                writer.writeMessage(2, this.config_source, () => this.config_source.serialize(writer));
            if (this.validate_only != false)
                writer.writeBool(3, this.validate_only);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitConfigSourceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitConfigSourceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.config_source, () => message.config_source = dependency_5.google.api.servicemanagement.v1.ConfigSource.deserialize(reader));
                        break;
                    case 3:
                        message.validate_only = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitConfigSourceRequest {
            return SubmitConfigSourceRequest.deserialize(bytes);
        }
    }
    export class SubmitConfigSourceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_config?: dependency_4.google.api.Service;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_config" in data && data.service_config != undefined) {
                    this.service_config = data.service_config;
                }
            }
        }
        get service_config() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.Service, 1) as dependency_4.google.api.Service;
        }
        set service_config(value: dependency_4.google.api.Service) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service_config?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>;
        }): SubmitConfigSourceResponse {
            const message = new SubmitConfigSourceResponse({});
            if (data.service_config != null) {
                message.service_config = dependency_4.google.api.Service.fromObject(data.service_config);
            }
            return message;
        }
        toObject() {
            const data: {
                service_config?: ReturnType<typeof dependency_4.google.api.Service.prototype.toObject>;
            } = {};
            if (this.service_config != null) {
                data.service_config = this.service_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service_config)
                writer.writeMessage(1, this.service_config, () => this.service_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitConfigSourceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitConfigSourceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service_config, () => message.service_config = dependency_4.google.api.Service.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitConfigSourceResponse {
            return SubmitConfigSourceResponse.deserialize(bytes);
        }
    }
    export class CreateServiceRolloutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            rollout?: dependency_5.google.api.servicemanagement.v1.Rollout;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("rollout" in data && data.rollout != undefined) {
                    this.rollout = data.rollout;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rollout() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.api.servicemanagement.v1.Rollout, 2) as dependency_5.google.api.servicemanagement.v1.Rollout;
        }
        set rollout(value: dependency_5.google.api.servicemanagement.v1.Rollout) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_rollout() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            service_name?: string;
            rollout?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Rollout.prototype.toObject>;
        }): CreateServiceRolloutRequest {
            const message = new CreateServiceRolloutRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.rollout != null) {
                message.rollout = dependency_5.google.api.servicemanagement.v1.Rollout.fromObject(data.rollout);
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                rollout?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Rollout.prototype.toObject>;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.rollout != null) {
                data.rollout = this.rollout.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.has_rollout)
                writer.writeMessage(2, this.rollout, () => this.rollout.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServiceRolloutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServiceRolloutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.rollout, () => message.rollout = dependency_5.google.api.servicemanagement.v1.Rollout.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServiceRolloutRequest {
            return CreateServiceRolloutRequest.deserialize(bytes);
        }
    }
    export class ListServiceRolloutsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            page_token?: string;
            page_size?: number;
            filter?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get filter() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set filter(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            service_name?: string;
            page_token?: string;
            page_size?: number;
            filter?: string;
        }): ListServiceRolloutsRequest {
            const message = new ListServiceRolloutsRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.filter != null) {
                message.filter = data.filter;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                page_token?: string;
                page_size?: number;
                filter?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.filter != null) {
                data.filter = this.filter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.filter.length)
                writer.writeString(4, this.filter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServiceRolloutsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServiceRolloutsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 4:
                        message.filter = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServiceRolloutsRequest {
            return ListServiceRolloutsRequest.deserialize(bytes);
        }
    }
    export class ListServiceRolloutsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rollouts?: dependency_5.google.api.servicemanagement.v1.Rollout[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rollouts" in data && data.rollouts != undefined) {
                    this.rollouts = data.rollouts;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get rollouts() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.api.servicemanagement.v1.Rollout, 1) as dependency_5.google.api.servicemanagement.v1.Rollout[];
        }
        set rollouts(value: dependency_5.google.api.servicemanagement.v1.Rollout[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rollouts?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Rollout.prototype.toObject>[];
            next_page_token?: string;
        }): ListServiceRolloutsResponse {
            const message = new ListServiceRolloutsResponse({});
            if (data.rollouts != null) {
                message.rollouts = data.rollouts.map(item => dependency_5.google.api.servicemanagement.v1.Rollout.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                rollouts?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Rollout.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.rollouts != null) {
                data.rollouts = this.rollouts.map((item: dependency_5.google.api.servicemanagement.v1.Rollout) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rollouts.length)
                writer.writeRepeatedMessage(1, this.rollouts, (item: dependency_5.google.api.servicemanagement.v1.Rollout) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServiceRolloutsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServiceRolloutsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rollouts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.google.api.servicemanagement.v1.Rollout.deserialize(reader), dependency_5.google.api.servicemanagement.v1.Rollout));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServiceRolloutsResponse {
            return ListServiceRolloutsResponse.deserialize(bytes);
        }
    }
    export class GetServiceRolloutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            rollout_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("rollout_id" in data && data.rollout_id != undefined) {
                    this.rollout_id = data.rollout_id;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rollout_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set rollout_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            service_name?: string;
            rollout_id?: string;
        }): GetServiceRolloutRequest {
            const message = new GetServiceRolloutRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.rollout_id != null) {
                message.rollout_id = data.rollout_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                rollout_id?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.rollout_id != null) {
                data.rollout_id = this.rollout_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.rollout_id.length)
                writer.writeString(2, this.rollout_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceRolloutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceRolloutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.rollout_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceRolloutRequest {
            return GetServiceRolloutRequest.deserialize(bytes);
        }
    }
    export class EnableServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): EnableServiceResponse {
            const message = new EnableServiceResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableServiceResponse {
            return EnableServiceResponse.deserialize(bytes);
        }
    }
    export class GenerateConfigReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            new_config?: dependency_7.google.protobuf.Any;
            old_config?: dependency_7.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_config" in data && data.new_config != undefined) {
                    this.new_config = data.new_config;
                }
                if ("old_config" in data && data.old_config != undefined) {
                    this.old_config = data.old_config;
                }
            }
        }
        get new_config() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Any, 1) as dependency_7.google.protobuf.Any;
        }
        set new_config(value: dependency_7.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_new_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get old_config() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Any, 2) as dependency_7.google.protobuf.Any;
        }
        set old_config(value: dependency_7.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_old_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            new_config?: ReturnType<typeof dependency_7.google.protobuf.Any.prototype.toObject>;
            old_config?: ReturnType<typeof dependency_7.google.protobuf.Any.prototype.toObject>;
        }): GenerateConfigReportRequest {
            const message = new GenerateConfigReportRequest({});
            if (data.new_config != null) {
                message.new_config = dependency_7.google.protobuf.Any.fromObject(data.new_config);
            }
            if (data.old_config != null) {
                message.old_config = dependency_7.google.protobuf.Any.fromObject(data.old_config);
            }
            return message;
        }
        toObject() {
            const data: {
                new_config?: ReturnType<typeof dependency_7.google.protobuf.Any.prototype.toObject>;
                old_config?: ReturnType<typeof dependency_7.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.new_config != null) {
                data.new_config = this.new_config.toObject();
            }
            if (this.old_config != null) {
                data.old_config = this.old_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_config)
                writer.writeMessage(1, this.new_config, () => this.new_config.serialize(writer));
            if (this.has_old_config)
                writer.writeMessage(2, this.old_config, () => this.old_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateConfigReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateConfigReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_config, () => message.new_config = dependency_7.google.protobuf.Any.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.old_config, () => message.old_config = dependency_7.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateConfigReportRequest {
            return GenerateConfigReportRequest.deserialize(bytes);
        }
    }
    export class GenerateConfigReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            id?: string;
            change_reports?: dependency_5.google.api.servicemanagement.v1.ChangeReport[];
            diagnostics?: dependency_5.google.api.servicemanagement.v1.Diagnostic[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("change_reports" in data && data.change_reports != undefined) {
                    this.change_reports = data.change_reports;
                }
                if ("diagnostics" in data && data.diagnostics != undefined) {
                    this.diagnostics = data.diagnostics;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get change_reports() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.api.servicemanagement.v1.ChangeReport, 3) as dependency_5.google.api.servicemanagement.v1.ChangeReport[];
        }
        set change_reports(value: dependency_5.google.api.servicemanagement.v1.ChangeReport[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get diagnostics() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.api.servicemanagement.v1.Diagnostic, 4) as dependency_5.google.api.servicemanagement.v1.Diagnostic[];
        }
        set diagnostics(value: dependency_5.google.api.servicemanagement.v1.Diagnostic[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            service_name?: string;
            id?: string;
            change_reports?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ChangeReport.prototype.toObject>[];
            diagnostics?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Diagnostic.prototype.toObject>[];
        }): GenerateConfigReportResponse {
            const message = new GenerateConfigReportResponse({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.change_reports != null) {
                message.change_reports = data.change_reports.map(item => dependency_5.google.api.servicemanagement.v1.ChangeReport.fromObject(item));
            }
            if (data.diagnostics != null) {
                message.diagnostics = data.diagnostics.map(item => dependency_5.google.api.servicemanagement.v1.Diagnostic.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                id?: string;
                change_reports?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.ChangeReport.prototype.toObject>[];
                diagnostics?: ReturnType<typeof dependency_5.google.api.servicemanagement.v1.Diagnostic.prototype.toObject>[];
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.change_reports != null) {
                data.change_reports = this.change_reports.map((item: dependency_5.google.api.servicemanagement.v1.ChangeReport) => item.toObject());
            }
            if (this.diagnostics != null) {
                data.diagnostics = this.diagnostics.map((item: dependency_5.google.api.servicemanagement.v1.Diagnostic) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (this.change_reports.length)
                writer.writeRepeatedMessage(3, this.change_reports, (item: dependency_5.google.api.servicemanagement.v1.ChangeReport) => item.serialize(writer));
            if (this.diagnostics.length)
                writer.writeRepeatedMessage(4, this.diagnostics, (item: dependency_5.google.api.servicemanagement.v1.Diagnostic) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateConfigReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateConfigReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.change_reports, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_5.google.api.servicemanagement.v1.ChangeReport.deserialize(reader), dependency_5.google.api.servicemanagement.v1.ChangeReport));
                        break;
                    case 4:
                        reader.readMessage(message.diagnostics, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_5.google.api.servicemanagement.v1.Diagnostic.deserialize(reader), dependency_5.google.api.servicemanagement.v1.Diagnostic));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateConfigReportResponse {
            return GenerateConfigReportResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceManagerService {
        static definition = {
            ListServices: {
                path: "/google.api.servicemanagement.v1.ServiceManager/ListServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListServicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListServicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListServicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListServicesResponse.deserialize(new Uint8Array(bytes))
            },
            GetService: {
                path: "/google.api.servicemanagement.v1.ServiceManager/GetService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.google.api.servicemanagement.v1.ManagedService) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.google.api.servicemanagement.v1.ManagedService.deserialize(new Uint8Array(bytes))
            },
            CreateService: {
                path: "/google.api.servicemanagement.v1.ServiceManager/CreateService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            DeleteService: {
                path: "/google.api.servicemanagement.v1.ServiceManager/DeleteService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            UndeleteService: {
                path: "/google.api.servicemanagement.v1.ServiceManager/UndeleteService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UndeleteServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UndeleteServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            ListServiceConfigs: {
                path: "/google.api.servicemanagement.v1.ServiceManager/ListServiceConfigs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListServiceConfigsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListServiceConfigsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListServiceConfigsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListServiceConfigsResponse.deserialize(new Uint8Array(bytes))
            },
            GetServiceConfig: {
                path: "/google.api.servicemanagement.v1.ServiceManager/GetServiceConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServiceConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServiceConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.api.Service) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.api.Service.deserialize(new Uint8Array(bytes))
            },
            CreateServiceConfig: {
                path: "/google.api.servicemanagement.v1.ServiceManager/CreateServiceConfig",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateServiceConfigRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateServiceConfigRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.api.Service) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.api.Service.deserialize(new Uint8Array(bytes))
            },
            SubmitConfigSource: {
                path: "/google.api.servicemanagement.v1.ServiceManager/SubmitConfigSource",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubmitConfigSourceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubmitConfigSourceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            ListServiceRollouts: {
                path: "/google.api.servicemanagement.v1.ServiceManager/ListServiceRollouts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListServiceRolloutsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListServiceRolloutsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListServiceRolloutsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListServiceRolloutsResponse.deserialize(new Uint8Array(bytes))
            },
            GetServiceRollout: {
                path: "/google.api.servicemanagement.v1.ServiceManager/GetServiceRollout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServiceRolloutRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServiceRolloutRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.google.api.servicemanagement.v1.Rollout) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.google.api.servicemanagement.v1.Rollout.deserialize(new Uint8Array(bytes))
            },
            CreateServiceRollout: {
                path: "/google.api.servicemanagement.v1.ServiceManager/CreateServiceRollout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateServiceRolloutRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateServiceRolloutRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            GenerateConfigReport: {
                path: "/google.api.servicemanagement.v1.ServiceManager/GenerateConfigReport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateConfigReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateConfigReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateConfigReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateConfigReportResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListServices(call: grpc_1.ServerUnaryCall<ListServicesRequest, ListServicesResponse>, callback: grpc_1.sendUnaryData<ListServicesResponse>): void;
        abstract GetService(call: grpc_1.ServerUnaryCall<GetServiceRequest, dependency_5.google.api.servicemanagement.v1.ManagedService>, callback: grpc_1.sendUnaryData<dependency_5.google.api.servicemanagement.v1.ManagedService>): void;
        abstract CreateService(call: grpc_1.ServerUnaryCall<CreateServiceRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract DeleteService(call: grpc_1.ServerUnaryCall<DeleteServiceRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract UndeleteService(call: grpc_1.ServerUnaryCall<UndeleteServiceRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract ListServiceConfigs(call: grpc_1.ServerUnaryCall<ListServiceConfigsRequest, ListServiceConfigsResponse>, callback: grpc_1.sendUnaryData<ListServiceConfigsResponse>): void;
        abstract GetServiceConfig(call: grpc_1.ServerUnaryCall<GetServiceConfigRequest, dependency_4.google.api.Service>, callback: grpc_1.sendUnaryData<dependency_4.google.api.Service>): void;
        abstract CreateServiceConfig(call: grpc_1.ServerUnaryCall<CreateServiceConfigRequest, dependency_4.google.api.Service>, callback: grpc_1.sendUnaryData<dependency_4.google.api.Service>): void;
        abstract SubmitConfigSource(call: grpc_1.ServerUnaryCall<SubmitConfigSourceRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract ListServiceRollouts(call: grpc_1.ServerUnaryCall<ListServiceRolloutsRequest, ListServiceRolloutsResponse>, callback: grpc_1.sendUnaryData<ListServiceRolloutsResponse>): void;
        abstract GetServiceRollout(call: grpc_1.ServerUnaryCall<GetServiceRolloutRequest, dependency_5.google.api.servicemanagement.v1.Rollout>, callback: grpc_1.sendUnaryData<dependency_5.google.api.servicemanagement.v1.Rollout>): void;
        abstract CreateServiceRollout(call: grpc_1.ServerUnaryCall<CreateServiceRolloutRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract GenerateConfigReport(call: grpc_1.ServerUnaryCall<GenerateConfigReportRequest, GenerateConfigReportResponse>, callback: grpc_1.sendUnaryData<GenerateConfigReportResponse>): void;
    }
    export class ServiceManagerClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceManagerService.definition, "ServiceManager", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListServices: GrpcUnaryServiceInterface<ListServicesRequest, ListServicesResponse> = (message: ListServicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListServicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListServicesResponse>, callback?: grpc_1.requestCallback<ListServicesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListServices(message, metadata, options, callback);
        };
        GetService: GrpcUnaryServiceInterface<GetServiceRequest, dependency_5.google.api.servicemanagement.v1.ManagedService> = (message: GetServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.ManagedService>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.ManagedService>, callback?: grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.ManagedService>): grpc_1.ClientUnaryCall => {
            return super.GetService(message, metadata, options, callback);
        };
        CreateService: GrpcUnaryServiceInterface<CreateServiceRequest, dependency_6.google.longrunning.Operation> = (message: CreateServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.CreateService(message, metadata, options, callback);
        };
        DeleteService: GrpcUnaryServiceInterface<DeleteServiceRequest, dependency_6.google.longrunning.Operation> = (message: DeleteServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.DeleteService(message, metadata, options, callback);
        };
        UndeleteService: GrpcUnaryServiceInterface<UndeleteServiceRequest, dependency_6.google.longrunning.Operation> = (message: UndeleteServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.UndeleteService(message, metadata, options, callback);
        };
        ListServiceConfigs: GrpcUnaryServiceInterface<ListServiceConfigsRequest, ListServiceConfigsResponse> = (message: ListServiceConfigsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListServiceConfigsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListServiceConfigsResponse>, callback?: grpc_1.requestCallback<ListServiceConfigsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListServiceConfigs(message, metadata, options, callback);
        };
        GetServiceConfig: GrpcUnaryServiceInterface<GetServiceConfigRequest, dependency_4.google.api.Service> = (message: GetServiceConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.api.Service>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.api.Service>, callback?: grpc_1.requestCallback<dependency_4.google.api.Service>): grpc_1.ClientUnaryCall => {
            return super.GetServiceConfig(message, metadata, options, callback);
        };
        CreateServiceConfig: GrpcUnaryServiceInterface<CreateServiceConfigRequest, dependency_4.google.api.Service> = (message: CreateServiceConfigRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.api.Service>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.api.Service>, callback?: grpc_1.requestCallback<dependency_4.google.api.Service>): grpc_1.ClientUnaryCall => {
            return super.CreateServiceConfig(message, metadata, options, callback);
        };
        SubmitConfigSource: GrpcUnaryServiceInterface<SubmitConfigSourceRequest, dependency_6.google.longrunning.Operation> = (message: SubmitConfigSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.SubmitConfigSource(message, metadata, options, callback);
        };
        ListServiceRollouts: GrpcUnaryServiceInterface<ListServiceRolloutsRequest, ListServiceRolloutsResponse> = (message: ListServiceRolloutsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListServiceRolloutsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListServiceRolloutsResponse>, callback?: grpc_1.requestCallback<ListServiceRolloutsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListServiceRollouts(message, metadata, options, callback);
        };
        GetServiceRollout: GrpcUnaryServiceInterface<GetServiceRolloutRequest, dependency_5.google.api.servicemanagement.v1.Rollout> = (message: GetServiceRolloutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.Rollout>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.Rollout>, callback?: grpc_1.requestCallback<dependency_5.google.api.servicemanagement.v1.Rollout>): grpc_1.ClientUnaryCall => {
            return super.GetServiceRollout(message, metadata, options, callback);
        };
        CreateServiceRollout: GrpcUnaryServiceInterface<CreateServiceRolloutRequest, dependency_6.google.longrunning.Operation> = (message: CreateServiceRolloutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.CreateServiceRollout(message, metadata, options, callback);
        };
        GenerateConfigReport: GrpcUnaryServiceInterface<GenerateConfigReportRequest, GenerateConfigReportResponse> = (message: GenerateConfigReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateConfigReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateConfigReportResponse>, callback?: grpc_1.requestCallback<GenerateConfigReportResponse>): grpc_1.ClientUnaryCall => {
            return super.GenerateConfigReport(message, metadata, options, callback);
        };
    }
}
