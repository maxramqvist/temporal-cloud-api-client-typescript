/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicemanagement/v1/resources.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../config_change";
import * as dependency_2 from "./../../field_behavior";
import * as dependency_3 from "./../../../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.api.servicemanagement.v1 {
    export class ManagedService extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            producer_project_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("producer_project_id" in data && data.producer_project_id != undefined) {
                    this.producer_project_id = data.producer_project_id;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get producer_project_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set producer_project_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            producer_project_id?: string;
        }): ManagedService {
            const message = new ManagedService({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.producer_project_id != null) {
                message.producer_project_id = data.producer_project_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                producer_project_id?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.producer_project_id != null) {
                data.producer_project_id = this.producer_project_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(2, this.service_name);
            if (this.producer_project_id.length)
                writer.writeString(3, this.producer_project_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagedService {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagedService();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.service_name = reader.readString();
                        break;
                    case 3:
                        message.producer_project_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagedService {
            return ManagedService.deserialize(bytes);
        }
    }
    export class OperationMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resource_names?: string[];
            steps?: OperationMetadata.Step[];
            progress_percentage?: number;
            start_time?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resource_names" in data && data.resource_names != undefined) {
                    this.resource_names = data.resource_names;
                }
                if ("steps" in data && data.steps != undefined) {
                    this.steps = data.steps;
                }
                if ("progress_percentage" in data && data.progress_percentage != undefined) {
                    this.progress_percentage = data.progress_percentage;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
            }
        }
        get resource_names() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set resource_names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get steps() {
            return pb_1.Message.getRepeatedWrapperField(this, OperationMetadata.Step, 2) as OperationMetadata.Step[];
        }
        set steps(value: OperationMetadata.Step[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get progress_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set progress_percentage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 4) as dependency_3.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            resource_names?: string[];
            steps?: ReturnType<typeof OperationMetadata.Step.prototype.toObject>[];
            progress_percentage?: number;
            start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): OperationMetadata {
            const message = new OperationMetadata({});
            if (data.resource_names != null) {
                message.resource_names = data.resource_names;
            }
            if (data.steps != null) {
                message.steps = data.steps.map(item => OperationMetadata.Step.fromObject(item));
            }
            if (data.progress_percentage != null) {
                message.progress_percentage = data.progress_percentage;
            }
            if (data.start_time != null) {
                message.start_time = dependency_3.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            return message;
        }
        toObject() {
            const data: {
                resource_names?: string[];
                steps?: ReturnType<typeof OperationMetadata.Step.prototype.toObject>[];
                progress_percentage?: number;
                start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.resource_names != null) {
                data.resource_names = this.resource_names;
            }
            if (this.steps != null) {
                data.steps = this.steps.map((item: OperationMetadata.Step) => item.toObject());
            }
            if (this.progress_percentage != null) {
                data.progress_percentage = this.progress_percentage;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resource_names.length)
                writer.writeRepeatedString(1, this.resource_names);
            if (this.steps.length)
                writer.writeRepeatedMessage(2, this.steps, (item: OperationMetadata.Step) => item.serialize(writer));
            if (this.progress_percentage != 0)
                writer.writeInt32(3, this.progress_percentage);
            if (this.has_start_time)
                writer.writeMessage(4, this.start_time, () => this.start_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.steps, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OperationMetadata.Step.deserialize(reader), OperationMetadata.Step));
                        break;
                    case 3:
                        message.progress_percentage = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationMetadata {
            return OperationMetadata.deserialize(bytes);
        }
    }
    export namespace OperationMetadata {
        export enum Status {
            STATUS_UNSPECIFIED = 0,
            DONE = 1,
            NOT_STARTED = 2,
            IN_PROGRESS = 3,
            FAILED = 4,
            CANCELLED = 5
        }
        export class Step extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                description?: string;
                status?: OperationMetadata.Status;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                }
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 4, OperationMetadata.Status.STATUS_UNSPECIFIED) as OperationMetadata.Status;
            }
            set status(value: OperationMetadata.Status) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                description?: string;
                status?: OperationMetadata.Status;
            }): Step {
                const message = new Step({});
                if (data.description != null) {
                    message.description = data.description;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                return message;
            }
            toObject() {
                const data: {
                    description?: string;
                    status?: OperationMetadata.Status;
                } = {};
                if (this.description != null) {
                    data.description = this.description;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.description.length)
                    writer.writeString(2, this.description);
                if (this.status != OperationMetadata.Status.STATUS_UNSPECIFIED)
                    writer.writeEnum(4, this.status);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Step {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Step();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            message.description = reader.readString();
                            break;
                        case 4:
                            message.status = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Step {
                return Step.deserialize(bytes);
            }
        }
    }
    export class Diagnostic extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            kind?: Diagnostic.Kind;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 2, Diagnostic.Kind.WARNING) as Diagnostic.Kind;
        }
        set kind(value: Diagnostic.Kind) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            location?: string;
            kind?: Diagnostic.Kind;
            message?: string;
        }): Diagnostic {
            const message = new Diagnostic({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                kind?: Diagnostic.Kind;
                message?: string;
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(1, this.location);
            if (this.kind != Diagnostic.Kind.WARNING)
                writer.writeEnum(2, this.kind);
            if (this.message.length)
                writer.writeString(3, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Diagnostic {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Diagnostic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.location = reader.readString();
                        break;
                    case 2:
                        message.kind = reader.readEnum();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Diagnostic {
            return Diagnostic.deserialize(bytes);
        }
    }
    export namespace Diagnostic {
        export enum Kind {
            WARNING = 0,
            ERROR = 1
        }
    }
    export class ConfigSource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            files?: ConfigFile[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, ConfigFile, 2) as ConfigFile[];
        }
        set files(value: ConfigFile[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            files?: ReturnType<typeof ConfigFile.prototype.toObject>[];
        }): ConfigSource {
            const message = new ConfigSource({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.files != null) {
                message.files = data.files.map(item => ConfigFile.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                files?: ReturnType<typeof ConfigFile.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.files != null) {
                data.files = this.files.map((item: ConfigFile) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(5, this.id);
            if (this.files.length)
                writer.writeRepeatedMessage(2, this.files, (item: ConfigFile) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigSource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigSource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ConfigFile.deserialize(reader), ConfigFile));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigSource {
            return ConfigSource.deserialize(bytes);
        }
    }
    export class ConfigFile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_path?: string;
            file_contents?: Uint8Array;
            file_type?: ConfigFile.FileType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_path" in data && data.file_path != undefined) {
                    this.file_path = data.file_path;
                }
                if ("file_contents" in data && data.file_contents != undefined) {
                    this.file_contents = data.file_contents;
                }
                if ("file_type" in data && data.file_type != undefined) {
                    this.file_type = data.file_type;
                }
            }
        }
        get file_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_contents() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set file_contents(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get file_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, ConfigFile.FileType.FILE_TYPE_UNSPECIFIED) as ConfigFile.FileType;
        }
        set file_type(value: ConfigFile.FileType) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            file_path?: string;
            file_contents?: Uint8Array;
            file_type?: ConfigFile.FileType;
        }): ConfigFile {
            const message = new ConfigFile({});
            if (data.file_path != null) {
                message.file_path = data.file_path;
            }
            if (data.file_contents != null) {
                message.file_contents = data.file_contents;
            }
            if (data.file_type != null) {
                message.file_type = data.file_type;
            }
            return message;
        }
        toObject() {
            const data: {
                file_path?: string;
                file_contents?: Uint8Array;
                file_type?: ConfigFile.FileType;
            } = {};
            if (this.file_path != null) {
                data.file_path = this.file_path;
            }
            if (this.file_contents != null) {
                data.file_contents = this.file_contents;
            }
            if (this.file_type != null) {
                data.file_type = this.file_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file_path.length)
                writer.writeString(1, this.file_path);
            if (this.file_contents.length)
                writer.writeBytes(3, this.file_contents);
            if (this.file_type != ConfigFile.FileType.FILE_TYPE_UNSPECIFIED)
                writer.writeEnum(4, this.file_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigFile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigFile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_path = reader.readString();
                        break;
                    case 3:
                        message.file_contents = reader.readBytes();
                        break;
                    case 4:
                        message.file_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigFile {
            return ConfigFile.deserialize(bytes);
        }
    }
    export namespace ConfigFile {
        export enum FileType {
            FILE_TYPE_UNSPECIFIED = 0,
            SERVICE_CONFIG_YAML = 1,
            OPEN_API_JSON = 2,
            OPEN_API_YAML = 3,
            FILE_DESCRIPTOR_SET_PROTO = 4,
            PROTO_FILE = 6
        }
    }
    export class ConfigRef extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): ConfigRef {
            const message = new ConfigRef({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigRef {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigRef();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigRef {
            return ConfigRef.deserialize(bytes);
        }
    }
    export class ChangeReport extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_changes?: dependency_1.google.api.ConfigChange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_changes" in data && data.config_changes != undefined) {
                    this.config_changes = data.config_changes;
                }
            }
        }
        get config_changes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.api.ConfigChange, 1) as dependency_1.google.api.ConfigChange[];
        }
        set config_changes(value: dependency_1.google.api.ConfigChange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            config_changes?: ReturnType<typeof dependency_1.google.api.ConfigChange.prototype.toObject>[];
        }): ChangeReport {
            const message = new ChangeReport({});
            if (data.config_changes != null) {
                message.config_changes = data.config_changes.map(item => dependency_1.google.api.ConfigChange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                config_changes?: ReturnType<typeof dependency_1.google.api.ConfigChange.prototype.toObject>[];
            } = {};
            if (this.config_changes != null) {
                data.config_changes = this.config_changes.map((item: dependency_1.google.api.ConfigChange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_changes.length)
                writer.writeRepeatedMessage(1, this.config_changes, (item: dependency_1.google.api.ConfigChange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeReport {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeReport();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.config_changes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.google.api.ConfigChange.deserialize(reader), dependency_1.google.api.ConfigChange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeReport {
            return ChangeReport.deserialize(bytes);
        }
    }
    export class Rollout extends pb_1.Message {
        #one_of_decls: number[][] = [[5, 200]];
        constructor(data?: any[] | ({
            rollout_id?: string;
            create_time?: dependency_3.google.protobuf.Timestamp;
            created_by?: string;
            status?: Rollout.RolloutStatus;
            service_name?: string;
        } & (({
            traffic_percent_strategy?: Rollout.TrafficPercentStrategy;
            delete_service_strategy?: never;
        } | {
            traffic_percent_strategy?: never;
            delete_service_strategy?: Rollout.DeleteServiceStrategy;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rollout_id" in data && data.rollout_id != undefined) {
                    this.rollout_id = data.rollout_id;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("created_by" in data && data.created_by != undefined) {
                    this.created_by = data.created_by;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("traffic_percent_strategy" in data && data.traffic_percent_strategy != undefined) {
                    this.traffic_percent_strategy = data.traffic_percent_strategy;
                }
                if ("delete_service_strategy" in data && data.delete_service_strategy != undefined) {
                    this.delete_service_strategy = data.delete_service_strategy;
                }
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
            }
        }
        get rollout_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rollout_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get create_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 2) as dependency_3.google.protobuf.Timestamp;
        }
        set create_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_create_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get created_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set created_by(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, Rollout.RolloutStatus.ROLLOUT_STATUS_UNSPECIFIED) as Rollout.RolloutStatus;
        }
        set status(value: Rollout.RolloutStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get traffic_percent_strategy() {
            return pb_1.Message.getWrapperField(this, Rollout.TrafficPercentStrategy, 5) as Rollout.TrafficPercentStrategy;
        }
        set traffic_percent_strategy(value: Rollout.TrafficPercentStrategy) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_traffic_percent_strategy() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get delete_service_strategy() {
            return pb_1.Message.getWrapperField(this, Rollout.DeleteServiceStrategy, 200) as Rollout.DeleteServiceStrategy;
        }
        set delete_service_strategy(value: Rollout.DeleteServiceStrategy) {
            pb_1.Message.setOneofWrapperField(this, 200, this.#one_of_decls[0], value);
        }
        get has_delete_service_strategy() {
            return pb_1.Message.getField(this, 200) != null;
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get strategy() {
            const cases: {
                [index: number]: "none" | "traffic_percent_strategy" | "delete_service_strategy";
            } = {
                0: "none",
                5: "traffic_percent_strategy",
                200: "delete_service_strategy"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 200])];
        }
        static fromObject(data: {
            rollout_id?: string;
            create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            created_by?: string;
            status?: Rollout.RolloutStatus;
            traffic_percent_strategy?: ReturnType<typeof Rollout.TrafficPercentStrategy.prototype.toObject>;
            delete_service_strategy?: ReturnType<typeof Rollout.DeleteServiceStrategy.prototype.toObject>;
            service_name?: string;
        }): Rollout {
            const message = new Rollout({});
            if (data.rollout_id != null) {
                message.rollout_id = data.rollout_id;
            }
            if (data.create_time != null) {
                message.create_time = dependency_3.google.protobuf.Timestamp.fromObject(data.create_time);
            }
            if (data.created_by != null) {
                message.created_by = data.created_by;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.traffic_percent_strategy != null) {
                message.traffic_percent_strategy = Rollout.TrafficPercentStrategy.fromObject(data.traffic_percent_strategy);
            }
            if (data.delete_service_strategy != null) {
                message.delete_service_strategy = Rollout.DeleteServiceStrategy.fromObject(data.delete_service_strategy);
            }
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            return message;
        }
        toObject() {
            const data: {
                rollout_id?: string;
                create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                created_by?: string;
                status?: Rollout.RolloutStatus;
                traffic_percent_strategy?: ReturnType<typeof Rollout.TrafficPercentStrategy.prototype.toObject>;
                delete_service_strategy?: ReturnType<typeof Rollout.DeleteServiceStrategy.prototype.toObject>;
                service_name?: string;
            } = {};
            if (this.rollout_id != null) {
                data.rollout_id = this.rollout_id;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time.toObject();
            }
            if (this.created_by != null) {
                data.created_by = this.created_by;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.traffic_percent_strategy != null) {
                data.traffic_percent_strategy = this.traffic_percent_strategy.toObject();
            }
            if (this.delete_service_strategy != null) {
                data.delete_service_strategy = this.delete_service_strategy.toObject();
            }
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rollout_id.length)
                writer.writeString(1, this.rollout_id);
            if (this.has_create_time)
                writer.writeMessage(2, this.create_time, () => this.create_time.serialize(writer));
            if (this.created_by.length)
                writer.writeString(3, this.created_by);
            if (this.status != Rollout.RolloutStatus.ROLLOUT_STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.status);
            if (this.has_traffic_percent_strategy)
                writer.writeMessage(5, this.traffic_percent_strategy, () => this.traffic_percent_strategy.serialize(writer));
            if (this.has_delete_service_strategy)
                writer.writeMessage(200, this.delete_service_strategy, () => this.delete_service_strategy.serialize(writer));
            if (this.service_name.length)
                writer.writeString(8, this.service_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Rollout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rollout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rollout_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.create_time, () => message.create_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.created_by = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.traffic_percent_strategy, () => message.traffic_percent_strategy = Rollout.TrafficPercentStrategy.deserialize(reader));
                        break;
                    case 200:
                        reader.readMessage(message.delete_service_strategy, () => message.delete_service_strategy = Rollout.DeleteServiceStrategy.deserialize(reader));
                        break;
                    case 8:
                        message.service_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Rollout {
            return Rollout.deserialize(bytes);
        }
    }
    export namespace Rollout {
        export enum RolloutStatus {
            ROLLOUT_STATUS_UNSPECIFIED = 0,
            IN_PROGRESS = 1,
            SUCCESS = 2,
            CANCELLED = 3,
            FAILED = 4,
            PENDING = 5,
            FAILED_ROLLED_BACK = 6
        }
        export class TrafficPercentStrategy extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                percentages?: Map<string, number>;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("percentages" in data && data.percentages != undefined) {
                        this.percentages = data.percentages;
                    }
                }
                if (!this.percentages)
                    this.percentages = new Map();
            }
            get percentages() {
                return pb_1.Message.getField(this, 1) as any as Map<string, number>;
            }
            set percentages(value: Map<string, number>) {
                pb_1.Message.setField(this, 1, value as any);
            }
            static fromObject(data: {
                percentages?: {
                    [key: string]: number;
                };
            }): TrafficPercentStrategy {
                const message = new TrafficPercentStrategy({});
                if (typeof data.percentages == "object") {
                    message.percentages = new Map(Object.entries(data.percentages));
                }
                return message;
            }
            toObject() {
                const data: {
                    percentages?: {
                        [key: string]: number;
                    };
                } = {};
                if (this.percentages != null) {
                    data.percentages = (Object.fromEntries)(this.percentages);
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                for (const [key, value] of this.percentages) {
                    writer.writeMessage(1, this.percentages, () => {
                        writer.writeString(1, key);
                        writer.writeDouble(2, value);
                    });
                }
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrafficPercentStrategy {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrafficPercentStrategy();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.percentages as any, reader, reader.readString, reader.readDouble));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TrafficPercentStrategy {
                return TrafficPercentStrategy.deserialize(bytes);
            }
        }
        export class DeleteServiceStrategy extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): DeleteServiceStrategy {
                const message = new DeleteServiceStrategy({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServiceStrategy {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServiceStrategy();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DeleteServiceStrategy {
                return DeleteServiceStrategy.deserialize(bytes);
            }
        }
    }
}
