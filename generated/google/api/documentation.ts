/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/documentation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class Documentation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            summary?: string;
            pages?: Page[];
            rules?: DocumentationRule[];
            documentation_root_url?: string;
            service_root_url?: string;
            overview?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("pages" in data && data.pages != undefined) {
                    this.pages = data.pages;
                }
                if ("rules" in data && data.rules != undefined) {
                    this.rules = data.rules;
                }
                if ("documentation_root_url" in data && data.documentation_root_url != undefined) {
                    this.documentation_root_url = data.documentation_root_url;
                }
                if ("service_root_url" in data && data.service_root_url != undefined) {
                    this.service_root_url = data.service_root_url;
                }
                if ("overview" in data && data.overview != undefined) {
                    this.overview = data.overview;
                }
            }
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pages() {
            return pb_1.Message.getRepeatedWrapperField(this, Page, 5) as Page[];
        }
        set pages(value: Page[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get rules() {
            return pb_1.Message.getRepeatedWrapperField(this, DocumentationRule, 3) as DocumentationRule[];
        }
        set rules(value: DocumentationRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get documentation_root_url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set documentation_root_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get service_root_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set service_root_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get overview() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set overview(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            summary?: string;
            pages?: ReturnType<typeof Page.prototype.toObject>[];
            rules?: ReturnType<typeof DocumentationRule.prototype.toObject>[];
            documentation_root_url?: string;
            service_root_url?: string;
            overview?: string;
        }): Documentation {
            const message = new Documentation({});
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.pages != null) {
                message.pages = data.pages.map(item => Page.fromObject(item));
            }
            if (data.rules != null) {
                message.rules = data.rules.map(item => DocumentationRule.fromObject(item));
            }
            if (data.documentation_root_url != null) {
                message.documentation_root_url = data.documentation_root_url;
            }
            if (data.service_root_url != null) {
                message.service_root_url = data.service_root_url;
            }
            if (data.overview != null) {
                message.overview = data.overview;
            }
            return message;
        }
        toObject() {
            const data: {
                summary?: string;
                pages?: ReturnType<typeof Page.prototype.toObject>[];
                rules?: ReturnType<typeof DocumentationRule.prototype.toObject>[];
                documentation_root_url?: string;
                service_root_url?: string;
                overview?: string;
            } = {};
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.pages != null) {
                data.pages = this.pages.map((item: Page) => item.toObject());
            }
            if (this.rules != null) {
                data.rules = this.rules.map((item: DocumentationRule) => item.toObject());
            }
            if (this.documentation_root_url != null) {
                data.documentation_root_url = this.documentation_root_url;
            }
            if (this.service_root_url != null) {
                data.service_root_url = this.service_root_url;
            }
            if (this.overview != null) {
                data.overview = this.overview;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.summary.length)
                writer.writeString(1, this.summary);
            if (this.pages.length)
                writer.writeRepeatedMessage(5, this.pages, (item: Page) => item.serialize(writer));
            if (this.rules.length)
                writer.writeRepeatedMessage(3, this.rules, (item: DocumentationRule) => item.serialize(writer));
            if (this.documentation_root_url.length)
                writer.writeString(4, this.documentation_root_url);
            if (this.service_root_url.length)
                writer.writeString(6, this.service_root_url);
            if (this.overview.length)
                writer.writeString(2, this.overview);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Documentation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Documentation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.summary = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.pages, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Page.deserialize(reader), Page));
                        break;
                    case 3:
                        reader.readMessage(message.rules, () => pb_1.Message.addToRepeatedWrapperField(message, 3, DocumentationRule.deserialize(reader), DocumentationRule));
                        break;
                    case 4:
                        message.documentation_root_url = reader.readString();
                        break;
                    case 6:
                        message.service_root_url = reader.readString();
                        break;
                    case 2:
                        message.overview = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Documentation {
            return Documentation.deserialize(bytes);
        }
    }
    export class DocumentationRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            selector?: string;
            description?: string;
            deprecation_description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("selector" in data && data.selector != undefined) {
                    this.selector = data.selector;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("deprecation_description" in data && data.deprecation_description != undefined) {
                    this.deprecation_description = data.deprecation_description;
                }
            }
        }
        get selector() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set selector(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get deprecation_description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set deprecation_description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            selector?: string;
            description?: string;
            deprecation_description?: string;
        }): DocumentationRule {
            const message = new DocumentationRule({});
            if (data.selector != null) {
                message.selector = data.selector;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.deprecation_description != null) {
                message.deprecation_description = data.deprecation_description;
            }
            return message;
        }
        toObject() {
            const data: {
                selector?: string;
                description?: string;
                deprecation_description?: string;
            } = {};
            if (this.selector != null) {
                data.selector = this.selector;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.deprecation_description != null) {
                data.deprecation_description = this.deprecation_description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.selector.length)
                writer.writeString(1, this.selector);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.deprecation_description.length)
                writer.writeString(3, this.deprecation_description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentationRule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentationRule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.selector = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.deprecation_description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DocumentationRule {
            return DocumentationRule.deserialize(bytes);
        }
    }
    export class Page extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            content?: string;
            subpages?: Page[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("subpages" in data && data.subpages != undefined) {
                    this.subpages = data.subpages;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get subpages() {
            return pb_1.Message.getRepeatedWrapperField(this, Page, 3) as Page[];
        }
        set subpages(value: Page[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            content?: string;
            subpages?: ReturnType<typeof Page.prototype.toObject>[];
        }): Page {
            const message = new Page({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.subpages != null) {
                message.subpages = data.subpages.map(item => Page.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                content?: string;
                subpages?: ReturnType<typeof Page.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.subpages != null) {
                data.subpages = this.subpages.map((item: Page) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.subpages.length)
                writer.writeRepeatedMessage(3, this.subpages, (item: Page) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Page {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Page();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.subpages, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Page.deserialize(reader), Page));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Page {
            return Page.deserialize(bytes);
        }
    }
}
