/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/config_change.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export enum ChangeType {
        CHANGE_TYPE_UNSPECIFIED = 0,
        ADDED = 1,
        REMOVED = 2,
        MODIFIED = 3
    }
    export class ConfigChange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            element?: string;
            old_value?: string;
            new_value?: string;
            change_type?: ChangeType;
            advices?: Advice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("element" in data && data.element != undefined) {
                    this.element = data.element;
                }
                if ("old_value" in data && data.old_value != undefined) {
                    this.old_value = data.old_value;
                }
                if ("new_value" in data && data.new_value != undefined) {
                    this.new_value = data.new_value;
                }
                if ("change_type" in data && data.change_type != undefined) {
                    this.change_type = data.change_type;
                }
                if ("advices" in data && data.advices != undefined) {
                    this.advices = data.advices;
                }
            }
        }
        get element() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set element(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set old_value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get change_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, ChangeType.CHANGE_TYPE_UNSPECIFIED) as ChangeType;
        }
        set change_type(value: ChangeType) {
            pb_1.Message.setField(this, 4, value);
        }
        get advices() {
            return pb_1.Message.getRepeatedWrapperField(this, Advice, 5) as Advice[];
        }
        set advices(value: Advice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            element?: string;
            old_value?: string;
            new_value?: string;
            change_type?: ChangeType;
            advices?: ReturnType<typeof Advice.prototype.toObject>[];
        }): ConfigChange {
            const message = new ConfigChange({});
            if (data.element != null) {
                message.element = data.element;
            }
            if (data.old_value != null) {
                message.old_value = data.old_value;
            }
            if (data.new_value != null) {
                message.new_value = data.new_value;
            }
            if (data.change_type != null) {
                message.change_type = data.change_type;
            }
            if (data.advices != null) {
                message.advices = data.advices.map(item => Advice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                element?: string;
                old_value?: string;
                new_value?: string;
                change_type?: ChangeType;
                advices?: ReturnType<typeof Advice.prototype.toObject>[];
            } = {};
            if (this.element != null) {
                data.element = this.element;
            }
            if (this.old_value != null) {
                data.old_value = this.old_value;
            }
            if (this.new_value != null) {
                data.new_value = this.new_value;
            }
            if (this.change_type != null) {
                data.change_type = this.change_type;
            }
            if (this.advices != null) {
                data.advices = this.advices.map((item: Advice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.element.length)
                writer.writeString(1, this.element);
            if (this.old_value.length)
                writer.writeString(2, this.old_value);
            if (this.new_value.length)
                writer.writeString(3, this.new_value);
            if (this.change_type != ChangeType.CHANGE_TYPE_UNSPECIFIED)
                writer.writeEnum(4, this.change_type);
            if (this.advices.length)
                writer.writeRepeatedMessage(5, this.advices, (item: Advice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigChange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.element = reader.readString();
                        break;
                    case 2:
                        message.old_value = reader.readString();
                        break;
                    case 3:
                        message.new_value = reader.readString();
                        break;
                    case 4:
                        message.change_type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.advices, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Advice.deserialize(reader), Advice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigChange {
            return ConfigChange.deserialize(bytes);
        }
    }
    export class Advice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            description?: string;
        }): Advice {
            const message = new Advice({});
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(2, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Advice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Advice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Advice {
            return Advice.deserialize(bytes);
        }
    }
}
