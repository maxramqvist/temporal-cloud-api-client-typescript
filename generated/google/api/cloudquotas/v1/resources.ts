/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/cloudquotas/v1/resources.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../field_behavior";
import * as dependency_2 from "./../../resource";
import * as dependency_3 from "./../../../protobuf/timestamp";
import * as dependency_4 from "./../../../protobuf/wrappers";
import * as pb_1 from "google-protobuf";
export namespace google.api.cloudquotas.v1 {
    export enum QuotaSafetyCheck {
        QUOTA_SAFETY_CHECK_UNSPECIFIED = 0,
        QUOTA_DECREASE_BELOW_USAGE = 1,
        QUOTA_DECREASE_PERCENTAGE_TOO_HIGH = 2
    }
    export class QuotaInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            quota_id?: string;
            metric?: string;
            service?: string;
            is_precise?: boolean;
            refresh_interval?: string;
            container_type?: QuotaInfo.ContainerType;
            dimensions?: string[];
            metric_display_name?: string;
            quota_display_name?: string;
            metric_unit?: string;
            quota_increase_eligibility?: QuotaIncreaseEligibility;
            is_fixed?: boolean;
            dimensions_infos?: DimensionsInfo[];
            is_concurrent?: boolean;
            service_request_quota_uri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 14], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("quota_id" in data && data.quota_id != undefined) {
                    this.quota_id = data.quota_id;
                }
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
                if ("is_precise" in data && data.is_precise != undefined) {
                    this.is_precise = data.is_precise;
                }
                if ("refresh_interval" in data && data.refresh_interval != undefined) {
                    this.refresh_interval = data.refresh_interval;
                }
                if ("container_type" in data && data.container_type != undefined) {
                    this.container_type = data.container_type;
                }
                if ("dimensions" in data && data.dimensions != undefined) {
                    this.dimensions = data.dimensions;
                }
                if ("metric_display_name" in data && data.metric_display_name != undefined) {
                    this.metric_display_name = data.metric_display_name;
                }
                if ("quota_display_name" in data && data.quota_display_name != undefined) {
                    this.quota_display_name = data.quota_display_name;
                }
                if ("metric_unit" in data && data.metric_unit != undefined) {
                    this.metric_unit = data.metric_unit;
                }
                if ("quota_increase_eligibility" in data && data.quota_increase_eligibility != undefined) {
                    this.quota_increase_eligibility = data.quota_increase_eligibility;
                }
                if ("is_fixed" in data && data.is_fixed != undefined) {
                    this.is_fixed = data.is_fixed;
                }
                if ("dimensions_infos" in data && data.dimensions_infos != undefined) {
                    this.dimensions_infos = data.dimensions_infos;
                }
                if ("is_concurrent" in data && data.is_concurrent != undefined) {
                    this.is_concurrent = data.is_concurrent;
                }
                if ("service_request_quota_uri" in data && data.service_request_quota_uri != undefined) {
                    this.service_request_quota_uri = data.service_request_quota_uri;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get quota_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set quota_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get service() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set service(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_precise() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_precise(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get refresh_interval() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set refresh_interval(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get container_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, QuotaInfo.ContainerType.CONTAINER_TYPE_UNSPECIFIED) as QuotaInfo.ContainerType;
        }
        set container_type(value: QuotaInfo.ContainerType) {
            pb_1.Message.setField(this, 7, value);
        }
        get dimensions() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set dimensions(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get metric_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set metric_display_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get quota_display_name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set quota_display_name(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get metric_unit() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set metric_unit(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get quota_increase_eligibility() {
            return pb_1.Message.getWrapperField(this, QuotaIncreaseEligibility, 12) as QuotaIncreaseEligibility;
        }
        set quota_increase_eligibility(value: QuotaIncreaseEligibility) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_quota_increase_eligibility() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get is_fixed() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set is_fixed(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get dimensions_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, DimensionsInfo, 14) as DimensionsInfo[];
        }
        set dimensions_infos(value: DimensionsInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        get is_concurrent() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set is_concurrent(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get service_request_quota_uri() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set service_request_quota_uri(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            name?: string;
            quota_id?: string;
            metric?: string;
            service?: string;
            is_precise?: boolean;
            refresh_interval?: string;
            container_type?: QuotaInfo.ContainerType;
            dimensions?: string[];
            metric_display_name?: string;
            quota_display_name?: string;
            metric_unit?: string;
            quota_increase_eligibility?: ReturnType<typeof QuotaIncreaseEligibility.prototype.toObject>;
            is_fixed?: boolean;
            dimensions_infos?: ReturnType<typeof DimensionsInfo.prototype.toObject>[];
            is_concurrent?: boolean;
            service_request_quota_uri?: string;
        }): QuotaInfo {
            const message = new QuotaInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.quota_id != null) {
                message.quota_id = data.quota_id;
            }
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (data.service != null) {
                message.service = data.service;
            }
            if (data.is_precise != null) {
                message.is_precise = data.is_precise;
            }
            if (data.refresh_interval != null) {
                message.refresh_interval = data.refresh_interval;
            }
            if (data.container_type != null) {
                message.container_type = data.container_type;
            }
            if (data.dimensions != null) {
                message.dimensions = data.dimensions;
            }
            if (data.metric_display_name != null) {
                message.metric_display_name = data.metric_display_name;
            }
            if (data.quota_display_name != null) {
                message.quota_display_name = data.quota_display_name;
            }
            if (data.metric_unit != null) {
                message.metric_unit = data.metric_unit;
            }
            if (data.quota_increase_eligibility != null) {
                message.quota_increase_eligibility = QuotaIncreaseEligibility.fromObject(data.quota_increase_eligibility);
            }
            if (data.is_fixed != null) {
                message.is_fixed = data.is_fixed;
            }
            if (data.dimensions_infos != null) {
                message.dimensions_infos = data.dimensions_infos.map(item => DimensionsInfo.fromObject(item));
            }
            if (data.is_concurrent != null) {
                message.is_concurrent = data.is_concurrent;
            }
            if (data.service_request_quota_uri != null) {
                message.service_request_quota_uri = data.service_request_quota_uri;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                quota_id?: string;
                metric?: string;
                service?: string;
                is_precise?: boolean;
                refresh_interval?: string;
                container_type?: QuotaInfo.ContainerType;
                dimensions?: string[];
                metric_display_name?: string;
                quota_display_name?: string;
                metric_unit?: string;
                quota_increase_eligibility?: ReturnType<typeof QuotaIncreaseEligibility.prototype.toObject>;
                is_fixed?: boolean;
                dimensions_infos?: ReturnType<typeof DimensionsInfo.prototype.toObject>[];
                is_concurrent?: boolean;
                service_request_quota_uri?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.quota_id != null) {
                data.quota_id = this.quota_id;
            }
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.service != null) {
                data.service = this.service;
            }
            if (this.is_precise != null) {
                data.is_precise = this.is_precise;
            }
            if (this.refresh_interval != null) {
                data.refresh_interval = this.refresh_interval;
            }
            if (this.container_type != null) {
                data.container_type = this.container_type;
            }
            if (this.dimensions != null) {
                data.dimensions = this.dimensions;
            }
            if (this.metric_display_name != null) {
                data.metric_display_name = this.metric_display_name;
            }
            if (this.quota_display_name != null) {
                data.quota_display_name = this.quota_display_name;
            }
            if (this.metric_unit != null) {
                data.metric_unit = this.metric_unit;
            }
            if (this.quota_increase_eligibility != null) {
                data.quota_increase_eligibility = this.quota_increase_eligibility.toObject();
            }
            if (this.is_fixed != null) {
                data.is_fixed = this.is_fixed;
            }
            if (this.dimensions_infos != null) {
                data.dimensions_infos = this.dimensions_infos.map((item: DimensionsInfo) => item.toObject());
            }
            if (this.is_concurrent != null) {
                data.is_concurrent = this.is_concurrent;
            }
            if (this.service_request_quota_uri != null) {
                data.service_request_quota_uri = this.service_request_quota_uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.quota_id.length)
                writer.writeString(2, this.quota_id);
            if (this.metric.length)
                writer.writeString(3, this.metric);
            if (this.service.length)
                writer.writeString(4, this.service);
            if (this.is_precise != false)
                writer.writeBool(5, this.is_precise);
            if (this.refresh_interval.length)
                writer.writeString(6, this.refresh_interval);
            if (this.container_type != QuotaInfo.ContainerType.CONTAINER_TYPE_UNSPECIFIED)
                writer.writeEnum(7, this.container_type);
            if (this.dimensions.length)
                writer.writeRepeatedString(8, this.dimensions);
            if (this.metric_display_name.length)
                writer.writeString(9, this.metric_display_name);
            if (this.quota_display_name.length)
                writer.writeString(10, this.quota_display_name);
            if (this.metric_unit.length)
                writer.writeString(11, this.metric_unit);
            if (this.has_quota_increase_eligibility)
                writer.writeMessage(12, this.quota_increase_eligibility, () => this.quota_increase_eligibility.serialize(writer));
            if (this.is_fixed != false)
                writer.writeBool(13, this.is_fixed);
            if (this.dimensions_infos.length)
                writer.writeRepeatedMessage(14, this.dimensions_infos, (item: DimensionsInfo) => item.serialize(writer));
            if (this.is_concurrent != false)
                writer.writeBool(15, this.is_concurrent);
            if (this.service_request_quota_uri.length)
                writer.writeString(17, this.service_request_quota_uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.quota_id = reader.readString();
                        break;
                    case 3:
                        message.metric = reader.readString();
                        break;
                    case 4:
                        message.service = reader.readString();
                        break;
                    case 5:
                        message.is_precise = reader.readBool();
                        break;
                    case 6:
                        message.refresh_interval = reader.readString();
                        break;
                    case 7:
                        message.container_type = reader.readEnum();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.metric_display_name = reader.readString();
                        break;
                    case 10:
                        message.quota_display_name = reader.readString();
                        break;
                    case 11:
                        message.metric_unit = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.quota_increase_eligibility, () => message.quota_increase_eligibility = QuotaIncreaseEligibility.deserialize(reader));
                        break;
                    case 13:
                        message.is_fixed = reader.readBool();
                        break;
                    case 14:
                        reader.readMessage(message.dimensions_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 14, DimensionsInfo.deserialize(reader), DimensionsInfo));
                        break;
                    case 15:
                        message.is_concurrent = reader.readBool();
                        break;
                    case 17:
                        message.service_request_quota_uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaInfo {
            return QuotaInfo.deserialize(bytes);
        }
    }
    export namespace QuotaInfo {
        export enum ContainerType {
            CONTAINER_TYPE_UNSPECIFIED = 0,
            PROJECT = 1,
            FOLDER = 2,
            ORGANIZATION = 3
        }
    }
    export class QuotaIncreaseEligibility extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_eligible?: boolean;
            ineligibility_reason?: QuotaIncreaseEligibility.IneligibilityReason;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_eligible" in data && data.is_eligible != undefined) {
                    this.is_eligible = data.is_eligible;
                }
                if ("ineligibility_reason" in data && data.ineligibility_reason != undefined) {
                    this.ineligibility_reason = data.ineligibility_reason;
                }
            }
        }
        get is_eligible() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_eligible(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get ineligibility_reason() {
            return pb_1.Message.getFieldWithDefault(this, 2, QuotaIncreaseEligibility.IneligibilityReason.INELIGIBILITY_REASON_UNSPECIFIED) as QuotaIncreaseEligibility.IneligibilityReason;
        }
        set ineligibility_reason(value: QuotaIncreaseEligibility.IneligibilityReason) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            is_eligible?: boolean;
            ineligibility_reason?: QuotaIncreaseEligibility.IneligibilityReason;
        }): QuotaIncreaseEligibility {
            const message = new QuotaIncreaseEligibility({});
            if (data.is_eligible != null) {
                message.is_eligible = data.is_eligible;
            }
            if (data.ineligibility_reason != null) {
                message.ineligibility_reason = data.ineligibility_reason;
            }
            return message;
        }
        toObject() {
            const data: {
                is_eligible?: boolean;
                ineligibility_reason?: QuotaIncreaseEligibility.IneligibilityReason;
            } = {};
            if (this.is_eligible != null) {
                data.is_eligible = this.is_eligible;
            }
            if (this.ineligibility_reason != null) {
                data.ineligibility_reason = this.ineligibility_reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_eligible != false)
                writer.writeBool(1, this.is_eligible);
            if (this.ineligibility_reason != QuotaIncreaseEligibility.IneligibilityReason.INELIGIBILITY_REASON_UNSPECIFIED)
                writer.writeEnum(2, this.ineligibility_reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaIncreaseEligibility {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaIncreaseEligibility();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_eligible = reader.readBool();
                        break;
                    case 2:
                        message.ineligibility_reason = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaIncreaseEligibility {
            return QuotaIncreaseEligibility.deserialize(bytes);
        }
    }
    export namespace QuotaIncreaseEligibility {
        export enum IneligibilityReason {
            INELIGIBILITY_REASON_UNSPECIFIED = 0,
            NO_VALID_BILLING_ACCOUNT = 1,
            OTHER = 2
        }
    }
    export class QuotaPreference extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            dimensions?: Map<string, string>;
            quota_config?: QuotaConfig;
            etag?: string;
            create_time?: dependency_3.google.protobuf.Timestamp;
            update_time?: dependency_3.google.protobuf.Timestamp;
            service?: string;
            quota_id?: string;
            reconciling?: boolean;
            justification?: string;
            contact_email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("dimensions" in data && data.dimensions != undefined) {
                    this.dimensions = data.dimensions;
                }
                if ("quota_config" in data && data.quota_config != undefined) {
                    this.quota_config = data.quota_config;
                }
                if ("etag" in data && data.etag != undefined) {
                    this.etag = data.etag;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("update_time" in data && data.update_time != undefined) {
                    this.update_time = data.update_time;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
                if ("quota_id" in data && data.quota_id != undefined) {
                    this.quota_id = data.quota_id;
                }
                if ("reconciling" in data && data.reconciling != undefined) {
                    this.reconciling = data.reconciling;
                }
                if ("justification" in data && data.justification != undefined) {
                    this.justification = data.justification;
                }
                if ("contact_email" in data && data.contact_email != undefined) {
                    this.contact_email = data.contact_email;
                }
            }
            if (!this.dimensions)
                this.dimensions = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get dimensions() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set dimensions(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get quota_config() {
            return pb_1.Message.getWrapperField(this, QuotaConfig, 3) as QuotaConfig;
        }
        set quota_config(value: QuotaConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_quota_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get etag() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set etag(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 5) as dependency_3.google.protobuf.Timestamp;
        }
        set create_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_create_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get update_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 6) as dependency_3.google.protobuf.Timestamp;
        }
        set update_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_update_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get service() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set service(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get quota_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set quota_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get reconciling() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set reconciling(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get justification() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set justification(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get contact_email() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set contact_email(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            name?: string;
            dimensions?: {
                [key: string]: string;
            };
            quota_config?: ReturnType<typeof QuotaConfig.prototype.toObject>;
            etag?: string;
            create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            update_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            service?: string;
            quota_id?: string;
            reconciling?: boolean;
            justification?: string;
            contact_email?: string;
        }): QuotaPreference {
            const message = new QuotaPreference({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.dimensions == "object") {
                message.dimensions = new Map(Object.entries(data.dimensions));
            }
            if (data.quota_config != null) {
                message.quota_config = QuotaConfig.fromObject(data.quota_config);
            }
            if (data.etag != null) {
                message.etag = data.etag;
            }
            if (data.create_time != null) {
                message.create_time = dependency_3.google.protobuf.Timestamp.fromObject(data.create_time);
            }
            if (data.update_time != null) {
                message.update_time = dependency_3.google.protobuf.Timestamp.fromObject(data.update_time);
            }
            if (data.service != null) {
                message.service = data.service;
            }
            if (data.quota_id != null) {
                message.quota_id = data.quota_id;
            }
            if (data.reconciling != null) {
                message.reconciling = data.reconciling;
            }
            if (data.justification != null) {
                message.justification = data.justification;
            }
            if (data.contact_email != null) {
                message.contact_email = data.contact_email;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                dimensions?: {
                    [key: string]: string;
                };
                quota_config?: ReturnType<typeof QuotaConfig.prototype.toObject>;
                etag?: string;
                create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                update_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                service?: string;
                quota_id?: string;
                reconciling?: boolean;
                justification?: string;
                contact_email?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.dimensions != null) {
                data.dimensions = (Object.fromEntries)(this.dimensions);
            }
            if (this.quota_config != null) {
                data.quota_config = this.quota_config.toObject();
            }
            if (this.etag != null) {
                data.etag = this.etag;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time.toObject();
            }
            if (this.update_time != null) {
                data.update_time = this.update_time.toObject();
            }
            if (this.service != null) {
                data.service = this.service;
            }
            if (this.quota_id != null) {
                data.quota_id = this.quota_id;
            }
            if (this.reconciling != null) {
                data.reconciling = this.reconciling;
            }
            if (this.justification != null) {
                data.justification = this.justification;
            }
            if (this.contact_email != null) {
                data.contact_email = this.contact_email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.dimensions) {
                writer.writeMessage(2, this.dimensions, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_quota_config)
                writer.writeMessage(3, this.quota_config, () => this.quota_config.serialize(writer));
            if (this.etag.length)
                writer.writeString(4, this.etag);
            if (this.has_create_time)
                writer.writeMessage(5, this.create_time, () => this.create_time.serialize(writer));
            if (this.has_update_time)
                writer.writeMessage(6, this.update_time, () => this.update_time.serialize(writer));
            if (this.service.length)
                writer.writeString(7, this.service);
            if (this.quota_id.length)
                writer.writeString(8, this.quota_id);
            if (this.reconciling != false)
                writer.writeBool(10, this.reconciling);
            if (this.justification.length)
                writer.writeString(11, this.justification);
            if (this.contact_email.length)
                writer.writeString(12, this.contact_email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaPreference {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaPreference();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.dimensions as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        reader.readMessage(message.quota_config, () => message.quota_config = QuotaConfig.deserialize(reader));
                        break;
                    case 4:
                        message.etag = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.create_time, () => message.create_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.update_time, () => message.update_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.service = reader.readString();
                        break;
                    case 8:
                        message.quota_id = reader.readString();
                        break;
                    case 10:
                        message.reconciling = reader.readBool();
                        break;
                    case 11:
                        message.justification = reader.readString();
                        break;
                    case 12:
                        message.contact_email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaPreference {
            return QuotaPreference.deserialize(bytes);
        }
    }
    export class QuotaConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preferred_value?: number;
            state_detail?: string;
            granted_value?: dependency_4.google.protobuf.Int64Value;
            trace_id?: string;
            annotations?: Map<string, string>;
            request_origin?: QuotaConfig.Origin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preferred_value" in data && data.preferred_value != undefined) {
                    this.preferred_value = data.preferred_value;
                }
                if ("state_detail" in data && data.state_detail != undefined) {
                    this.state_detail = data.state_detail;
                }
                if ("granted_value" in data && data.granted_value != undefined) {
                    this.granted_value = data.granted_value;
                }
                if ("trace_id" in data && data.trace_id != undefined) {
                    this.trace_id = data.trace_id;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
                if ("request_origin" in data && data.request_origin != undefined) {
                    this.request_origin = data.request_origin;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get preferred_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set preferred_value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_detail() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state_detail(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get granted_value() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Int64Value, 3) as dependency_4.google.protobuf.Int64Value;
        }
        set granted_value(value: dependency_4.google.protobuf.Int64Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_granted_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get trace_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set trace_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get request_origin() {
            return pb_1.Message.getFieldWithDefault(this, 6, QuotaConfig.Origin.ORIGIN_UNSPECIFIED) as QuotaConfig.Origin;
        }
        set request_origin(value: QuotaConfig.Origin) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            preferred_value?: number;
            state_detail?: string;
            granted_value?: ReturnType<typeof dependency_4.google.protobuf.Int64Value.prototype.toObject>;
            trace_id?: string;
            annotations?: {
                [key: string]: string;
            };
            request_origin?: QuotaConfig.Origin;
        }): QuotaConfig {
            const message = new QuotaConfig({});
            if (data.preferred_value != null) {
                message.preferred_value = data.preferred_value;
            }
            if (data.state_detail != null) {
                message.state_detail = data.state_detail;
            }
            if (data.granted_value != null) {
                message.granted_value = dependency_4.google.protobuf.Int64Value.fromObject(data.granted_value);
            }
            if (data.trace_id != null) {
                message.trace_id = data.trace_id;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            if (data.request_origin != null) {
                message.request_origin = data.request_origin;
            }
            return message;
        }
        toObject() {
            const data: {
                preferred_value?: number;
                state_detail?: string;
                granted_value?: ReturnType<typeof dependency_4.google.protobuf.Int64Value.prototype.toObject>;
                trace_id?: string;
                annotations?: {
                    [key: string]: string;
                };
                request_origin?: QuotaConfig.Origin;
            } = {};
            if (this.preferred_value != null) {
                data.preferred_value = this.preferred_value;
            }
            if (this.state_detail != null) {
                data.state_detail = this.state_detail;
            }
            if (this.granted_value != null) {
                data.granted_value = this.granted_value.toObject();
            }
            if (this.trace_id != null) {
                data.trace_id = this.trace_id;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            if (this.request_origin != null) {
                data.request_origin = this.request_origin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preferred_value != 0)
                writer.writeInt64(1, this.preferred_value);
            if (this.state_detail.length)
                writer.writeString(2, this.state_detail);
            if (this.has_granted_value)
                writer.writeMessage(3, this.granted_value, () => this.granted_value.serialize(writer));
            if (this.trace_id.length)
                writer.writeString(4, this.trace_id);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(5, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.request_origin != QuotaConfig.Origin.ORIGIN_UNSPECIFIED)
                writer.writeEnum(6, this.request_origin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preferred_value = reader.readInt64();
                        break;
                    case 2:
                        message.state_detail = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.granted_value, () => message.granted_value = dependency_4.google.protobuf.Int64Value.deserialize(reader));
                        break;
                    case 4:
                        message.trace_id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    case 6:
                        message.request_origin = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaConfig {
            return QuotaConfig.deserialize(bytes);
        }
    }
    export namespace QuotaConfig {
        export enum Origin {
            ORIGIN_UNSPECIFIED = 0,
            CLOUD_CONSOLE = 1,
            AUTO_ADJUSTER = 2
        }
    }
    export class DimensionsInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dimensions?: Map<string, string>;
            details?: QuotaDetails;
            applicable_locations?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dimensions" in data && data.dimensions != undefined) {
                    this.dimensions = data.dimensions;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
                if ("applicable_locations" in data && data.applicable_locations != undefined) {
                    this.applicable_locations = data.applicable_locations;
                }
            }
            if (!this.dimensions)
                this.dimensions = new Map();
        }
        get dimensions() {
            return pb_1.Message.getField(this, 1) as any as Map<string, string>;
        }
        set dimensions(value: Map<string, string>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get details() {
            return pb_1.Message.getWrapperField(this, QuotaDetails, 2) as QuotaDetails;
        }
        set details(value: QuotaDetails) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_details() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get applicable_locations() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set applicable_locations(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            dimensions?: {
                [key: string]: string;
            };
            details?: ReturnType<typeof QuotaDetails.prototype.toObject>;
            applicable_locations?: string[];
        }): DimensionsInfo {
            const message = new DimensionsInfo({});
            if (typeof data.dimensions == "object") {
                message.dimensions = new Map(Object.entries(data.dimensions));
            }
            if (data.details != null) {
                message.details = QuotaDetails.fromObject(data.details);
            }
            if (data.applicable_locations != null) {
                message.applicable_locations = data.applicable_locations;
            }
            return message;
        }
        toObject() {
            const data: {
                dimensions?: {
                    [key: string]: string;
                };
                details?: ReturnType<typeof QuotaDetails.prototype.toObject>;
                applicable_locations?: string[];
            } = {};
            if (this.dimensions != null) {
                data.dimensions = (Object.fromEntries)(this.dimensions);
            }
            if (this.details != null) {
                data.details = this.details.toObject();
            }
            if (this.applicable_locations != null) {
                data.applicable_locations = this.applicable_locations;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.dimensions) {
                writer.writeMessage(1, this.dimensions, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_details)
                writer.writeMessage(2, this.details, () => this.details.serialize(writer));
            if (this.applicable_locations.length)
                writer.writeRepeatedString(3, this.applicable_locations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DimensionsInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DimensionsInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.dimensions as any, reader, reader.readString, reader.readString));
                        break;
                    case 2:
                        reader.readMessage(message.details, () => message.details = QuotaDetails.deserialize(reader));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DimensionsInfo {
            return DimensionsInfo.deserialize(bytes);
        }
    }
    export class QuotaDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
            rollout_info?: RolloutInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("rollout_info" in data && data.rollout_info != undefined) {
                    this.rollout_info = data.rollout_info;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rollout_info() {
            return pb_1.Message.getWrapperField(this, RolloutInfo, 3) as RolloutInfo;
        }
        set rollout_info(value: RolloutInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_rollout_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            value?: number;
            rollout_info?: ReturnType<typeof RolloutInfo.prototype.toObject>;
        }): QuotaDetails {
            const message = new QuotaDetails({});
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.rollout_info != null) {
                message.rollout_info = RolloutInfo.fromObject(data.rollout_info);
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
                rollout_info?: ReturnType<typeof RolloutInfo.prototype.toObject>;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.rollout_info != null) {
                data.rollout_info = this.rollout_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeInt64(1, this.value);
            if (this.has_rollout_info)
                writer.writeMessage(3, this.rollout_info, () => this.rollout_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.rollout_info, () => message.rollout_info = RolloutInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaDetails {
            return QuotaDetails.deserialize(bytes);
        }
    }
    export class RolloutInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ongoing_rollout?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ongoing_rollout" in data && data.ongoing_rollout != undefined) {
                    this.ongoing_rollout = data.ongoing_rollout;
                }
            }
        }
        get ongoing_rollout() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ongoing_rollout(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ongoing_rollout?: boolean;
        }): RolloutInfo {
            const message = new RolloutInfo({});
            if (data.ongoing_rollout != null) {
                message.ongoing_rollout = data.ongoing_rollout;
            }
            return message;
        }
        toObject() {
            const data: {
                ongoing_rollout?: boolean;
            } = {};
            if (this.ongoing_rollout != null) {
                data.ongoing_rollout = this.ongoing_rollout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ongoing_rollout != false)
                writer.writeBool(1, this.ongoing_rollout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RolloutInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RolloutInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ongoing_rollout = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RolloutInfo {
            return RolloutInfo.deserialize(bytes);
        }
    }
}
