/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/monitored_resource.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./label";
import * as dependency_2 from "./launch_stage";
import * as dependency_3 from "./../protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class MonitoredResourceDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: string;
            display_name?: string;
            description?: string;
            labels?: dependency_1.google.api.LabelDescriptor[];
            launch_stage?: dependency_2.google.api.LaunchStage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("display_name" in data && data.display_name != undefined) {
                    this.display_name = data.display_name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("launch_stage" in data && data.launch_stage != undefined) {
                    this.launch_stage = data.launch_stage;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get display_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set display_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get labels() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.api.LabelDescriptor, 4) as dependency_1.google.api.LabelDescriptor[];
        }
        set labels(value: dependency_1.google.api.LabelDescriptor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get launch_stage() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_2.google.api.LaunchStage.LAUNCH_STAGE_UNSPECIFIED) as dependency_2.google.api.LaunchStage;
        }
        set launch_stage(value: dependency_2.google.api.LaunchStage) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            type?: string;
            display_name?: string;
            description?: string;
            labels?: ReturnType<typeof dependency_1.google.api.LabelDescriptor.prototype.toObject>[];
            launch_stage?: dependency_2.google.api.LaunchStage;
        }): MonitoredResourceDescriptor {
            const message = new MonitoredResourceDescriptor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.display_name != null) {
                message.display_name = data.display_name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.labels != null) {
                message.labels = data.labels.map(item => dependency_1.google.api.LabelDescriptor.fromObject(item));
            }
            if (data.launch_stage != null) {
                message.launch_stage = data.launch_stage;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: string;
                display_name?: string;
                description?: string;
                labels?: ReturnType<typeof dependency_1.google.api.LabelDescriptor.prototype.toObject>[];
                launch_stage?: dependency_2.google.api.LaunchStage;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.display_name != null) {
                data.display_name = this.display_name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.labels != null) {
                data.labels = this.labels.map((item: dependency_1.google.api.LabelDescriptor) => item.toObject());
            }
            if (this.launch_stage != null) {
                data.launch_stage = this.launch_stage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(5, this.name);
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.display_name.length)
                writer.writeString(2, this.display_name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.labels.length)
                writer.writeRepeatedMessage(4, this.labels, (item: dependency_1.google.api.LabelDescriptor) => item.serialize(writer));
            if (this.launch_stage != dependency_2.google.api.LaunchStage.LAUNCH_STAGE_UNSPECIFIED)
                writer.writeEnum(7, this.launch_stage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MonitoredResourceDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MonitoredResourceDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.name = reader.readString();
                        break;
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.display_name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.labels, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.google.api.LabelDescriptor.deserialize(reader), dependency_1.google.api.LabelDescriptor));
                        break;
                    case 7:
                        message.launch_stage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MonitoredResourceDescriptor {
            return MonitoredResourceDescriptor.deserialize(bytes);
        }
    }
    export class MonitoredResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            type?: string;
            labels?: {
                [key: string]: string;
            };
        }): MonitoredResource {
            const message = new MonitoredResource({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MonitoredResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MonitoredResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MonitoredResource {
            return MonitoredResource.deserialize(bytes);
        }
    }
    export class MonitoredResourceMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            system_labels?: dependency_3.google.protobuf.Struct;
            user_labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("system_labels" in data && data.system_labels != undefined) {
                    this.system_labels = data.system_labels;
                }
                if ("user_labels" in data && data.user_labels != undefined) {
                    this.user_labels = data.user_labels;
                }
            }
            if (!this.user_labels)
                this.user_labels = new Map();
        }
        get system_labels() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 1) as dependency_3.google.protobuf.Struct;
        }
        set system_labels(value: dependency_3.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_system_labels() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set user_labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            system_labels?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
            user_labels?: {
                [key: string]: string;
            };
        }): MonitoredResourceMetadata {
            const message = new MonitoredResourceMetadata({});
            if (data.system_labels != null) {
                message.system_labels = dependency_3.google.protobuf.Struct.fromObject(data.system_labels);
            }
            if (typeof data.user_labels == "object") {
                message.user_labels = new Map(Object.entries(data.user_labels));
            }
            return message;
        }
        toObject() {
            const data: {
                system_labels?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                user_labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.system_labels != null) {
                data.system_labels = this.system_labels.toObject();
            }
            if (this.user_labels != null) {
                data.user_labels = (Object.fromEntries)(this.user_labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_system_labels)
                writer.writeMessage(1, this.system_labels, () => this.system_labels.serialize(writer));
            for (const [key, value] of this.user_labels) {
                writer.writeMessage(2, this.user_labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MonitoredResourceMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MonitoredResourceMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.system_labels, () => message.system_labels = dependency_3.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.user_labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MonitoredResourceMetadata {
            return MonitoredResourceMetadata.deserialize(bytes);
        }
    }
}
