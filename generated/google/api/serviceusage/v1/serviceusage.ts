/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/serviceusage/v1/serviceusage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../annotations";
import * as dependency_2 from "./../../client";
import * as dependency_3 from "./resources";
import * as dependency_4 from "./../../../longrunning/operations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.serviceusage.v1 {
    export class EnableServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): EnableServiceRequest {
            const message = new EnableServiceRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableServiceRequest {
            return EnableServiceRequest.deserialize(bytes);
        }
    }
    export class EnableServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: dependency_3.google.api.serviceusage.v1.Service;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.api.serviceusage.v1.Service, 1) as dependency_3.google.api.serviceusage.v1.Service;
        }
        set service(value: dependency_3.google.api.serviceusage.v1.Service) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>;
        }): EnableServiceResponse {
            const message = new EnableServiceResponse({});
            if (data.service != null) {
                message.service = dependency_3.google.api.serviceusage.v1.Service.fromObject(data.service);
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>;
            } = {};
            if (this.service != null) {
                data.service = this.service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service)
                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => message.service = dependency_3.google.api.serviceusage.v1.Service.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableServiceResponse {
            return EnableServiceResponse.deserialize(bytes);
        }
    }
    export class DisableServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            disable_dependent_services?: boolean;
            check_if_service_has_usage?: DisableServiceRequest.CheckIfServiceHasUsage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("disable_dependent_services" in data && data.disable_dependent_services != undefined) {
                    this.disable_dependent_services = data.disable_dependent_services;
                }
                if ("check_if_service_has_usage" in data && data.check_if_service_has_usage != undefined) {
                    this.check_if_service_has_usage = data.check_if_service_has_usage;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_dependent_services() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set disable_dependent_services(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get check_if_service_has_usage() {
            return pb_1.Message.getFieldWithDefault(this, 3, DisableServiceRequest.CheckIfServiceHasUsage.CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED) as DisableServiceRequest.CheckIfServiceHasUsage;
        }
        set check_if_service_has_usage(value: DisableServiceRequest.CheckIfServiceHasUsage) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            disable_dependent_services?: boolean;
            check_if_service_has_usage?: DisableServiceRequest.CheckIfServiceHasUsage;
        }): DisableServiceRequest {
            const message = new DisableServiceRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.disable_dependent_services != null) {
                message.disable_dependent_services = data.disable_dependent_services;
            }
            if (data.check_if_service_has_usage != null) {
                message.check_if_service_has_usage = data.check_if_service_has_usage;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                disable_dependent_services?: boolean;
                check_if_service_has_usage?: DisableServiceRequest.CheckIfServiceHasUsage;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.disable_dependent_services != null) {
                data.disable_dependent_services = this.disable_dependent_services;
            }
            if (this.check_if_service_has_usage != null) {
                data.check_if_service_has_usage = this.check_if_service_has_usage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.disable_dependent_services != false)
                writer.writeBool(2, this.disable_dependent_services);
            if (this.check_if_service_has_usage != DisableServiceRequest.CheckIfServiceHasUsage.CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED)
                writer.writeEnum(3, this.check_if_service_has_usage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.disable_dependent_services = reader.readBool();
                        break;
                    case 3:
                        message.check_if_service_has_usage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableServiceRequest {
            return DisableServiceRequest.deserialize(bytes);
        }
    }
    export namespace DisableServiceRequest {
        export enum CheckIfServiceHasUsage {
            CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0,
            SKIP = 1,
            CHECK = 2
        }
    }
    export class DisableServiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service?: dependency_3.google.api.serviceusage.v1.Service;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get service() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.api.serviceusage.v1.Service, 1) as dependency_3.google.api.serviceusage.v1.Service;
        }
        set service(value: dependency_3.google.api.serviceusage.v1.Service) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>;
        }): DisableServiceResponse {
            const message = new DisableServiceResponse({});
            if (data.service != null) {
                message.service = dependency_3.google.api.serviceusage.v1.Service.fromObject(data.service);
            }
            return message;
        }
        toObject() {
            const data: {
                service?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>;
            } = {};
            if (this.service != null) {
                data.service = this.service.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service)
                writer.writeMessage(1, this.service, () => this.service.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableServiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableServiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service, () => message.service = dependency_3.google.api.serviceusage.v1.Service.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableServiceResponse {
            return DisableServiceResponse.deserialize(bytes);
        }
    }
    export class GetServiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetServiceRequest {
            const message = new GetServiceRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceRequest {
            return GetServiceRequest.deserialize(bytes);
        }
    }
    export class ListServicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            page_size?: number;
            page_token?: string;
            filter?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filter() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set filter(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            parent?: string;
            page_size?: number;
            page_token?: string;
            filter?: string;
        }): ListServicesRequest {
            const message = new ListServicesRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.filter != null) {
                message.filter = data.filter;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                page_size?: number;
                page_token?: string;
                filter?: string;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.filter != null) {
                data.filter = this.filter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.page_token.length)
                writer.writeString(3, this.page_token);
            if (this.filter.length)
                writer.writeString(4, this.filter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.page_token = reader.readString();
                        break;
                    case 4:
                        message.filter = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServicesRequest {
            return ListServicesRequest.deserialize(bytes);
        }
    }
    export class ListServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            services?: dependency_3.google.api.serviceusage.v1.Service[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("services" in data && data.services != undefined) {
                    this.services = data.services;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get services() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.api.serviceusage.v1.Service, 1) as dependency_3.google.api.serviceusage.v1.Service[];
        }
        set services(value: dependency_3.google.api.serviceusage.v1.Service[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
            next_page_token?: string;
        }): ListServicesResponse {
            const message = new ListServicesResponse({});
            if (data.services != null) {
                message.services = data.services.map(item => dependency_3.google.api.serviceusage.v1.Service.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.services != null) {
                data.services = this.services.map((item: dependency_3.google.api.serviceusage.v1.Service) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.services.length)
                writer.writeRepeatedMessage(1, this.services, (item: dependency_3.google.api.serviceusage.v1.Service) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.google.api.serviceusage.v1.Service.deserialize(reader), dependency_3.google.api.serviceusage.v1.Service));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListServicesResponse {
            return ListServicesResponse.deserialize(bytes);
        }
    }
    export class BatchEnableServicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            service_ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("service_ids" in data && data.service_ids != undefined) {
                    this.service_ids = data.service_ids;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set service_ids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            parent?: string;
            service_ids?: string[];
        }): BatchEnableServicesRequest {
            const message = new BatchEnableServicesRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.service_ids != null) {
                message.service_ids = data.service_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                service_ids?: string[];
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.service_ids != null) {
                data.service_ids = this.service_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.service_ids.length)
                writer.writeRepeatedString(2, this.service_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchEnableServicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchEnableServicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchEnableServicesRequest {
            return BatchEnableServicesRequest.deserialize(bytes);
        }
    }
    export class BatchEnableServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            services?: dependency_3.google.api.serviceusage.v1.Service[];
            failures?: BatchEnableServicesResponse.EnableFailure[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("services" in data && data.services != undefined) {
                    this.services = data.services;
                }
                if ("failures" in data && data.failures != undefined) {
                    this.failures = data.failures;
                }
            }
        }
        get services() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.api.serviceusage.v1.Service, 1) as dependency_3.google.api.serviceusage.v1.Service[];
        }
        set services(value: dependency_3.google.api.serviceusage.v1.Service[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get failures() {
            return pb_1.Message.getRepeatedWrapperField(this, BatchEnableServicesResponse.EnableFailure, 2) as BatchEnableServicesResponse.EnableFailure[];
        }
        set failures(value: BatchEnableServicesResponse.EnableFailure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
            failures?: ReturnType<typeof BatchEnableServicesResponse.EnableFailure.prototype.toObject>[];
        }): BatchEnableServicesResponse {
            const message = new BatchEnableServicesResponse({});
            if (data.services != null) {
                message.services = data.services.map(item => dependency_3.google.api.serviceusage.v1.Service.fromObject(item));
            }
            if (data.failures != null) {
                message.failures = data.failures.map(item => BatchEnableServicesResponse.EnableFailure.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
                failures?: ReturnType<typeof BatchEnableServicesResponse.EnableFailure.prototype.toObject>[];
            } = {};
            if (this.services != null) {
                data.services = this.services.map((item: dependency_3.google.api.serviceusage.v1.Service) => item.toObject());
            }
            if (this.failures != null) {
                data.failures = this.failures.map((item: BatchEnableServicesResponse.EnableFailure) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.services.length)
                writer.writeRepeatedMessage(1, this.services, (item: dependency_3.google.api.serviceusage.v1.Service) => item.serialize(writer));
            if (this.failures.length)
                writer.writeRepeatedMessage(2, this.failures, (item: BatchEnableServicesResponse.EnableFailure) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchEnableServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchEnableServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.google.api.serviceusage.v1.Service.deserialize(reader), dependency_3.google.api.serviceusage.v1.Service));
                        break;
                    case 2:
                        reader.readMessage(message.failures, () => pb_1.Message.addToRepeatedWrapperField(message, 2, BatchEnableServicesResponse.EnableFailure.deserialize(reader), BatchEnableServicesResponse.EnableFailure));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchEnableServicesResponse {
            return BatchEnableServicesResponse.deserialize(bytes);
        }
    }
    export namespace BatchEnableServicesResponse {
        export class EnableFailure extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                service_id?: string;
                error_message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("service_id" in data && data.service_id != undefined) {
                        this.service_id = data.service_id;
                    }
                    if ("error_message" in data && data.error_message != undefined) {
                        this.error_message = data.error_message;
                    }
                }
            }
            get service_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set service_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get error_message() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set error_message(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                service_id?: string;
                error_message?: string;
            }): EnableFailure {
                const message = new EnableFailure({});
                if (data.service_id != null) {
                    message.service_id = data.service_id;
                }
                if (data.error_message != null) {
                    message.error_message = data.error_message;
                }
                return message;
            }
            toObject() {
                const data: {
                    service_id?: string;
                    error_message?: string;
                } = {};
                if (this.service_id != null) {
                    data.service_id = this.service_id;
                }
                if (this.error_message != null) {
                    data.error_message = this.error_message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.service_id.length)
                    writer.writeString(1, this.service_id);
                if (this.error_message.length)
                    writer.writeString(2, this.error_message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableFailure {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableFailure();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.service_id = reader.readString();
                            break;
                        case 2:
                            message.error_message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): EnableFailure {
                return EnableFailure.deserialize(bytes);
            }
        }
    }
    export class BatchGetServicesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            parent?: string;
            names?: string[];
        }): BatchGetServicesRequest {
            const message = new BatchGetServicesRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                names?: string[];
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchGetServicesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchGetServicesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchGetServicesRequest {
            return BatchGetServicesRequest.deserialize(bytes);
        }
    }
    export class BatchGetServicesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            services?: dependency_3.google.api.serviceusage.v1.Service[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("services" in data && data.services != undefined) {
                    this.services = data.services;
                }
            }
        }
        get services() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.api.serviceusage.v1.Service, 1) as dependency_3.google.api.serviceusage.v1.Service[];
        }
        set services(value: dependency_3.google.api.serviceusage.v1.Service[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
        }): BatchGetServicesResponse {
            const message = new BatchGetServicesResponse({});
            if (data.services != null) {
                message.services = data.services.map(item => dependency_3.google.api.serviceusage.v1.Service.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                services?: ReturnType<typeof dependency_3.google.api.serviceusage.v1.Service.prototype.toObject>[];
            } = {};
            if (this.services != null) {
                data.services = this.services.map((item: dependency_3.google.api.serviceusage.v1.Service) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.services.length)
                writer.writeRepeatedMessage(1, this.services, (item: dependency_3.google.api.serviceusage.v1.Service) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchGetServicesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchGetServicesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.services, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.google.api.serviceusage.v1.Service.deserialize(reader), dependency_3.google.api.serviceusage.v1.Service));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchGetServicesResponse {
            return BatchGetServicesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceUsageService {
        static definition = {
            EnableService: {
                path: "/google.api.serviceusage.v1.ServiceUsage/EnableService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EnableServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EnableServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            DisableService: {
                path: "/google.api.serviceusage.v1.ServiceUsage/DisableService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisableServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisableServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            GetService: {
                path: "/google.api.serviceusage.v1.ServiceUsage/GetService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetServiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetServiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.google.api.serviceusage.v1.Service) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.google.api.serviceusage.v1.Service.deserialize(new Uint8Array(bytes))
            },
            ListServices: {
                path: "/google.api.serviceusage.v1.ServiceUsage/ListServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListServicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListServicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListServicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListServicesResponse.deserialize(new Uint8Array(bytes))
            },
            BatchEnableServices: {
                path: "/google.api.serviceusage.v1.ServiceUsage/BatchEnableServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchEnableServicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchEnableServicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            BatchGetServices: {
                path: "/google.api.serviceusage.v1.ServiceUsage/BatchGetServices",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchGetServicesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchGetServicesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchGetServicesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchGetServicesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract EnableService(call: grpc_1.ServerUnaryCall<EnableServiceRequest, dependency_4.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_4.google.longrunning.Operation>): void;
        abstract DisableService(call: grpc_1.ServerUnaryCall<DisableServiceRequest, dependency_4.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_4.google.longrunning.Operation>): void;
        abstract GetService(call: grpc_1.ServerUnaryCall<GetServiceRequest, dependency_3.google.api.serviceusage.v1.Service>, callback: grpc_1.sendUnaryData<dependency_3.google.api.serviceusage.v1.Service>): void;
        abstract ListServices(call: grpc_1.ServerUnaryCall<ListServicesRequest, ListServicesResponse>, callback: grpc_1.sendUnaryData<ListServicesResponse>): void;
        abstract BatchEnableServices(call: grpc_1.ServerUnaryCall<BatchEnableServicesRequest, dependency_4.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_4.google.longrunning.Operation>): void;
        abstract BatchGetServices(call: grpc_1.ServerUnaryCall<BatchGetServicesRequest, BatchGetServicesResponse>, callback: grpc_1.sendUnaryData<BatchGetServicesResponse>): void;
    }
    export class ServiceUsageClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceUsageService.definition, "ServiceUsage", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        EnableService: GrpcUnaryServiceInterface<EnableServiceRequest, dependency_4.google.longrunning.Operation> = (message: EnableServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_4.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.EnableService(message, metadata, options, callback);
        };
        DisableService: GrpcUnaryServiceInterface<DisableServiceRequest, dependency_4.google.longrunning.Operation> = (message: DisableServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_4.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.DisableService(message, metadata, options, callback);
        };
        GetService: GrpcUnaryServiceInterface<GetServiceRequest, dependency_3.google.api.serviceusage.v1.Service> = (message: GetServiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.google.api.serviceusage.v1.Service>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.google.api.serviceusage.v1.Service>, callback?: grpc_1.requestCallback<dependency_3.google.api.serviceusage.v1.Service>): grpc_1.ClientUnaryCall => {
            return super.GetService(message, metadata, options, callback);
        };
        ListServices: GrpcUnaryServiceInterface<ListServicesRequest, ListServicesResponse> = (message: ListServicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListServicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListServicesResponse>, callback?: grpc_1.requestCallback<ListServicesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListServices(message, metadata, options, callback);
        };
        BatchEnableServices: GrpcUnaryServiceInterface<BatchEnableServicesRequest, dependency_4.google.longrunning.Operation> = (message: BatchEnableServicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_4.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.BatchEnableServices(message, metadata, options, callback);
        };
        BatchGetServices: GrpcUnaryServiceInterface<BatchGetServicesRequest, BatchGetServicesResponse> = (message: BatchGetServicesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BatchGetServicesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BatchGetServicesResponse>, callback?: grpc_1.requestCallback<BatchGetServicesResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchGetServices(message, metadata, options, callback);
        };
    }
}
