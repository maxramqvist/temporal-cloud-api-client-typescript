/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/policy.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class FieldPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            selector?: string;
            resource_permission?: string;
            resource_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("selector" in data && data.selector != undefined) {
                    this.selector = data.selector;
                }
                if ("resource_permission" in data && data.resource_permission != undefined) {
                    this.resource_permission = data.resource_permission;
                }
                if ("resource_type" in data && data.resource_type != undefined) {
                    this.resource_type = data.resource_type;
                }
            }
        }
        get selector() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set selector(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_permission() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_permission(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            selector?: string;
            resource_permission?: string;
            resource_type?: string;
        }): FieldPolicy {
            const message = new FieldPolicy({});
            if (data.selector != null) {
                message.selector = data.selector;
            }
            if (data.resource_permission != null) {
                message.resource_permission = data.resource_permission;
            }
            if (data.resource_type != null) {
                message.resource_type = data.resource_type;
            }
            return message;
        }
        toObject() {
            const data: {
                selector?: string;
                resource_permission?: string;
                resource_type?: string;
            } = {};
            if (this.selector != null) {
                data.selector = this.selector;
            }
            if (this.resource_permission != null) {
                data.resource_permission = this.resource_permission;
            }
            if (this.resource_type != null) {
                data.resource_type = this.resource_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.selector.length)
                writer.writeString(1, this.selector);
            if (this.resource_permission.length)
                writer.writeString(2, this.resource_permission);
            if (this.resource_type.length)
                writer.writeString(3, this.resource_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.selector = reader.readString();
                        break;
                    case 2:
                        message.resource_permission = reader.readString();
                        break;
                    case 3:
                        message.resource_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldPolicy {
            return FieldPolicy.deserialize(bytes);
        }
    }
    export class MethodPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            selector?: string;
            request_policies?: FieldPolicy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("selector" in data && data.selector != undefined) {
                    this.selector = data.selector;
                }
                if ("request_policies" in data && data.request_policies != undefined) {
                    this.request_policies = data.request_policies;
                }
            }
        }
        get selector() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set selector(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get request_policies() {
            return pb_1.Message.getRepeatedWrapperField(this, FieldPolicy, 2) as FieldPolicy[];
        }
        set request_policies(value: FieldPolicy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            selector?: string;
            request_policies?: ReturnType<typeof FieldPolicy.prototype.toObject>[];
        }): MethodPolicy {
            const message = new MethodPolicy({});
            if (data.selector != null) {
                message.selector = data.selector;
            }
            if (data.request_policies != null) {
                message.request_policies = data.request_policies.map(item => FieldPolicy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                selector?: string;
                request_policies?: ReturnType<typeof FieldPolicy.prototype.toObject>[];
            } = {};
            if (this.selector != null) {
                data.selector = this.selector;
            }
            if (this.request_policies != null) {
                data.request_policies = this.request_policies.map((item: FieldPolicy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.selector.length)
                writer.writeString(9, this.selector);
            if (this.request_policies.length)
                writer.writeRepeatedMessage(2, this.request_policies, (item: FieldPolicy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MethodPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MethodPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        message.selector = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.request_policies, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FieldPolicy.deserialize(reader), FieldPolicy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MethodPolicy {
            return MethodPolicy.deserialize(bytes);
        }
    }
}
