/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/distribution.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../protobuf/any";
import * as dependency_2 from "./../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class Distribution extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
            mean?: number;
            sum_of_squared_deviation?: number;
            range?: Distribution.Range;
            bucket_options?: Distribution.BucketOptions;
            bucket_counts?: number[];
            exemplars?: Distribution.Exemplar[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("mean" in data && data.mean != undefined) {
                    this.mean = data.mean;
                }
                if ("sum_of_squared_deviation" in data && data.sum_of_squared_deviation != undefined) {
                    this.sum_of_squared_deviation = data.sum_of_squared_deviation;
                }
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
                if ("bucket_options" in data && data.bucket_options != undefined) {
                    this.bucket_options = data.bucket_options;
                }
                if ("bucket_counts" in data && data.bucket_counts != undefined) {
                    this.bucket_counts = data.bucket_counts;
                }
                if ("exemplars" in data && data.exemplars != undefined) {
                    this.exemplars = data.exemplars;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get mean() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set mean(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sum_of_squared_deviation() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set sum_of_squared_deviation(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get range() {
            return pb_1.Message.getWrapperField(this, Distribution.Range, 4) as Distribution.Range;
        }
        set range(value: Distribution.Range) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_range() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bucket_options() {
            return pb_1.Message.getWrapperField(this, Distribution.BucketOptions, 6) as Distribution.BucketOptions;
        }
        set bucket_options(value: Distribution.BucketOptions) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_bucket_options() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get bucket_counts() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set bucket_counts(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get exemplars() {
            return pb_1.Message.getRepeatedWrapperField(this, Distribution.Exemplar, 10) as Distribution.Exemplar[];
        }
        set exemplars(value: Distribution.Exemplar[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            count?: number;
            mean?: number;
            sum_of_squared_deviation?: number;
            range?: ReturnType<typeof Distribution.Range.prototype.toObject>;
            bucket_options?: ReturnType<typeof Distribution.BucketOptions.prototype.toObject>;
            bucket_counts?: number[];
            exemplars?: ReturnType<typeof Distribution.Exemplar.prototype.toObject>[];
        }): Distribution {
            const message = new Distribution({});
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.mean != null) {
                message.mean = data.mean;
            }
            if (data.sum_of_squared_deviation != null) {
                message.sum_of_squared_deviation = data.sum_of_squared_deviation;
            }
            if (data.range != null) {
                message.range = Distribution.Range.fromObject(data.range);
            }
            if (data.bucket_options != null) {
                message.bucket_options = Distribution.BucketOptions.fromObject(data.bucket_options);
            }
            if (data.bucket_counts != null) {
                message.bucket_counts = data.bucket_counts;
            }
            if (data.exemplars != null) {
                message.exemplars = data.exemplars.map(item => Distribution.Exemplar.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
                mean?: number;
                sum_of_squared_deviation?: number;
                range?: ReturnType<typeof Distribution.Range.prototype.toObject>;
                bucket_options?: ReturnType<typeof Distribution.BucketOptions.prototype.toObject>;
                bucket_counts?: number[];
                exemplars?: ReturnType<typeof Distribution.Exemplar.prototype.toObject>[];
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.mean != null) {
                data.mean = this.mean;
            }
            if (this.sum_of_squared_deviation != null) {
                data.sum_of_squared_deviation = this.sum_of_squared_deviation;
            }
            if (this.range != null) {
                data.range = this.range.toObject();
            }
            if (this.bucket_options != null) {
                data.bucket_options = this.bucket_options.toObject();
            }
            if (this.bucket_counts != null) {
                data.bucket_counts = this.bucket_counts;
            }
            if (this.exemplars != null) {
                data.exemplars = this.exemplars.map((item: Distribution.Exemplar) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeInt64(1, this.count);
            if (this.mean != 0)
                writer.writeDouble(2, this.mean);
            if (this.sum_of_squared_deviation != 0)
                writer.writeDouble(3, this.sum_of_squared_deviation);
            if (this.has_range)
                writer.writeMessage(4, this.range, () => this.range.serialize(writer));
            if (this.has_bucket_options)
                writer.writeMessage(6, this.bucket_options, () => this.bucket_options.serialize(writer));
            if (this.bucket_counts.length)
                writer.writePackedInt64(7, this.bucket_counts);
            if (this.exemplars.length)
                writer.writeRepeatedMessage(10, this.exemplars, (item: Distribution.Exemplar) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Distribution {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Distribution();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readInt64();
                        break;
                    case 2:
                        message.mean = reader.readDouble();
                        break;
                    case 3:
                        message.sum_of_squared_deviation = reader.readDouble();
                        break;
                    case 4:
                        reader.readMessage(message.range, () => message.range = Distribution.Range.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.bucket_options, () => message.bucket_options = Distribution.BucketOptions.deserialize(reader));
                        break;
                    case 7:
                        message.bucket_counts = reader.readPackedInt64();
                        break;
                    case 10:
                        reader.readMessage(message.exemplars, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Distribution.Exemplar.deserialize(reader), Distribution.Exemplar));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Distribution {
            return Distribution.deserialize(bytes);
        }
    }
    export namespace Distribution {
        export class Range extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                min?: number;
                max?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min" in data && data.min != undefined) {
                        this.min = data.min;
                    }
                    if ("max" in data && data.max != undefined) {
                        this.max = data.max;
                    }
                }
            }
            get min() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set min(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get max() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set max(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                min?: number;
                max?: number;
            }): Range {
                const message = new Range({});
                if (data.min != null) {
                    message.min = data.min;
                }
                if (data.max != null) {
                    message.max = data.max;
                }
                return message;
            }
            toObject() {
                const data: {
                    min?: number;
                    max?: number;
                } = {};
                if (this.min != null) {
                    data.min = this.min;
                }
                if (this.max != null) {
                    data.max = this.max;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.min != 0)
                    writer.writeDouble(1, this.min);
                if (this.max != 0)
                    writer.writeDouble(2, this.max);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Range {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Range();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.min = reader.readDouble();
                            break;
                        case 2:
                            message.max = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Range {
                return Range.deserialize(bytes);
            }
        }
        export class BucketOptions extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3]];
            constructor(data?: any[] | ({} & (({
                linear_buckets?: Distribution.BucketOptions.Linear;
                exponential_buckets?: never;
                explicit_buckets?: never;
            } | {
                linear_buckets?: never;
                exponential_buckets?: Distribution.BucketOptions.Exponential;
                explicit_buckets?: never;
            } | {
                linear_buckets?: never;
                exponential_buckets?: never;
                explicit_buckets?: Distribution.BucketOptions.Explicit;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("linear_buckets" in data && data.linear_buckets != undefined) {
                        this.linear_buckets = data.linear_buckets;
                    }
                    if ("exponential_buckets" in data && data.exponential_buckets != undefined) {
                        this.exponential_buckets = data.exponential_buckets;
                    }
                    if ("explicit_buckets" in data && data.explicit_buckets != undefined) {
                        this.explicit_buckets = data.explicit_buckets;
                    }
                }
            }
            get linear_buckets() {
                return pb_1.Message.getWrapperField(this, Distribution.BucketOptions.Linear, 1) as Distribution.BucketOptions.Linear;
            }
            set linear_buckets(value: Distribution.BucketOptions.Linear) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_linear_buckets() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get exponential_buckets() {
                return pb_1.Message.getWrapperField(this, Distribution.BucketOptions.Exponential, 2) as Distribution.BucketOptions.Exponential;
            }
            set exponential_buckets(value: Distribution.BucketOptions.Exponential) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_exponential_buckets() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get explicit_buckets() {
                return pb_1.Message.getWrapperField(this, Distribution.BucketOptions.Explicit, 3) as Distribution.BucketOptions.Explicit;
            }
            set explicit_buckets(value: Distribution.BucketOptions.Explicit) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_explicit_buckets() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get options() {
                const cases: {
                    [index: number]: "none" | "linear_buckets" | "exponential_buckets" | "explicit_buckets";
                } = {
                    0: "none",
                    1: "linear_buckets",
                    2: "exponential_buckets",
                    3: "explicit_buckets"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
            }
            static fromObject(data: {
                linear_buckets?: ReturnType<typeof Distribution.BucketOptions.Linear.prototype.toObject>;
                exponential_buckets?: ReturnType<typeof Distribution.BucketOptions.Exponential.prototype.toObject>;
                explicit_buckets?: ReturnType<typeof Distribution.BucketOptions.Explicit.prototype.toObject>;
            }): BucketOptions {
                const message = new BucketOptions({});
                if (data.linear_buckets != null) {
                    message.linear_buckets = Distribution.BucketOptions.Linear.fromObject(data.linear_buckets);
                }
                if (data.exponential_buckets != null) {
                    message.exponential_buckets = Distribution.BucketOptions.Exponential.fromObject(data.exponential_buckets);
                }
                if (data.explicit_buckets != null) {
                    message.explicit_buckets = Distribution.BucketOptions.Explicit.fromObject(data.explicit_buckets);
                }
                return message;
            }
            toObject() {
                const data: {
                    linear_buckets?: ReturnType<typeof Distribution.BucketOptions.Linear.prototype.toObject>;
                    exponential_buckets?: ReturnType<typeof Distribution.BucketOptions.Exponential.prototype.toObject>;
                    explicit_buckets?: ReturnType<typeof Distribution.BucketOptions.Explicit.prototype.toObject>;
                } = {};
                if (this.linear_buckets != null) {
                    data.linear_buckets = this.linear_buckets.toObject();
                }
                if (this.exponential_buckets != null) {
                    data.exponential_buckets = this.exponential_buckets.toObject();
                }
                if (this.explicit_buckets != null) {
                    data.explicit_buckets = this.explicit_buckets.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_linear_buckets)
                    writer.writeMessage(1, this.linear_buckets, () => this.linear_buckets.serialize(writer));
                if (this.has_exponential_buckets)
                    writer.writeMessage(2, this.exponential_buckets, () => this.exponential_buckets.serialize(writer));
                if (this.has_explicit_buckets)
                    writer.writeMessage(3, this.explicit_buckets, () => this.explicit_buckets.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BucketOptions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BucketOptions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.linear_buckets, () => message.linear_buckets = Distribution.BucketOptions.Linear.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.exponential_buckets, () => message.exponential_buckets = Distribution.BucketOptions.Exponential.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.explicit_buckets, () => message.explicit_buckets = Distribution.BucketOptions.Explicit.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BucketOptions {
                return BucketOptions.deserialize(bytes);
            }
        }
        export namespace BucketOptions {
            export class Linear extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    num_finite_buckets?: number;
                    width?: number;
                    offset?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("num_finite_buckets" in data && data.num_finite_buckets != undefined) {
                            this.num_finite_buckets = data.num_finite_buckets;
                        }
                        if ("width" in data && data.width != undefined) {
                            this.width = data.width;
                        }
                        if ("offset" in data && data.offset != undefined) {
                            this.offset = data.offset;
                        }
                    }
                }
                get num_finite_buckets() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set num_finite_buckets(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get width() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set width(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get offset() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set offset(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                static fromObject(data: {
                    num_finite_buckets?: number;
                    width?: number;
                    offset?: number;
                }): Linear {
                    const message = new Linear({});
                    if (data.num_finite_buckets != null) {
                        message.num_finite_buckets = data.num_finite_buckets;
                    }
                    if (data.width != null) {
                        message.width = data.width;
                    }
                    if (data.offset != null) {
                        message.offset = data.offset;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        num_finite_buckets?: number;
                        width?: number;
                        offset?: number;
                    } = {};
                    if (this.num_finite_buckets != null) {
                        data.num_finite_buckets = this.num_finite_buckets;
                    }
                    if (this.width != null) {
                        data.width = this.width;
                    }
                    if (this.offset != null) {
                        data.offset = this.offset;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.num_finite_buckets != 0)
                        writer.writeInt32(1, this.num_finite_buckets);
                    if (this.width != 0)
                        writer.writeDouble(2, this.width);
                    if (this.offset != 0)
                        writer.writeDouble(3, this.offset);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Linear {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Linear();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.num_finite_buckets = reader.readInt32();
                                break;
                            case 2:
                                message.width = reader.readDouble();
                                break;
                            case 3:
                                message.offset = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Linear {
                    return Linear.deserialize(bytes);
                }
            }
            export class Exponential extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    num_finite_buckets?: number;
                    growth_factor?: number;
                    scale?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("num_finite_buckets" in data && data.num_finite_buckets != undefined) {
                            this.num_finite_buckets = data.num_finite_buckets;
                        }
                        if ("growth_factor" in data && data.growth_factor != undefined) {
                            this.growth_factor = data.growth_factor;
                        }
                        if ("scale" in data && data.scale != undefined) {
                            this.scale = data.scale;
                        }
                    }
                }
                get num_finite_buckets() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set num_finite_buckets(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get growth_factor() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set growth_factor(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get scale() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set scale(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                static fromObject(data: {
                    num_finite_buckets?: number;
                    growth_factor?: number;
                    scale?: number;
                }): Exponential {
                    const message = new Exponential({});
                    if (data.num_finite_buckets != null) {
                        message.num_finite_buckets = data.num_finite_buckets;
                    }
                    if (data.growth_factor != null) {
                        message.growth_factor = data.growth_factor;
                    }
                    if (data.scale != null) {
                        message.scale = data.scale;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        num_finite_buckets?: number;
                        growth_factor?: number;
                        scale?: number;
                    } = {};
                    if (this.num_finite_buckets != null) {
                        data.num_finite_buckets = this.num_finite_buckets;
                    }
                    if (this.growth_factor != null) {
                        data.growth_factor = this.growth_factor;
                    }
                    if (this.scale != null) {
                        data.scale = this.scale;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.num_finite_buckets != 0)
                        writer.writeInt32(1, this.num_finite_buckets);
                    if (this.growth_factor != 0)
                        writer.writeDouble(2, this.growth_factor);
                    if (this.scale != 0)
                        writer.writeDouble(3, this.scale);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Exponential {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Exponential();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.num_finite_buckets = reader.readInt32();
                                break;
                            case 2:
                                message.growth_factor = reader.readDouble();
                                break;
                            case 3:
                                message.scale = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Exponential {
                    return Exponential.deserialize(bytes);
                }
            }
            export class Explicit extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    bounds?: number[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("bounds" in data && data.bounds != undefined) {
                            this.bounds = data.bounds;
                        }
                    }
                }
                get bounds() {
                    return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
                }
                set bounds(value: number[]) {
                    pb_1.Message.setField(this, 1, value);
                }
                static fromObject(data: {
                    bounds?: number[];
                }): Explicit {
                    const message = new Explicit({});
                    if (data.bounds != null) {
                        message.bounds = data.bounds;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        bounds?: number[];
                    } = {};
                    if (this.bounds != null) {
                        data.bounds = this.bounds;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.bounds.length)
                        writer.writePackedDouble(1, this.bounds);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Explicit {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Explicit();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.bounds = reader.readPackedDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Explicit {
                    return Explicit.deserialize(bytes);
                }
            }
        }
        export class Exemplar extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                value?: number;
                timestamp?: dependency_2.google.protobuf.Timestamp;
                attachments?: dependency_1.google.protobuf.Any[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("attachments" in data && data.attachments != undefined) {
                        this.attachments = data.attachments;
                    }
                }
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set value(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get timestamp() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
            }
            set timestamp(value: dependency_2.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_timestamp() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get attachments() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 3) as dependency_1.google.protobuf.Any[];
            }
            set attachments(value: dependency_1.google.protobuf.Any[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                value?: number;
                timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                attachments?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
            }): Exemplar {
                const message = new Exemplar({});
                if (data.value != null) {
                    message.value = data.value;
                }
                if (data.timestamp != null) {
                    message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
                }
                if (data.attachments != null) {
                    message.attachments = data.attachments.map(item => dependency_1.google.protobuf.Any.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    value?: number;
                    timestamp?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                    attachments?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
                } = {};
                if (this.value != null) {
                    data.value = this.value;
                }
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp.toObject();
                }
                if (this.attachments != null) {
                    data.attachments = this.attachments.map((item: dependency_1.google.protobuf.Any) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.value != 0)
                    writer.writeDouble(1, this.value);
                if (this.has_timestamp)
                    writer.writeMessage(2, this.timestamp, () => this.timestamp.serialize(writer));
                if (this.attachments.length)
                    writer.writeRepeatedMessage(3, this.attachments, (item: dependency_1.google.protobuf.Any) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Exemplar {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Exemplar();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.value = reader.readDouble();
                            break;
                        case 2:
                            reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.attachments, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Exemplar {
                return Exemplar.deserialize(bytes);
            }
        }
    }
}
