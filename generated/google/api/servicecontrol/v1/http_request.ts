/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicecontrol/v1/http_request.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../protobuf/duration";
import * as pb_1 from "google-protobuf";
export namespace google.api.servicecontrol.v1 {
    export class HttpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_method?: string;
            request_url?: string;
            request_size?: number;
            status?: number;
            response_size?: number;
            user_agent?: string;
            remote_ip?: string;
            server_ip?: string;
            referer?: string;
            latency?: dependency_1.google.protobuf.Duration;
            cache_lookup?: boolean;
            cache_hit?: boolean;
            cache_validated_with_origin_server?: boolean;
            cache_fill_bytes?: number;
            protocol?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_method" in data && data.request_method != undefined) {
                    this.request_method = data.request_method;
                }
                if ("request_url" in data && data.request_url != undefined) {
                    this.request_url = data.request_url;
                }
                if ("request_size" in data && data.request_size != undefined) {
                    this.request_size = data.request_size;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("response_size" in data && data.response_size != undefined) {
                    this.response_size = data.response_size;
                }
                if ("user_agent" in data && data.user_agent != undefined) {
                    this.user_agent = data.user_agent;
                }
                if ("remote_ip" in data && data.remote_ip != undefined) {
                    this.remote_ip = data.remote_ip;
                }
                if ("server_ip" in data && data.server_ip != undefined) {
                    this.server_ip = data.server_ip;
                }
                if ("referer" in data && data.referer != undefined) {
                    this.referer = data.referer;
                }
                if ("latency" in data && data.latency != undefined) {
                    this.latency = data.latency;
                }
                if ("cache_lookup" in data && data.cache_lookup != undefined) {
                    this.cache_lookup = data.cache_lookup;
                }
                if ("cache_hit" in data && data.cache_hit != undefined) {
                    this.cache_hit = data.cache_hit;
                }
                if ("cache_validated_with_origin_server" in data && data.cache_validated_with_origin_server != undefined) {
                    this.cache_validated_with_origin_server = data.cache_validated_with_origin_server;
                }
                if ("cache_fill_bytes" in data && data.cache_fill_bytes != undefined) {
                    this.cache_fill_bytes = data.cache_fill_bytes;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
            }
        }
        get request_method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set request_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set request_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get response_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set response_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_agent() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_agent(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get remote_ip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set remote_ip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get server_ip() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set server_ip(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get referer() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set referer(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get latency() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 14) as dependency_1.google.protobuf.Duration;
        }
        set latency(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_latency() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get cache_lookup() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set cache_lookup(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get cache_hit() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set cache_hit(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get cache_validated_with_origin_server() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set cache_validated_with_origin_server(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get cache_fill_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set cache_fill_bytes(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set protocol(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            request_method?: string;
            request_url?: string;
            request_size?: number;
            status?: number;
            response_size?: number;
            user_agent?: string;
            remote_ip?: string;
            server_ip?: string;
            referer?: string;
            latency?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            cache_lookup?: boolean;
            cache_hit?: boolean;
            cache_validated_with_origin_server?: boolean;
            cache_fill_bytes?: number;
            protocol?: string;
        }): HttpRequest {
            const message = new HttpRequest({});
            if (data.request_method != null) {
                message.request_method = data.request_method;
            }
            if (data.request_url != null) {
                message.request_url = data.request_url;
            }
            if (data.request_size != null) {
                message.request_size = data.request_size;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.response_size != null) {
                message.response_size = data.response_size;
            }
            if (data.user_agent != null) {
                message.user_agent = data.user_agent;
            }
            if (data.remote_ip != null) {
                message.remote_ip = data.remote_ip;
            }
            if (data.server_ip != null) {
                message.server_ip = data.server_ip;
            }
            if (data.referer != null) {
                message.referer = data.referer;
            }
            if (data.latency != null) {
                message.latency = dependency_1.google.protobuf.Duration.fromObject(data.latency);
            }
            if (data.cache_lookup != null) {
                message.cache_lookup = data.cache_lookup;
            }
            if (data.cache_hit != null) {
                message.cache_hit = data.cache_hit;
            }
            if (data.cache_validated_with_origin_server != null) {
                message.cache_validated_with_origin_server = data.cache_validated_with_origin_server;
            }
            if (data.cache_fill_bytes != null) {
                message.cache_fill_bytes = data.cache_fill_bytes;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            return message;
        }
        toObject() {
            const data: {
                request_method?: string;
                request_url?: string;
                request_size?: number;
                status?: number;
                response_size?: number;
                user_agent?: string;
                remote_ip?: string;
                server_ip?: string;
                referer?: string;
                latency?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
                cache_lookup?: boolean;
                cache_hit?: boolean;
                cache_validated_with_origin_server?: boolean;
                cache_fill_bytes?: number;
                protocol?: string;
            } = {};
            if (this.request_method != null) {
                data.request_method = this.request_method;
            }
            if (this.request_url != null) {
                data.request_url = this.request_url;
            }
            if (this.request_size != null) {
                data.request_size = this.request_size;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.response_size != null) {
                data.response_size = this.response_size;
            }
            if (this.user_agent != null) {
                data.user_agent = this.user_agent;
            }
            if (this.remote_ip != null) {
                data.remote_ip = this.remote_ip;
            }
            if (this.server_ip != null) {
                data.server_ip = this.server_ip;
            }
            if (this.referer != null) {
                data.referer = this.referer;
            }
            if (this.latency != null) {
                data.latency = this.latency.toObject();
            }
            if (this.cache_lookup != null) {
                data.cache_lookup = this.cache_lookup;
            }
            if (this.cache_hit != null) {
                data.cache_hit = this.cache_hit;
            }
            if (this.cache_validated_with_origin_server != null) {
                data.cache_validated_with_origin_server = this.cache_validated_with_origin_server;
            }
            if (this.cache_fill_bytes != null) {
                data.cache_fill_bytes = this.cache_fill_bytes;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_method.length)
                writer.writeString(1, this.request_method);
            if (this.request_url.length)
                writer.writeString(2, this.request_url);
            if (this.request_size != 0)
                writer.writeInt64(3, this.request_size);
            if (this.status != 0)
                writer.writeInt32(4, this.status);
            if (this.response_size != 0)
                writer.writeInt64(5, this.response_size);
            if (this.user_agent.length)
                writer.writeString(6, this.user_agent);
            if (this.remote_ip.length)
                writer.writeString(7, this.remote_ip);
            if (this.server_ip.length)
                writer.writeString(13, this.server_ip);
            if (this.referer.length)
                writer.writeString(8, this.referer);
            if (this.has_latency)
                writer.writeMessage(14, this.latency, () => this.latency.serialize(writer));
            if (this.cache_lookup != false)
                writer.writeBool(11, this.cache_lookup);
            if (this.cache_hit != false)
                writer.writeBool(9, this.cache_hit);
            if (this.cache_validated_with_origin_server != false)
                writer.writeBool(10, this.cache_validated_with_origin_server);
            if (this.cache_fill_bytes != 0)
                writer.writeInt64(12, this.cache_fill_bytes);
            if (this.protocol.length)
                writer.writeString(15, this.protocol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HttpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HttpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_method = reader.readString();
                        break;
                    case 2:
                        message.request_url = reader.readString();
                        break;
                    case 3:
                        message.request_size = reader.readInt64();
                        break;
                    case 4:
                        message.status = reader.readInt32();
                        break;
                    case 5:
                        message.response_size = reader.readInt64();
                        break;
                    case 6:
                        message.user_agent = reader.readString();
                        break;
                    case 7:
                        message.remote_ip = reader.readString();
                        break;
                    case 13:
                        message.server_ip = reader.readString();
                        break;
                    case 8:
                        message.referer = reader.readString();
                        break;
                    case 14:
                        reader.readMessage(message.latency, () => message.latency = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 11:
                        message.cache_lookup = reader.readBool();
                        break;
                    case 9:
                        message.cache_hit = reader.readBool();
                        break;
                    case 10:
                        message.cache_validated_with_origin_server = reader.readBool();
                        break;
                    case 12:
                        message.cache_fill_bytes = reader.readInt64();
                        break;
                    case 15:
                        message.protocol = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HttpRequest {
            return HttpRequest.deserialize(bytes);
        }
    }
}
