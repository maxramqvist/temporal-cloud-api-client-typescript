/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicecontrol/v1/service_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../annotations";
import * as dependency_2 from "./../../client";
import * as dependency_3 from "./check_error";
import * as dependency_4 from "./operation";
import * as dependency_5 from "./../../../rpc/status";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.servicecontrol.v1 {
    export class CheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            operation?: dependency_4.google.api.servicecontrol.v1.Operation;
            service_config_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.servicecontrol.v1.Operation, 2) as dependency_4.google.api.servicecontrol.v1.Operation;
        }
        set operation(value: dependency_4.google.api.servicecontrol.v1.Operation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            service_name?: string;
            operation?: ReturnType<typeof dependency_4.google.api.servicecontrol.v1.Operation.prototype.toObject>;
            service_config_id?: string;
        }): CheckRequest {
            const message = new CheckRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.operation != null) {
                message.operation = dependency_4.google.api.servicecontrol.v1.Operation.fromObject(data.operation);
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                operation?: ReturnType<typeof dependency_4.google.api.servicecontrol.v1.Operation.prototype.toObject>;
                service_config_id?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.has_operation)
                writer.writeMessage(2, this.operation, () => this.operation.serialize(writer));
            if (this.service_config_id.length)
                writer.writeString(4, this.service_config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.google.api.servicecontrol.v1.Operation.deserialize(reader));
                        break;
                    case 4:
                        message.service_config_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckRequest {
            return CheckRequest.deserialize(bytes);
        }
    }
    export class CheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_id?: string;
            check_errors?: dependency_3.google.api.servicecontrol.v1.CheckError[];
            service_config_id?: string;
            service_rollout_id?: string;
            check_info?: CheckResponse.CheckInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
                if ("check_errors" in data && data.check_errors != undefined) {
                    this.check_errors = data.check_errors;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
                if ("service_rollout_id" in data && data.service_rollout_id != undefined) {
                    this.service_rollout_id = data.service_rollout_id;
                }
                if ("check_info" in data && data.check_info != undefined) {
                    this.check_info = data.check_info;
                }
            }
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get check_errors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.api.servicecontrol.v1.CheckError, 2) as dependency_3.google.api.servicecontrol.v1.CheckError[];
        }
        set check_errors(value: dependency_3.google.api.servicecontrol.v1.CheckError[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get service_rollout_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set service_rollout_id(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get check_info() {
            return pb_1.Message.getWrapperField(this, CheckResponse.CheckInfo, 6) as CheckResponse.CheckInfo;
        }
        set check_info(value: CheckResponse.CheckInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_check_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            operation_id?: string;
            check_errors?: ReturnType<typeof dependency_3.google.api.servicecontrol.v1.CheckError.prototype.toObject>[];
            service_config_id?: string;
            service_rollout_id?: string;
            check_info?: ReturnType<typeof CheckResponse.CheckInfo.prototype.toObject>;
        }): CheckResponse {
            const message = new CheckResponse({});
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            if (data.check_errors != null) {
                message.check_errors = data.check_errors.map(item => dependency_3.google.api.servicecontrol.v1.CheckError.fromObject(item));
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            if (data.service_rollout_id != null) {
                message.service_rollout_id = data.service_rollout_id;
            }
            if (data.check_info != null) {
                message.check_info = CheckResponse.CheckInfo.fromObject(data.check_info);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_id?: string;
                check_errors?: ReturnType<typeof dependency_3.google.api.servicecontrol.v1.CheckError.prototype.toObject>[];
                service_config_id?: string;
                service_rollout_id?: string;
                check_info?: ReturnType<typeof CheckResponse.CheckInfo.prototype.toObject>;
            } = {};
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            if (this.check_errors != null) {
                data.check_errors = this.check_errors.map((item: dependency_3.google.api.servicecontrol.v1.CheckError) => item.toObject());
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            if (this.service_rollout_id != null) {
                data.service_rollout_id = this.service_rollout_id;
            }
            if (this.check_info != null) {
                data.check_info = this.check_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_id.length)
                writer.writeString(1, this.operation_id);
            if (this.check_errors.length)
                writer.writeRepeatedMessage(2, this.check_errors, (item: dependency_3.google.api.servicecontrol.v1.CheckError) => item.serialize(writer));
            if (this.service_config_id.length)
                writer.writeString(5, this.service_config_id);
            if (this.service_rollout_id.length)
                writer.writeString(11, this.service_rollout_id);
            if (this.has_check_info)
                writer.writeMessage(6, this.check_info, () => this.check_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.check_errors, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.google.api.servicecontrol.v1.CheckError.deserialize(reader), dependency_3.google.api.servicecontrol.v1.CheckError));
                        break;
                    case 5:
                        message.service_config_id = reader.readString();
                        break;
                    case 11:
                        message.service_rollout_id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.check_info, () => message.check_info = CheckResponse.CheckInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckResponse {
            return CheckResponse.deserialize(bytes);
        }
    }
    export namespace CheckResponse {
        export class CheckInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                unused_arguments?: string[];
                consumer_info?: CheckResponse.ConsumerInfo;
                api_key_uid?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("unused_arguments" in data && data.unused_arguments != undefined) {
                        this.unused_arguments = data.unused_arguments;
                    }
                    if ("consumer_info" in data && data.consumer_info != undefined) {
                        this.consumer_info = data.consumer_info;
                    }
                    if ("api_key_uid" in data && data.api_key_uid != undefined) {
                        this.api_key_uid = data.api_key_uid;
                    }
                }
            }
            get unused_arguments() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set unused_arguments(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            get consumer_info() {
                return pb_1.Message.getWrapperField(this, CheckResponse.ConsumerInfo, 2) as CheckResponse.ConsumerInfo;
            }
            set consumer_info(value: CheckResponse.ConsumerInfo) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_consumer_info() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get api_key_uid() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set api_key_uid(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                unused_arguments?: string[];
                consumer_info?: ReturnType<typeof CheckResponse.ConsumerInfo.prototype.toObject>;
                api_key_uid?: string;
            }): CheckInfo {
                const message = new CheckInfo({});
                if (data.unused_arguments != null) {
                    message.unused_arguments = data.unused_arguments;
                }
                if (data.consumer_info != null) {
                    message.consumer_info = CheckResponse.ConsumerInfo.fromObject(data.consumer_info);
                }
                if (data.api_key_uid != null) {
                    message.api_key_uid = data.api_key_uid;
                }
                return message;
            }
            toObject() {
                const data: {
                    unused_arguments?: string[];
                    consumer_info?: ReturnType<typeof CheckResponse.ConsumerInfo.prototype.toObject>;
                    api_key_uid?: string;
                } = {};
                if (this.unused_arguments != null) {
                    data.unused_arguments = this.unused_arguments;
                }
                if (this.consumer_info != null) {
                    data.consumer_info = this.consumer_info.toObject();
                }
                if (this.api_key_uid != null) {
                    data.api_key_uid = this.api_key_uid;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.unused_arguments.length)
                    writer.writeRepeatedString(1, this.unused_arguments);
                if (this.has_consumer_info)
                    writer.writeMessage(2, this.consumer_info, () => this.consumer_info.serialize(writer));
                if (this.api_key_uid.length)
                    writer.writeString(5, this.api_key_uid);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        case 2:
                            reader.readMessage(message.consumer_info, () => message.consumer_info = CheckResponse.ConsumerInfo.deserialize(reader));
                            break;
                        case 5:
                            message.api_key_uid = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CheckInfo {
                return CheckInfo.deserialize(bytes);
            }
        }
        export class ConsumerInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                project_number?: number;
                type?: CheckResponse.ConsumerInfo.ConsumerType;
                consumer_number?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("project_number" in data && data.project_number != undefined) {
                        this.project_number = data.project_number;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("consumer_number" in data && data.consumer_number != undefined) {
                        this.consumer_number = data.consumer_number;
                    }
                }
            }
            get project_number() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set project_number(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 2, CheckResponse.ConsumerInfo.ConsumerType.CONSUMER_TYPE_UNSPECIFIED) as CheckResponse.ConsumerInfo.ConsumerType;
            }
            set type(value: CheckResponse.ConsumerInfo.ConsumerType) {
                pb_1.Message.setField(this, 2, value);
            }
            get consumer_number() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set consumer_number(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                project_number?: number;
                type?: CheckResponse.ConsumerInfo.ConsumerType;
                consumer_number?: number;
            }): ConsumerInfo {
                const message = new ConsumerInfo({});
                if (data.project_number != null) {
                    message.project_number = data.project_number;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.consumer_number != null) {
                    message.consumer_number = data.consumer_number;
                }
                return message;
            }
            toObject() {
                const data: {
                    project_number?: number;
                    type?: CheckResponse.ConsumerInfo.ConsumerType;
                    consumer_number?: number;
                } = {};
                if (this.project_number != null) {
                    data.project_number = this.project_number;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.consumer_number != null) {
                    data.consumer_number = this.consumer_number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.project_number != 0)
                    writer.writeInt64(1, this.project_number);
                if (this.type != CheckResponse.ConsumerInfo.ConsumerType.CONSUMER_TYPE_UNSPECIFIED)
                    writer.writeEnum(2, this.type);
                if (this.consumer_number != 0)
                    writer.writeInt64(3, this.consumer_number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsumerInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsumerInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.project_number = reader.readInt64();
                            break;
                        case 2:
                            message.type = reader.readEnum();
                            break;
                        case 3:
                            message.consumer_number = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ConsumerInfo {
                return ConsumerInfo.deserialize(bytes);
            }
        }
        export namespace ConsumerInfo {
            export enum ConsumerType {
                CONSUMER_TYPE_UNSPECIFIED = 0,
                PROJECT = 1,
                FOLDER = 2,
                ORGANIZATION = 3,
                SERVICE_SPECIFIC = 4
            }
        }
    }
    export class ReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            operations?: dependency_4.google.api.servicecontrol.v1.Operation[];
            service_config_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("operations" in data && data.operations != undefined) {
                    this.operations = data.operations;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.google.api.servicecontrol.v1.Operation, 2) as dependency_4.google.api.servicecontrol.v1.Operation[];
        }
        set operations(value: dependency_4.google.api.servicecontrol.v1.Operation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            operations?: ReturnType<typeof dependency_4.google.api.servicecontrol.v1.Operation.prototype.toObject>[];
            service_config_id?: string;
        }): ReportRequest {
            const message = new ReportRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.operations != null) {
                message.operations = data.operations.map(item => dependency_4.google.api.servicecontrol.v1.Operation.fromObject(item));
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                operations?: ReturnType<typeof dependency_4.google.api.servicecontrol.v1.Operation.prototype.toObject>[];
                service_config_id?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.operations != null) {
                data.operations = this.operations.map((item: dependency_4.google.api.servicecontrol.v1.Operation) => item.toObject());
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.operations.length)
                writer.writeRepeatedMessage(2, this.operations, (item: dependency_4.google.api.servicecontrol.v1.Operation) => item.serialize(writer));
            if (this.service_config_id.length)
                writer.writeString(3, this.service_config_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operations, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.google.api.servicecontrol.v1.Operation.deserialize(reader), dependency_4.google.api.servicecontrol.v1.Operation));
                        break;
                    case 3:
                        message.service_config_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportRequest {
            return ReportRequest.deserialize(bytes);
        }
    }
    export class ReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            report_errors?: ReportResponse.ReportError[];
            service_config_id?: string;
            service_rollout_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("report_errors" in data && data.report_errors != undefined) {
                    this.report_errors = data.report_errors;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
                if ("service_rollout_id" in data && data.service_rollout_id != undefined) {
                    this.service_rollout_id = data.service_rollout_id;
                }
            }
        }
        get report_errors() {
            return pb_1.Message.getRepeatedWrapperField(this, ReportResponse.ReportError, 1) as ReportResponse.ReportError[];
        }
        set report_errors(value: ReportResponse.ReportError[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_rollout_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set service_rollout_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            report_errors?: ReturnType<typeof ReportResponse.ReportError.prototype.toObject>[];
            service_config_id?: string;
            service_rollout_id?: string;
        }): ReportResponse {
            const message = new ReportResponse({});
            if (data.report_errors != null) {
                message.report_errors = data.report_errors.map(item => ReportResponse.ReportError.fromObject(item));
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            if (data.service_rollout_id != null) {
                message.service_rollout_id = data.service_rollout_id;
            }
            return message;
        }
        toObject() {
            const data: {
                report_errors?: ReturnType<typeof ReportResponse.ReportError.prototype.toObject>[];
                service_config_id?: string;
                service_rollout_id?: string;
            } = {};
            if (this.report_errors != null) {
                data.report_errors = this.report_errors.map((item: ReportResponse.ReportError) => item.toObject());
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            if (this.service_rollout_id != null) {
                data.service_rollout_id = this.service_rollout_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.report_errors.length)
                writer.writeRepeatedMessage(1, this.report_errors, (item: ReportResponse.ReportError) => item.serialize(writer));
            if (this.service_config_id.length)
                writer.writeString(2, this.service_config_id);
            if (this.service_rollout_id.length)
                writer.writeString(4, this.service_rollout_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.report_errors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReportResponse.ReportError.deserialize(reader), ReportResponse.ReportError));
                        break;
                    case 2:
                        message.service_config_id = reader.readString();
                        break;
                    case 4:
                        message.service_rollout_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportResponse {
            return ReportResponse.deserialize(bytes);
        }
    }
    export namespace ReportResponse {
        export class ReportError extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                operation_id?: string;
                status?: dependency_5.google.rpc.Status;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("operation_id" in data && data.operation_id != undefined) {
                        this.operation_id = data.operation_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                }
            }
            get operation_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set operation_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getWrapperField(this, dependency_5.google.rpc.Status, 2) as dependency_5.google.rpc.Status;
            }
            set status(value: dependency_5.google.rpc.Status) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_status() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                operation_id?: string;
                status?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>;
            }): ReportError {
                const message = new ReportError({});
                if (data.operation_id != null) {
                    message.operation_id = data.operation_id;
                }
                if (data.status != null) {
                    message.status = dependency_5.google.rpc.Status.fromObject(data.status);
                }
                return message;
            }
            toObject() {
                const data: {
                    operation_id?: string;
                    status?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>;
                } = {};
                if (this.operation_id != null) {
                    data.operation_id = this.operation_id;
                }
                if (this.status != null) {
                    data.status = this.status.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.operation_id.length)
                    writer.writeString(1, this.operation_id);
                if (this.has_status)
                    writer.writeMessage(2, this.status, () => this.status.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportError {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportError();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.operation_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.status, () => message.status = dependency_5.google.rpc.Status.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReportError {
                return ReportError.deserialize(bytes);
            }
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceControllerService {
        static definition = {
            Check: {
                path: "/google.api.servicecontrol.v1.ServiceController/Check",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckResponse.deserialize(new Uint8Array(bytes))
            },
            Report: {
                path: "/google.api.servicecontrol.v1.ServiceController/Report",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReportResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Check(call: grpc_1.ServerUnaryCall<CheckRequest, CheckResponse>, callback: grpc_1.sendUnaryData<CheckResponse>): void;
        abstract Report(call: grpc_1.ServerUnaryCall<ReportRequest, ReportResponse>, callback: grpc_1.sendUnaryData<ReportResponse>): void;
    }
    export class ServiceControllerClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceControllerService.definition, "ServiceController", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Check: GrpcUnaryServiceInterface<CheckRequest, CheckResponse> = (message: CheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, callback?: grpc_1.requestCallback<CheckResponse>): grpc_1.ClientUnaryCall => {
            return super.Check(message, metadata, options, callback);
        };
        Report: GrpcUnaryServiceInterface<ReportRequest, ReportResponse> = (message: ReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReportResponse>, callback?: grpc_1.requestCallback<ReportResponse>): grpc_1.ClientUnaryCall => {
            return super.Report(message, metadata, options, callback);
        };
    }
}
