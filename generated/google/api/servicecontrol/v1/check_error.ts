/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicecontrol/v1/check_error.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../rpc/status";
import * as pb_1 from "google-protobuf";
export namespace google.api.servicecontrol.v1 {
    export class CheckError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: CheckError.Code;
            subject?: string;
            detail?: string;
            status?: dependency_1.google.rpc.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, CheckError.Code.ERROR_CODE_UNSPECIFIED) as CheckError.Code;
        }
        set code(value: CheckError.Code) {
            pb_1.Message.setField(this, 1, value);
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set detail(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.rpc.Status, 3) as dependency_1.google.rpc.Status;
        }
        set status(value: dependency_1.google.rpc.Status) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            code?: CheckError.Code;
            subject?: string;
            detail?: string;
            status?: ReturnType<typeof dependency_1.google.rpc.Status.prototype.toObject>;
        }): CheckError {
            const message = new CheckError({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            if (data.status != null) {
                message.status = dependency_1.google.rpc.Status.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                code?: CheckError.Code;
                subject?: string;
                detail?: string;
                status?: ReturnType<typeof dependency_1.google.rpc.Status.prototype.toObject>;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != CheckError.Code.ERROR_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.code);
            if (this.subject.length)
                writer.writeString(4, this.subject);
            if (this.detail.length)
                writer.writeString(2, this.detail);
            if (this.has_status)
                writer.writeMessage(3, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readEnum();
                        break;
                    case 4:
                        message.subject = reader.readString();
                        break;
                    case 2:
                        message.detail = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.status, () => message.status = dependency_1.google.rpc.Status.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckError {
            return CheckError.deserialize(bytes);
        }
    }
    export namespace CheckError {
        export enum Code {
            ERROR_CODE_UNSPECIFIED = 0,
            NOT_FOUND = 5,
            PERMISSION_DENIED = 7,
            RESOURCE_EXHAUSTED = 8,
            SERVICE_NOT_ACTIVATED = 104,
            BILLING_DISABLED = 107,
            PROJECT_DELETED = 108,
            PROJECT_INVALID = 114,
            CONSUMER_INVALID = 125,
            IP_ADDRESS_BLOCKED = 109,
            REFERER_BLOCKED = 110,
            CLIENT_APP_BLOCKED = 111,
            API_TARGET_BLOCKED = 122,
            API_KEY_INVALID = 105,
            API_KEY_EXPIRED = 112,
            API_KEY_NOT_FOUND = 113,
            INVALID_CREDENTIAL = 123,
            NAMESPACE_LOOKUP_UNAVAILABLE = 300,
            SERVICE_STATUS_UNAVAILABLE = 301,
            BILLING_STATUS_UNAVAILABLE = 302,
            CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305
        }
    }
}
