/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicecontrol/v1/log_entry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./http_request";
import * as dependency_2 from "./../../../logging/type/log_severity";
import * as dependency_3 from "./../../../protobuf/any";
import * as dependency_4 from "./../../../protobuf/struct";
import * as dependency_5 from "./../../../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.api.servicecontrol.v1 {
    export class LogEntry extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 6]];
        constructor(data?: any[] | ({
            name?: string;
            timestamp?: dependency_5.google.protobuf.Timestamp;
            severity?: dependency_2.google.logging.type.LogSeverity;
            http_request?: dependency_1.google.api.servicecontrol.v1.HttpRequest;
            trace?: string;
            insert_id?: string;
            labels?: Map<string, string>;
            operation?: LogEntryOperation;
            source_location?: LogEntrySourceLocation;
        } & (({
            proto_payload?: dependency_3.google.protobuf.Any;
            text_payload?: never;
            struct_payload?: never;
        } | {
            proto_payload?: never;
            text_payload?: string;
            struct_payload?: never;
        } | {
            proto_payload?: never;
            text_payload?: never;
            struct_payload?: dependency_4.google.protobuf.Struct;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("http_request" in data && data.http_request != undefined) {
                    this.http_request = data.http_request;
                }
                if ("trace" in data && data.trace != undefined) {
                    this.trace = data.trace;
                }
                if ("insert_id" in data && data.insert_id != undefined) {
                    this.insert_id = data.insert_id;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("proto_payload" in data && data.proto_payload != undefined) {
                    this.proto_payload = data.proto_payload;
                }
                if ("text_payload" in data && data.text_payload != undefined) {
                    this.text_payload = data.text_payload;
                }
                if ("struct_payload" in data && data.struct_payload != undefined) {
                    this.struct_payload = data.struct_payload;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("source_location" in data && data.source_location != undefined) {
                    this.source_location = data.source_location;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 11) as dependency_5.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get severity() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_2.google.logging.type.LogSeverity.DEFAULT) as dependency_2.google.logging.type.LogSeverity;
        }
        set severity(value: dependency_2.google.logging.type.LogSeverity) {
            pb_1.Message.setField(this, 12, value);
        }
        get http_request() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.servicecontrol.v1.HttpRequest, 14) as dependency_1.google.api.servicecontrol.v1.HttpRequest;
        }
        set http_request(value: dependency_1.google.api.servicecontrol.v1.HttpRequest) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_http_request() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get trace() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set trace(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get insert_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set insert_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 13) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 13, value as any);
        }
        get proto_payload() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 2) as dependency_3.google.protobuf.Any;
        }
        set proto_payload(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_proto_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get text_payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set text_payload(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_text_payload() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get struct_payload() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Struct, 6) as dependency_4.google.protobuf.Struct;
        }
        set struct_payload(value: dependency_4.google.protobuf.Struct) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_struct_payload() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, LogEntryOperation, 16) as LogEntryOperation;
        }
        set operation(value: LogEntryOperation) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get source_location() {
            return pb_1.Message.getWrapperField(this, LogEntrySourceLocation, 17) as LogEntrySourceLocation;
        }
        set source_location(value: LogEntrySourceLocation) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_source_location() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "proto_payload" | "text_payload" | "struct_payload";
            } = {
                0: "none",
                2: "proto_payload",
                3: "text_payload",
                6: "struct_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 6])];
        }
        static fromObject(data: {
            name?: string;
            timestamp?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            severity?: dependency_2.google.logging.type.LogSeverity;
            http_request?: ReturnType<typeof dependency_1.google.api.servicecontrol.v1.HttpRequest.prototype.toObject>;
            trace?: string;
            insert_id?: string;
            labels?: {
                [key: string]: string;
            };
            proto_payload?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            text_payload?: string;
            struct_payload?: ReturnType<typeof dependency_4.google.protobuf.Struct.prototype.toObject>;
            operation?: ReturnType<typeof LogEntryOperation.prototype.toObject>;
            source_location?: ReturnType<typeof LogEntrySourceLocation.prototype.toObject>;
        }): LogEntry {
            const message = new LogEntry({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_5.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.http_request != null) {
                message.http_request = dependency_1.google.api.servicecontrol.v1.HttpRequest.fromObject(data.http_request);
            }
            if (data.trace != null) {
                message.trace = data.trace;
            }
            if (data.insert_id != null) {
                message.insert_id = data.insert_id;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            if (data.proto_payload != null) {
                message.proto_payload = dependency_3.google.protobuf.Any.fromObject(data.proto_payload);
            }
            if (data.text_payload != null) {
                message.text_payload = data.text_payload;
            }
            if (data.struct_payload != null) {
                message.struct_payload = dependency_4.google.protobuf.Struct.fromObject(data.struct_payload);
            }
            if (data.operation != null) {
                message.operation = LogEntryOperation.fromObject(data.operation);
            }
            if (data.source_location != null) {
                message.source_location = LogEntrySourceLocation.fromObject(data.source_location);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                timestamp?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                severity?: dependency_2.google.logging.type.LogSeverity;
                http_request?: ReturnType<typeof dependency_1.google.api.servicecontrol.v1.HttpRequest.prototype.toObject>;
                trace?: string;
                insert_id?: string;
                labels?: {
                    [key: string]: string;
                };
                proto_payload?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                text_payload?: string;
                struct_payload?: ReturnType<typeof dependency_4.google.protobuf.Struct.prototype.toObject>;
                operation?: ReturnType<typeof LogEntryOperation.prototype.toObject>;
                source_location?: ReturnType<typeof LogEntrySourceLocation.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.http_request != null) {
                data.http_request = this.http_request.toObject();
            }
            if (this.trace != null) {
                data.trace = this.trace;
            }
            if (this.insert_id != null) {
                data.insert_id = this.insert_id;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            if (this.proto_payload != null) {
                data.proto_payload = this.proto_payload.toObject();
            }
            if (this.text_payload != null) {
                data.text_payload = this.text_payload;
            }
            if (this.struct_payload != null) {
                data.struct_payload = this.struct_payload.toObject();
            }
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            if (this.source_location != null) {
                data.source_location = this.source_location.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(10, this.name);
            if (this.has_timestamp)
                writer.writeMessage(11, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.severity != dependency_2.google.logging.type.LogSeverity.DEFAULT)
                writer.writeEnum(12, this.severity);
            if (this.has_http_request)
                writer.writeMessage(14, this.http_request, () => this.http_request.serialize(writer));
            if (this.trace.length)
                writer.writeString(15, this.trace);
            if (this.insert_id.length)
                writer.writeString(4, this.insert_id);
            for (const [key, value] of this.labels) {
                writer.writeMessage(13, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_proto_payload)
                writer.writeMessage(2, this.proto_payload, () => this.proto_payload.serialize(writer));
            if (this.has_text_payload)
                writer.writeString(3, this.text_payload);
            if (this.has_struct_payload)
                writer.writeMessage(6, this.struct_payload, () => this.struct_payload.serialize(writer));
            if (this.has_operation)
                writer.writeMessage(16, this.operation, () => this.operation.serialize(writer));
            if (this.has_source_location)
                writer.writeMessage(17, this.source_location, () => this.source_location.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 10:
                        message.name = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        message.severity = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.http_request, () => message.http_request = dependency_1.google.api.servicecontrol.v1.HttpRequest.deserialize(reader));
                        break;
                    case 15:
                        message.trace = reader.readString();
                        break;
                    case 4:
                        message.insert_id = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    case 2:
                        reader.readMessage(message.proto_payload, () => message.proto_payload = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        message.text_payload = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.struct_payload, () => message.struct_payload = dependency_4.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.operation, () => message.operation = LogEntryOperation.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.source_location, () => message.source_location = LogEntrySourceLocation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogEntry {
            return LogEntry.deserialize(bytes);
        }
    }
    export class LogEntryOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            producer?: string;
            first?: boolean;
            last?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("producer" in data && data.producer != undefined) {
                    this.producer = data.producer;
                }
                if ("first" in data && data.first != undefined) {
                    this.first = data.first;
                }
                if ("last" in data && data.last != undefined) {
                    this.last = data.last;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get producer() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set producer(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get first() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set first(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get last() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set last(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            producer?: string;
            first?: boolean;
            last?: boolean;
        }): LogEntryOperation {
            const message = new LogEntryOperation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.producer != null) {
                message.producer = data.producer;
            }
            if (data.first != null) {
                message.first = data.first;
            }
            if (data.last != null) {
                message.last = data.last;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                producer?: string;
                first?: boolean;
                last?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.producer != null) {
                data.producer = this.producer;
            }
            if (this.first != null) {
                data.first = this.first;
            }
            if (this.last != null) {
                data.last = this.last;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.producer.length)
                writer.writeString(2, this.producer);
            if (this.first != false)
                writer.writeBool(3, this.first);
            if (this.last != false)
                writer.writeBool(4, this.last);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogEntryOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogEntryOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.producer = reader.readString();
                        break;
                    case 3:
                        message.first = reader.readBool();
                        break;
                    case 4:
                        message.last = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogEntryOperation {
            return LogEntryOperation.deserialize(bytes);
        }
    }
    export class LogEntrySourceLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file?: string;
            line?: number;
            function?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file" in data && data.file != undefined) {
                    this.file = data.file;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
            }
        }
        get file() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set file(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set line(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get function() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set function(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            file?: string;
            line?: number;
            function?: string;
        }): LogEntrySourceLocation {
            const message = new LogEntrySourceLocation({});
            if (data.file != null) {
                message.file = data.file;
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.function != null) {
                message.function = data.function;
            }
            return message;
        }
        toObject() {
            const data: {
                file?: string;
                line?: number;
                function?: string;
            } = {};
            if (this.file != null) {
                data.file = this.file;
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.function != null) {
                data.function = this.function;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.file.length)
                writer.writeString(1, this.file);
            if (this.line != 0)
                writer.writeInt64(2, this.line);
            if (this.function.length)
                writer.writeString(3, this.function);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogEntrySourceLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogEntrySourceLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file = reader.readString();
                        break;
                    case 2:
                        message.line = reader.readInt64();
                        break;
                    case 3:
                        message.function = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogEntrySourceLocation {
            return LogEntrySourceLocation.deserialize(bytes);
        }
    }
}
