/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/servicecontrol/v2/service_controller.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../annotations";
import * as dependency_2 from "./../../client";
import * as dependency_3 from "./../../../rpc/context/attribute_context";
import * as dependency_4 from "./../../../rpc/status";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.servicecontrol.v2 {
    export class CheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            service_config_id?: string;
            attributes?: dependency_3.google.rpc.context.AttributeContext;
            resources?: ResourceInfo[];
            flags?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get attributes() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.rpc.context.AttributeContext, 3) as dependency_3.google.rpc.context.AttributeContext;
        }
        set attributes(value: dependency_3.google.rpc.context.AttributeContext) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_attributes() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get resources() {
            return pb_1.Message.getRepeatedWrapperField(this, ResourceInfo, 4) as ResourceInfo[];
        }
        set resources(value: ResourceInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set flags(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            service_name?: string;
            service_config_id?: string;
            attributes?: ReturnType<typeof dependency_3.google.rpc.context.AttributeContext.prototype.toObject>;
            resources?: ReturnType<typeof ResourceInfo.prototype.toObject>[];
            flags?: string;
        }): CheckRequest {
            const message = new CheckRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            if (data.attributes != null) {
                message.attributes = dependency_3.google.rpc.context.AttributeContext.fromObject(data.attributes);
            }
            if (data.resources != null) {
                message.resources = data.resources.map(item => ResourceInfo.fromObject(item));
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                service_config_id?: string;
                attributes?: ReturnType<typeof dependency_3.google.rpc.context.AttributeContext.prototype.toObject>;
                resources?: ReturnType<typeof ResourceInfo.prototype.toObject>[];
                flags?: string;
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            if (this.attributes != null) {
                data.attributes = this.attributes.toObject();
            }
            if (this.resources != null) {
                data.resources = this.resources.map((item: ResourceInfo) => item.toObject());
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.service_config_id.length)
                writer.writeString(2, this.service_config_id);
            if (this.has_attributes)
                writer.writeMessage(3, this.attributes, () => this.attributes.serialize(writer));
            if (this.resources.length)
                writer.writeRepeatedMessage(4, this.resources, (item: ResourceInfo) => item.serialize(writer));
            if (this.flags.length)
                writer.writeString(5, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.service_config_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.attributes, () => message.attributes = dependency_3.google.rpc.context.AttributeContext.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ResourceInfo.deserialize(reader), ResourceInfo));
                        break;
                    case 5:
                        message.flags = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckRequest {
            return CheckRequest.deserialize(bytes);
        }
    }
    export class ResourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: string;
            permission?: string;
            container?: string;
            location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get permission() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set permission(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            type?: string;
            permission?: string;
            container?: string;
            location?: string;
        }): ResourceInfo {
            const message = new ResourceInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.permission != null) {
                message.permission = data.permission;
            }
            if (data.container != null) {
                message.container = data.container;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: string;
                permission?: string;
                container?: string;
                location?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.permission != null) {
                data.permission = this.permission;
            }
            if (this.container != null) {
                data.container = this.container;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.permission.length)
                writer.writeString(3, this.permission);
            if (this.container.length)
                writer.writeString(4, this.container);
            if (this.location.length)
                writer.writeString(5, this.location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.permission = reader.readString();
                        break;
                    case 4:
                        message.container = reader.readString();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceInfo {
            return ResourceInfo.deserialize(bytes);
        }
    }
    export class CheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_4.google.rpc.Status;
            headers?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get status() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.rpc.Status, 1) as dependency_4.google.rpc.Status;
        }
        set status(value: dependency_4.google.rpc.Status) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get headers() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            status?: ReturnType<typeof dependency_4.google.rpc.Status.prototype.toObject>;
            headers?: {
                [key: string]: string;
            };
        }): CheckResponse {
            const message = new CheckResponse({});
            if (data.status != null) {
                message.status = dependency_4.google.rpc.Status.fromObject(data.status);
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof dependency_4.google.rpc.Status.prototype.toObject>;
                headers?: {
                    [key: string]: string;
                };
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            for (const [key, value] of this.headers) {
                writer.writeMessage(2, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = dependency_4.google.rpc.Status.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckResponse {
            return CheckResponse.deserialize(bytes);
        }
    }
    export class ReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_name?: string;
            service_config_id?: string;
            operations?: dependency_3.google.rpc.context.AttributeContext[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("service_config_id" in data && data.service_config_id != undefined) {
                    this.service_config_id = data.service_config_id;
                }
                if ("operations" in data && data.operations != undefined) {
                    this.operations = data.operations;
                }
            }
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service_config_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set service_config_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.google.rpc.context.AttributeContext, 3) as dependency_3.google.rpc.context.AttributeContext[];
        }
        set operations(value: dependency_3.google.rpc.context.AttributeContext[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            service_name?: string;
            service_config_id?: string;
            operations?: ReturnType<typeof dependency_3.google.rpc.context.AttributeContext.prototype.toObject>[];
        }): ReportRequest {
            const message = new ReportRequest({});
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.service_config_id != null) {
                message.service_config_id = data.service_config_id;
            }
            if (data.operations != null) {
                message.operations = data.operations.map(item => dependency_3.google.rpc.context.AttributeContext.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                service_name?: string;
                service_config_id?: string;
                operations?: ReturnType<typeof dependency_3.google.rpc.context.AttributeContext.prototype.toObject>[];
            } = {};
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.service_config_id != null) {
                data.service_config_id = this.service_config_id;
            }
            if (this.operations != null) {
                data.operations = this.operations.map((item: dependency_3.google.rpc.context.AttributeContext) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_name.length)
                writer.writeString(1, this.service_name);
            if (this.service_config_id.length)
                writer.writeString(2, this.service_config_id);
            if (this.operations.length)
                writer.writeRepeatedMessage(3, this.operations, (item: dependency_3.google.rpc.context.AttributeContext) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_name = reader.readString();
                        break;
                    case 2:
                        message.service_config_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operations, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.google.rpc.context.AttributeContext.deserialize(reader), dependency_3.google.rpc.context.AttributeContext));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportRequest {
            return ReportRequest.deserialize(bytes);
        }
    }
    export class ReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReportResponse {
            const message = new ReportResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportResponse {
            return ReportResponse.deserialize(bytes);
        }
    }
    export class ResourceInfoList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resources?: ResourceInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
            }
        }
        get resources() {
            return pb_1.Message.getRepeatedWrapperField(this, ResourceInfo, 1) as ResourceInfo[];
        }
        set resources(value: ResourceInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            resources?: ReturnType<typeof ResourceInfo.prototype.toObject>[];
        }): ResourceInfoList {
            const message = new ResourceInfoList({});
            if (data.resources != null) {
                message.resources = data.resources.map(item => ResourceInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                resources?: ReturnType<typeof ResourceInfo.prototype.toObject>[];
            } = {};
            if (this.resources != null) {
                data.resources = this.resources.map((item: ResourceInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resources.length)
                writer.writeRepeatedMessage(1, this.resources, (item: ResourceInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceInfoList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceInfoList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ResourceInfo.deserialize(reader), ResourceInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceInfoList {
            return ResourceInfoList.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServiceControllerService {
        static definition = {
            Check: {
                path: "/google.api.servicecontrol.v2.ServiceController/Check",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckResponse.deserialize(new Uint8Array(bytes))
            },
            Report: {
                path: "/google.api.servicecontrol.v2.ServiceController/Report",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReportResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Check(call: grpc_1.ServerUnaryCall<CheckRequest, CheckResponse>, callback: grpc_1.sendUnaryData<CheckResponse>): void;
        abstract Report(call: grpc_1.ServerUnaryCall<ReportRequest, ReportResponse>, callback: grpc_1.sendUnaryData<ReportResponse>): void;
    }
    export class ServiceControllerClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceControllerService.definition, "ServiceController", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Check: GrpcUnaryServiceInterface<CheckRequest, CheckResponse> = (message: CheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, callback?: grpc_1.requestCallback<CheckResponse>): grpc_1.ClientUnaryCall => {
            return super.Check(message, metadata, options, callback);
        };
        Report: GrpcUnaryServiceInterface<ReportRequest, ReportResponse> = (message: ReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReportResponse>, callback?: grpc_1.requestCallback<ReportResponse>): grpc_1.ClientUnaryCall => {
            return super.Report(message, metadata, options, callback);
        };
    }
}
