/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/apikeys/v2/apikeys.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../annotations";
import * as dependency_2 from "./resources";
import * as dependency_3 from "./../../client";
import * as dependency_4 from "./../../field_behavior";
import * as dependency_5 from "./../../resource";
import * as dependency_6 from "./../../../longrunning/operations";
import * as dependency_7 from "./../../../protobuf/empty";
import * as dependency_8 from "./../../../protobuf/field_mask";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.apikeys.v2 {
    export class CreateKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            key?: dependency_2.google.api.apikeys.v2.Key;
            key_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.api.apikeys.v2.Key, 2) as dependency_2.google.api.apikeys.v2.Key;
        }
        set key(value: dependency_2.google.api.apikeys.v2.Key) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            parent?: string;
            key?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>;
            key_id?: string;
        }): CreateKeyRequest {
            const message = new CreateKeyRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.key != null) {
                message.key = dependency_2.google.api.apikeys.v2.Key.fromObject(data.key);
            }
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                key?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>;
                key_id?: string;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.has_key)
                writer.writeMessage(2, this.key, () => this.key.serialize(writer));
            if (this.key_id.length)
                writer.writeString(3, this.key_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.key, () => message.key = dependency_2.google.api.apikeys.v2.Key.deserialize(reader));
                        break;
                    case 3:
                        message.key_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateKeyRequest {
            return CreateKeyRequest.deserialize(bytes);
        }
    }
    export class ListKeysRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            page_size?: number;
            page_token?: string;
            show_deleted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("show_deleted" in data && data.show_deleted != undefined) {
                    this.show_deleted = data.show_deleted;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get show_deleted() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set show_deleted(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            parent?: string;
            page_size?: number;
            page_token?: string;
            show_deleted?: boolean;
        }): ListKeysRequest {
            const message = new ListKeysRequest({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.show_deleted != null) {
                message.show_deleted = data.show_deleted;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                page_size?: number;
                page_token?: string;
                show_deleted?: boolean;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.show_deleted != null) {
                data.show_deleted = this.show_deleted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (this.page_token.length)
                writer.writeString(3, this.page_token);
            if (this.show_deleted != false)
                writer.writeBool(6, this.show_deleted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListKeysRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    case 3:
                        message.page_token = reader.readString();
                        break;
                    case 6:
                        message.show_deleted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListKeysRequest {
            return ListKeysRequest.deserialize(bytes);
        }
    }
    export class ListKeysResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keys?: dependency_2.google.api.apikeys.v2.Key[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get keys() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.google.api.apikeys.v2.Key, 1) as dependency_2.google.api.apikeys.v2.Key[];
        }
        set keys(value: dependency_2.google.api.apikeys.v2.Key[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            keys?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>[];
            next_page_token?: string;
        }): ListKeysResponse {
            const message = new ListKeysResponse({});
            if (data.keys != null) {
                message.keys = data.keys.map(item => dependency_2.google.api.apikeys.v2.Key.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                keys?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.keys != null) {
                data.keys = this.keys.map((item: dependency_2.google.api.apikeys.v2.Key) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keys.length)
                writer.writeRepeatedMessage(1, this.keys, (item: dependency_2.google.api.apikeys.v2.Key) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.keys, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.google.api.apikeys.v2.Key.deserialize(reader), dependency_2.google.api.apikeys.v2.Key));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListKeysResponse {
            return ListKeysResponse.deserialize(bytes);
        }
    }
    export class GetKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetKeyRequest {
            const message = new GetKeyRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyRequest {
            return GetKeyRequest.deserialize(bytes);
        }
    }
    export class GetKeyStringRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): GetKeyStringRequest {
            const message = new GetKeyStringRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyStringRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyStringRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyStringRequest {
            return GetKeyStringRequest.deserialize(bytes);
        }
    }
    export class GetKeyStringResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_string?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_string" in data && data.key_string != undefined) {
                    this.key_string = data.key_string;
                }
            }
        }
        get key_string() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_string(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_string?: string;
        }): GetKeyStringResponse {
            const message = new GetKeyStringResponse({});
            if (data.key_string != null) {
                message.key_string = data.key_string;
            }
            return message;
        }
        toObject() {
            const data: {
                key_string?: string;
            } = {};
            if (this.key_string != null) {
                data.key_string = this.key_string;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_string.length)
                writer.writeString(1, this.key_string);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKeyStringResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetKeyStringResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_string = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetKeyStringResponse {
            return GetKeyStringResponse.deserialize(bytes);
        }
    }
    export class UpdateKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: dependency_2.google.api.apikeys.v2.Key;
            update_mask?: dependency_8.google.protobuf.FieldMask;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("update_mask" in data && data.update_mask != undefined) {
                    this.update_mask = data.update_mask;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.api.apikeys.v2.Key, 1) as dependency_2.google.api.apikeys.v2.Key;
        }
        set key(value: dependency_2.google.api.apikeys.v2.Key) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get update_mask() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.FieldMask, 2) as dependency_8.google.protobuf.FieldMask;
        }
        set update_mask(value: dependency_8.google.protobuf.FieldMask) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_update_mask() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>;
            update_mask?: ReturnType<typeof dependency_8.google.protobuf.FieldMask.prototype.toObject>;
        }): UpdateKeyRequest {
            const message = new UpdateKeyRequest({});
            if (data.key != null) {
                message.key = dependency_2.google.api.apikeys.v2.Key.fromObject(data.key);
            }
            if (data.update_mask != null) {
                message.update_mask = dependency_8.google.protobuf.FieldMask.fromObject(data.update_mask);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof dependency_2.google.api.apikeys.v2.Key.prototype.toObject>;
                update_mask?: ReturnType<typeof dependency_8.google.protobuf.FieldMask.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.update_mask != null) {
                data.update_mask = this.update_mask.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (this.has_update_mask)
                writer.writeMessage(2, this.update_mask, () => this.update_mask.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = dependency_2.google.api.apikeys.v2.Key.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.update_mask, () => message.update_mask = dependency_8.google.protobuf.FieldMask.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateKeyRequest {
            return UpdateKeyRequest.deserialize(bytes);
        }
    }
    export class DeleteKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            etag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("etag" in data && data.etag != undefined) {
                    this.etag = data.etag;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get etag() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set etag(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            etag?: string;
        }): DeleteKeyRequest {
            const message = new DeleteKeyRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.etag != null) {
                message.etag = data.etag;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                etag?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.etag != null) {
                data.etag = this.etag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.etag.length)
                writer.writeString(2, this.etag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.etag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteKeyRequest {
            return DeleteKeyRequest.deserialize(bytes);
        }
    }
    export class UndeleteKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): UndeleteKeyRequest {
            const message = new UndeleteKeyRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UndeleteKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UndeleteKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UndeleteKeyRequest {
            return UndeleteKeyRequest.deserialize(bytes);
        }
    }
    export class LookupKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_string?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_string" in data && data.key_string != undefined) {
                    this.key_string = data.key_string;
                }
            }
        }
        get key_string() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_string(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_string?: string;
        }): LookupKeyRequest {
            const message = new LookupKeyRequest({});
            if (data.key_string != null) {
                message.key_string = data.key_string;
            }
            return message;
        }
        toObject() {
            const data: {
                key_string?: string;
            } = {};
            if (this.key_string != null) {
                data.key_string = this.key_string;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_string.length)
                writer.writeString(1, this.key_string);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LookupKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LookupKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_string = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LookupKeyRequest {
            return LookupKeyRequest.deserialize(bytes);
        }
    }
    export class LookupKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parent?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parent" in data && data.parent != undefined) {
                    this.parent = data.parent;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get parent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set parent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            parent?: string;
            name?: string;
        }): LookupKeyResponse {
            const message = new LookupKeyResponse({});
            if (data.parent != null) {
                message.parent = data.parent;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                parent?: string;
                name?: string;
            } = {};
            if (this.parent != null) {
                data.parent = this.parent;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parent.length)
                writer.writeString(1, this.parent);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LookupKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LookupKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parent = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LookupKeyResponse {
            return LookupKeyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedApiKeysService {
        static definition = {
            CreateKey: {
                path: "/google.api.apikeys.v2.ApiKeys/CreateKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            ListKeys: {
                path: "/google.api.apikeys.v2.ApiKeys/ListKeys",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListKeysRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListKeysRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListKeysResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListKeysResponse.deserialize(new Uint8Array(bytes))
            },
            GetKey: {
                path: "/google.api.apikeys.v2.ApiKeys/GetKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.api.apikeys.v2.Key) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.api.apikeys.v2.Key.deserialize(new Uint8Array(bytes))
            },
            GetKeyString: {
                path: "/google.api.apikeys.v2.ApiKeys/GetKeyString",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetKeyStringRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetKeyStringRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetKeyStringResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetKeyStringResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateKey: {
                path: "/google.api.apikeys.v2.ApiKeys/UpdateKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            DeleteKey: {
                path: "/google.api.apikeys.v2.ApiKeys/DeleteKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            UndeleteKey: {
                path: "/google.api.apikeys.v2.ApiKeys/UndeleteKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UndeleteKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UndeleteKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.google.longrunning.Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.google.longrunning.Operation.deserialize(new Uint8Array(bytes))
            },
            LookupKey: {
                path: "/google.api.apikeys.v2.ApiKeys/LookupKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LookupKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LookupKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LookupKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LookupKeyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateKey(call: grpc_1.ServerUnaryCall<CreateKeyRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract ListKeys(call: grpc_1.ServerUnaryCall<ListKeysRequest, ListKeysResponse>, callback: grpc_1.sendUnaryData<ListKeysResponse>): void;
        abstract GetKey(call: grpc_1.ServerUnaryCall<GetKeyRequest, dependency_2.google.api.apikeys.v2.Key>, callback: grpc_1.sendUnaryData<dependency_2.google.api.apikeys.v2.Key>): void;
        abstract GetKeyString(call: grpc_1.ServerUnaryCall<GetKeyStringRequest, GetKeyStringResponse>, callback: grpc_1.sendUnaryData<GetKeyStringResponse>): void;
        abstract UpdateKey(call: grpc_1.ServerUnaryCall<UpdateKeyRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract DeleteKey(call: grpc_1.ServerUnaryCall<DeleteKeyRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract UndeleteKey(call: grpc_1.ServerUnaryCall<UndeleteKeyRequest, dependency_6.google.longrunning.Operation>, callback: grpc_1.sendUnaryData<dependency_6.google.longrunning.Operation>): void;
        abstract LookupKey(call: grpc_1.ServerUnaryCall<LookupKeyRequest, LookupKeyResponse>, callback: grpc_1.sendUnaryData<LookupKeyResponse>): void;
    }
    export class ApiKeysClient extends grpc_1.makeGenericClientConstructor(UnimplementedApiKeysService.definition, "ApiKeys", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateKey: GrpcUnaryServiceInterface<CreateKeyRequest, dependency_6.google.longrunning.Operation> = (message: CreateKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.CreateKey(message, metadata, options, callback);
        };
        ListKeys: GrpcUnaryServiceInterface<ListKeysRequest, ListKeysResponse> = (message: ListKeysRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListKeysResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListKeysResponse>, callback?: grpc_1.requestCallback<ListKeysResponse>): grpc_1.ClientUnaryCall => {
            return super.ListKeys(message, metadata, options, callback);
        };
        GetKey: GrpcUnaryServiceInterface<GetKeyRequest, dependency_2.google.api.apikeys.v2.Key> = (message: GetKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.api.apikeys.v2.Key>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.api.apikeys.v2.Key>, callback?: grpc_1.requestCallback<dependency_2.google.api.apikeys.v2.Key>): grpc_1.ClientUnaryCall => {
            return super.GetKey(message, metadata, options, callback);
        };
        GetKeyString: GrpcUnaryServiceInterface<GetKeyStringRequest, GetKeyStringResponse> = (message: GetKeyStringRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetKeyStringResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetKeyStringResponse>, callback?: grpc_1.requestCallback<GetKeyStringResponse>): grpc_1.ClientUnaryCall => {
            return super.GetKeyString(message, metadata, options, callback);
        };
        UpdateKey: GrpcUnaryServiceInterface<UpdateKeyRequest, dependency_6.google.longrunning.Operation> = (message: UpdateKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.UpdateKey(message, metadata, options, callback);
        };
        DeleteKey: GrpcUnaryServiceInterface<DeleteKeyRequest, dependency_6.google.longrunning.Operation> = (message: DeleteKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.DeleteKey(message, metadata, options, callback);
        };
        UndeleteKey: GrpcUnaryServiceInterface<UndeleteKeyRequest, dependency_6.google.longrunning.Operation> = (message: UndeleteKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_6.google.longrunning.Operation>, callback?: grpc_1.requestCallback<dependency_6.google.longrunning.Operation>): grpc_1.ClientUnaryCall => {
            return super.UndeleteKey(message, metadata, options, callback);
        };
        LookupKey: GrpcUnaryServiceInterface<LookupKeyRequest, LookupKeyResponse> = (message: LookupKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LookupKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LookupKeyResponse>, callback?: grpc_1.requestCallback<LookupKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.LookupKey(message, metadata, options, callback);
        };
    }
}
