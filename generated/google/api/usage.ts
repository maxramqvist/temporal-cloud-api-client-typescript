/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/usage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class Usage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requirements?: string[];
            rules?: UsageRule[];
            producer_notification_channel?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requirements" in data && data.requirements != undefined) {
                    this.requirements = data.requirements;
                }
                if ("rules" in data && data.rules != undefined) {
                    this.rules = data.rules;
                }
                if ("producer_notification_channel" in data && data.producer_notification_channel != undefined) {
                    this.producer_notification_channel = data.producer_notification_channel;
                }
            }
        }
        get requirements() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set requirements(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get rules() {
            return pb_1.Message.getRepeatedWrapperField(this, UsageRule, 6) as UsageRule[];
        }
        set rules(value: UsageRule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get producer_notification_channel() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set producer_notification_channel(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            requirements?: string[];
            rules?: ReturnType<typeof UsageRule.prototype.toObject>[];
            producer_notification_channel?: string;
        }): Usage {
            const message = new Usage({});
            if (data.requirements != null) {
                message.requirements = data.requirements;
            }
            if (data.rules != null) {
                message.rules = data.rules.map(item => UsageRule.fromObject(item));
            }
            if (data.producer_notification_channel != null) {
                message.producer_notification_channel = data.producer_notification_channel;
            }
            return message;
        }
        toObject() {
            const data: {
                requirements?: string[];
                rules?: ReturnType<typeof UsageRule.prototype.toObject>[];
                producer_notification_channel?: string;
            } = {};
            if (this.requirements != null) {
                data.requirements = this.requirements;
            }
            if (this.rules != null) {
                data.rules = this.rules.map((item: UsageRule) => item.toObject());
            }
            if (this.producer_notification_channel != null) {
                data.producer_notification_channel = this.producer_notification_channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requirements.length)
                writer.writeRepeatedString(1, this.requirements);
            if (this.rules.length)
                writer.writeRepeatedMessage(6, this.rules, (item: UsageRule) => item.serialize(writer));
            if (this.producer_notification_channel.length)
                writer.writeString(7, this.producer_notification_channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Usage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Usage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 6:
                        reader.readMessage(message.rules, () => pb_1.Message.addToRepeatedWrapperField(message, 6, UsageRule.deserialize(reader), UsageRule));
                        break;
                    case 7:
                        message.producer_notification_channel = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Usage {
            return Usage.deserialize(bytes);
        }
    }
    export class UsageRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            selector?: string;
            allow_unregistered_calls?: boolean;
            skip_service_control?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("selector" in data && data.selector != undefined) {
                    this.selector = data.selector;
                }
                if ("allow_unregistered_calls" in data && data.allow_unregistered_calls != undefined) {
                    this.allow_unregistered_calls = data.allow_unregistered_calls;
                }
                if ("skip_service_control" in data && data.skip_service_control != undefined) {
                    this.skip_service_control = data.skip_service_control;
                }
            }
        }
        get selector() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set selector(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get allow_unregistered_calls() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set allow_unregistered_calls(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get skip_service_control() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set skip_service_control(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            selector?: string;
            allow_unregistered_calls?: boolean;
            skip_service_control?: boolean;
        }): UsageRule {
            const message = new UsageRule({});
            if (data.selector != null) {
                message.selector = data.selector;
            }
            if (data.allow_unregistered_calls != null) {
                message.allow_unregistered_calls = data.allow_unregistered_calls;
            }
            if (data.skip_service_control != null) {
                message.skip_service_control = data.skip_service_control;
            }
            return message;
        }
        toObject() {
            const data: {
                selector?: string;
                allow_unregistered_calls?: boolean;
                skip_service_control?: boolean;
            } = {};
            if (this.selector != null) {
                data.selector = this.selector;
            }
            if (this.allow_unregistered_calls != null) {
                data.allow_unregistered_calls = this.allow_unregistered_calls;
            }
            if (this.skip_service_control != null) {
                data.skip_service_control = this.skip_service_control;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.selector.length)
                writer.writeString(1, this.selector);
            if (this.allow_unregistered_calls != false)
                writer.writeBool(2, this.allow_unregistered_calls);
            if (this.skip_service_control != false)
                writer.writeBool(3, this.skip_service_control);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsageRule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsageRule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.selector = reader.readString();
                        break;
                    case 2:
                        message.allow_unregistered_calls = reader.readBool();
                        break;
                    case 3:
                        message.skip_service_control = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsageRule {
            return UsageRule.deserialize(bytes);
        }
    }
}
