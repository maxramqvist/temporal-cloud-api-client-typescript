/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/label.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.api {
    export class LabelDescriptor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            value_type?: LabelDescriptor.ValueType;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value_type" in data && data.value_type != undefined) {
                    this.value_type = data.value_type;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, LabelDescriptor.ValueType.STRING) as LabelDescriptor.ValueType;
        }
        set value_type(value: LabelDescriptor.ValueType) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: string;
            value_type?: LabelDescriptor.ValueType;
            description?: string;
        }): LabelDescriptor {
            const message = new LabelDescriptor({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value_type != null) {
                message.value_type = data.value_type;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value_type?: LabelDescriptor.ValueType;
                description?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value_type != null) {
                data.value_type = this.value_type;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.value_type != LabelDescriptor.ValueType.STRING)
                writer.writeEnum(2, this.value_type);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LabelDescriptor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LabelDescriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value_type = reader.readEnum();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LabelDescriptor {
            return LabelDescriptor.deserialize(bytes);
        }
    }
    export namespace LabelDescriptor {
        export enum ValueType {
            STRING = 0,
            BOOL = 1,
            INT64 = 2
        }
    }
}
