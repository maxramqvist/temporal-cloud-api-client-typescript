/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: google/api/expr/conformance/v1alpha1/conformance_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../client";
import * as dependency_2 from "./../../v1alpha1/checked";
import * as dependency_3 from "./../../v1alpha1/eval";
import * as dependency_4 from "./../../v1alpha1/syntax";
import * as dependency_5 from "./../../../../rpc/status";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace google.api.expr.conformance.v1alpha1 {
    export class ParseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cel_source?: string;
            syntax_version?: string;
            source_location?: string;
            disable_macros?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cel_source" in data && data.cel_source != undefined) {
                    this.cel_source = data.cel_source;
                }
                if ("syntax_version" in data && data.syntax_version != undefined) {
                    this.syntax_version = data.syntax_version;
                }
                if ("source_location" in data && data.source_location != undefined) {
                    this.source_location = data.source_location;
                }
                if ("disable_macros" in data && data.disable_macros != undefined) {
                    this.disable_macros = data.disable_macros;
                }
            }
        }
        get cel_source() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set cel_source(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get syntax_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set syntax_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set source_location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get disable_macros() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set disable_macros(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            cel_source?: string;
            syntax_version?: string;
            source_location?: string;
            disable_macros?: boolean;
        }): ParseRequest {
            const message = new ParseRequest({});
            if (data.cel_source != null) {
                message.cel_source = data.cel_source;
            }
            if (data.syntax_version != null) {
                message.syntax_version = data.syntax_version;
            }
            if (data.source_location != null) {
                message.source_location = data.source_location;
            }
            if (data.disable_macros != null) {
                message.disable_macros = data.disable_macros;
            }
            return message;
        }
        toObject() {
            const data: {
                cel_source?: string;
                syntax_version?: string;
                source_location?: string;
                disable_macros?: boolean;
            } = {};
            if (this.cel_source != null) {
                data.cel_source = this.cel_source;
            }
            if (this.syntax_version != null) {
                data.syntax_version = this.syntax_version;
            }
            if (this.source_location != null) {
                data.source_location = this.source_location;
            }
            if (this.disable_macros != null) {
                data.disable_macros = this.disable_macros;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cel_source.length)
                writer.writeString(1, this.cel_source);
            if (this.syntax_version.length)
                writer.writeString(2, this.syntax_version);
            if (this.source_location.length)
                writer.writeString(3, this.source_location);
            if (this.disable_macros != false)
                writer.writeBool(4, this.disable_macros);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cel_source = reader.readString();
                        break;
                    case 2:
                        message.syntax_version = reader.readString();
                        break;
                    case 3:
                        message.source_location = reader.readString();
                        break;
                    case 4:
                        message.disable_macros = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParseRequest {
            return ParseRequest.deserialize(bytes);
        }
    }
    export class ParseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parsed_expr?: dependency_4.google.api.expr.v1alpha1.ParsedExpr;
            issues?: dependency_5.google.rpc.Status[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parsed_expr" in data && data.parsed_expr != undefined) {
                    this.parsed_expr = data.parsed_expr;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
            }
        }
        get parsed_expr() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.expr.v1alpha1.ParsedExpr, 1) as dependency_4.google.api.expr.v1alpha1.ParsedExpr;
        }
        set parsed_expr(value: dependency_4.google.api.expr.v1alpha1.ParsedExpr) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_parsed_expr() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.rpc.Status, 2) as dependency_5.google.rpc.Status[];
        }
        set issues(value: dependency_5.google.rpc.Status[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
            issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
        }): ParseResponse {
            const message = new ParseResponse({});
            if (data.parsed_expr != null) {
                message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.fromObject(data.parsed_expr);
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.google.rpc.Status.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
                issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
            } = {};
            if (this.parsed_expr != null) {
                data.parsed_expr = this.parsed_expr.toObject();
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.google.rpc.Status) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_parsed_expr)
                writer.writeMessage(1, this.parsed_expr, () => this.parsed_expr.serialize(writer));
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.google.rpc.Status) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.parsed_expr, () => message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.google.rpc.Status.deserialize(reader), dependency_5.google.rpc.Status));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParseResponse {
            return ParseResponse.deserialize(bytes);
        }
    }
    export class CheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parsed_expr?: dependency_4.google.api.expr.v1alpha1.ParsedExpr;
            type_env?: dependency_2.google.api.expr.v1alpha1.Decl[];
            container?: string;
            no_std_env?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parsed_expr" in data && data.parsed_expr != undefined) {
                    this.parsed_expr = data.parsed_expr;
                }
                if ("type_env" in data && data.type_env != undefined) {
                    this.type_env = data.type_env;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
                if ("no_std_env" in data && data.no_std_env != undefined) {
                    this.no_std_env = data.no_std_env;
                }
            }
        }
        get parsed_expr() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.expr.v1alpha1.ParsedExpr, 1) as dependency_4.google.api.expr.v1alpha1.ParsedExpr;
        }
        set parsed_expr(value: dependency_4.google.api.expr.v1alpha1.ParsedExpr) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_parsed_expr() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type_env() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.google.api.expr.v1alpha1.Decl, 2) as dependency_2.google.api.expr.v1alpha1.Decl[];
        }
        set type_env(value: dependency_2.google.api.expr.v1alpha1.Decl[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get no_std_env() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set no_std_env(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
            type_env?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.Decl.prototype.toObject>[];
            container?: string;
            no_std_env?: boolean;
        }): CheckRequest {
            const message = new CheckRequest({});
            if (data.parsed_expr != null) {
                message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.fromObject(data.parsed_expr);
            }
            if (data.type_env != null) {
                message.type_env = data.type_env.map(item => dependency_2.google.api.expr.v1alpha1.Decl.fromObject(item));
            }
            if (data.container != null) {
                message.container = data.container;
            }
            if (data.no_std_env != null) {
                message.no_std_env = data.no_std_env;
            }
            return message;
        }
        toObject() {
            const data: {
                parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
                type_env?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.Decl.prototype.toObject>[];
                container?: string;
                no_std_env?: boolean;
            } = {};
            if (this.parsed_expr != null) {
                data.parsed_expr = this.parsed_expr.toObject();
            }
            if (this.type_env != null) {
                data.type_env = this.type_env.map((item: dependency_2.google.api.expr.v1alpha1.Decl) => item.toObject());
            }
            if (this.container != null) {
                data.container = this.container;
            }
            if (this.no_std_env != null) {
                data.no_std_env = this.no_std_env;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_parsed_expr)
                writer.writeMessage(1, this.parsed_expr, () => this.parsed_expr.serialize(writer));
            if (this.type_env.length)
                writer.writeRepeatedMessage(2, this.type_env, (item: dependency_2.google.api.expr.v1alpha1.Decl) => item.serialize(writer));
            if (this.container.length)
                writer.writeString(3, this.container);
            if (this.no_std_env != false)
                writer.writeBool(4, this.no_std_env);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.parsed_expr, () => message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.type_env, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.google.api.expr.v1alpha1.Decl.deserialize(reader), dependency_2.google.api.expr.v1alpha1.Decl));
                        break;
                    case 3:
                        message.container = reader.readString();
                        break;
                    case 4:
                        message.no_std_env = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckRequest {
            return CheckRequest.deserialize(bytes);
        }
    }
    export class CheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            checked_expr?: dependency_2.google.api.expr.v1alpha1.CheckedExpr;
            issues?: dependency_5.google.rpc.Status[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("checked_expr" in data && data.checked_expr != undefined) {
                    this.checked_expr = data.checked_expr;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
            }
        }
        get checked_expr() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.api.expr.v1alpha1.CheckedExpr, 1) as dependency_2.google.api.expr.v1alpha1.CheckedExpr;
        }
        set checked_expr(value: dependency_2.google.api.expr.v1alpha1.CheckedExpr) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_checked_expr() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.rpc.Status, 2) as dependency_5.google.rpc.Status[];
        }
        set issues(value: dependency_5.google.rpc.Status[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            checked_expr?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.CheckedExpr.prototype.toObject>;
            issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
        }): CheckResponse {
            const message = new CheckResponse({});
            if (data.checked_expr != null) {
                message.checked_expr = dependency_2.google.api.expr.v1alpha1.CheckedExpr.fromObject(data.checked_expr);
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.google.rpc.Status.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                checked_expr?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.CheckedExpr.prototype.toObject>;
                issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
            } = {};
            if (this.checked_expr != null) {
                data.checked_expr = this.checked_expr.toObject();
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.google.rpc.Status) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_checked_expr)
                writer.writeMessage(1, this.checked_expr, () => this.checked_expr.serialize(writer));
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.google.rpc.Status) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.checked_expr, () => message.checked_expr = dependency_2.google.api.expr.v1alpha1.CheckedExpr.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.google.rpc.Status.deserialize(reader), dependency_5.google.rpc.Status));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckResponse {
            return CheckResponse.deserialize(bytes);
        }
    }
    export class EvalRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            bindings?: Map<string, dependency_3.google.api.expr.v1alpha1.ExprValue>;
            container?: string;
        } & (({
            parsed_expr?: dependency_4.google.api.expr.v1alpha1.ParsedExpr;
            checked_expr?: never;
        } | {
            parsed_expr?: never;
            checked_expr?: dependency_2.google.api.expr.v1alpha1.CheckedExpr;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parsed_expr" in data && data.parsed_expr != undefined) {
                    this.parsed_expr = data.parsed_expr;
                }
                if ("checked_expr" in data && data.checked_expr != undefined) {
                    this.checked_expr = data.checked_expr;
                }
                if ("bindings" in data && data.bindings != undefined) {
                    this.bindings = data.bindings;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
            }
            if (!this.bindings)
                this.bindings = new Map();
        }
        get parsed_expr() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.api.expr.v1alpha1.ParsedExpr, 1) as dependency_4.google.api.expr.v1alpha1.ParsedExpr;
        }
        set parsed_expr(value: dependency_4.google.api.expr.v1alpha1.ParsedExpr) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_parsed_expr() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get checked_expr() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.api.expr.v1alpha1.CheckedExpr, 2) as dependency_2.google.api.expr.v1alpha1.CheckedExpr;
        }
        set checked_expr(value: dependency_2.google.api.expr.v1alpha1.CheckedExpr) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_checked_expr() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get bindings() {
            return pb_1.Message.getField(this, 3) as any as Map<string, dependency_3.google.api.expr.v1alpha1.ExprValue>;
        }
        set bindings(value: Map<string, dependency_3.google.api.expr.v1alpha1.ExprValue>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get expr_kind() {
            const cases: {
                [index: number]: "none" | "parsed_expr" | "checked_expr";
            } = {
                0: "none",
                1: "parsed_expr",
                2: "checked_expr"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
            checked_expr?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.CheckedExpr.prototype.toObject>;
            bindings?: {
                [key: string]: ReturnType<typeof dependency_3.google.api.expr.v1alpha1.ExprValue.prototype.toObject>;
            };
            container?: string;
        }): EvalRequest {
            const message = new EvalRequest({});
            if (data.parsed_expr != null) {
                message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.fromObject(data.parsed_expr);
            }
            if (data.checked_expr != null) {
                message.checked_expr = dependency_2.google.api.expr.v1alpha1.CheckedExpr.fromObject(data.checked_expr);
            }
            if (typeof data.bindings == "object") {
                message.bindings = new Map(Object.entries(data.bindings).map(([key, value]) => [key, dependency_3.google.api.expr.v1alpha1.ExprValue.fromObject(value)]));
            }
            if (data.container != null) {
                message.container = data.container;
            }
            return message;
        }
        toObject() {
            const data: {
                parsed_expr?: ReturnType<typeof dependency_4.google.api.expr.v1alpha1.ParsedExpr.prototype.toObject>;
                checked_expr?: ReturnType<typeof dependency_2.google.api.expr.v1alpha1.CheckedExpr.prototype.toObject>;
                bindings?: {
                    [key: string]: ReturnType<typeof dependency_3.google.api.expr.v1alpha1.ExprValue.prototype.toObject>;
                };
                container?: string;
            } = {};
            if (this.parsed_expr != null) {
                data.parsed_expr = this.parsed_expr.toObject();
            }
            if (this.checked_expr != null) {
                data.checked_expr = this.checked_expr.toObject();
            }
            if (this.bindings != null) {
                data.bindings = (Object.fromEntries)((Array.from)(this.bindings).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.container != null) {
                data.container = this.container;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_parsed_expr)
                writer.writeMessage(1, this.parsed_expr, () => this.parsed_expr.serialize(writer));
            if (this.has_checked_expr)
                writer.writeMessage(2, this.checked_expr, () => this.checked_expr.serialize(writer));
            for (const [key, value] of this.bindings) {
                writer.writeMessage(3, this.bindings, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.container.length)
                writer.writeString(4, this.container);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EvalRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvalRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.parsed_expr, () => message.parsed_expr = dependency_4.google.api.expr.v1alpha1.ParsedExpr.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.checked_expr, () => message.checked_expr = dependency_2.google.api.expr.v1alpha1.CheckedExpr.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.bindings as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.google.api.expr.v1alpha1.ExprValue.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 4:
                        message.container = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EvalRequest {
            return EvalRequest.deserialize(bytes);
        }
    }
    export class EvalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: dependency_3.google.api.expr.v1alpha1.ExprValue;
            issues?: dependency_5.google.rpc.Status[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
            }
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.api.expr.v1alpha1.ExprValue, 1) as dependency_3.google.api.expr.v1alpha1.ExprValue;
        }
        set result(value: dependency_3.google.api.expr.v1alpha1.ExprValue) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.rpc.Status, 2) as dependency_5.google.rpc.Status[];
        }
        set issues(value: dependency_5.google.rpc.Status[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            result?: ReturnType<typeof dependency_3.google.api.expr.v1alpha1.ExprValue.prototype.toObject>;
            issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
        }): EvalResponse {
            const message = new EvalResponse({});
            if (data.result != null) {
                message.result = dependency_3.google.api.expr.v1alpha1.ExprValue.fromObject(data.result);
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.google.rpc.Status.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                result?: ReturnType<typeof dependency_3.google.api.expr.v1alpha1.ExprValue.prototype.toObject>;
                issues?: ReturnType<typeof dependency_5.google.rpc.Status.prototype.toObject>[];
            } = {};
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.google.rpc.Status) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result)
                writer.writeMessage(1, this.result, () => this.result.serialize(writer));
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.google.rpc.Status) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EvalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result, () => message.result = dependency_3.google.api.expr.v1alpha1.ExprValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.google.rpc.Status.deserialize(reader), dependency_5.google.rpc.Status));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EvalResponse {
            return EvalResponse.deserialize(bytes);
        }
    }
    export class SourcePosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
            }
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set line(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get column() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set column(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }): SourcePosition {
            const message = new SourcePosition({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.column != null) {
                message.column = data.column;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                offset?: number;
                line?: number;
                column?: number;
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.column != null) {
                data.column = this.column;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(1, this.location);
            if (this.offset != 0)
                writer.writeInt32(2, this.offset);
            if (this.line != 0)
                writer.writeInt32(3, this.line);
            if (this.column != 0)
                writer.writeInt32(4, this.column);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SourcePosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SourcePosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.location = reader.readString();
                        break;
                    case 2:
                        message.offset = reader.readInt32();
                        break;
                    case 3:
                        message.line = reader.readInt32();
                        break;
                    case 4:
                        message.column = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SourcePosition {
            return SourcePosition.deserialize(bytes);
        }
    }
    export class IssueDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            severity?: IssueDetails.Severity;
            position?: SourcePosition;
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get severity() {
            return pb_1.Message.getFieldWithDefault(this, 1, IssueDetails.Severity.SEVERITY_UNSPECIFIED) as IssueDetails.Severity;
        }
        set severity(value: IssueDetails.Severity) {
            pb_1.Message.setField(this, 1, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, SourcePosition, 2) as SourcePosition;
        }
        set position(value: SourcePosition) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            severity?: IssueDetails.Severity;
            position?: ReturnType<typeof SourcePosition.prototype.toObject>;
            id?: number;
        }): IssueDetails {
            const message = new IssueDetails({});
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.position != null) {
                message.position = SourcePosition.fromObject(data.position);
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                severity?: IssueDetails.Severity;
                position?: ReturnType<typeof SourcePosition.prototype.toObject>;
                id?: number;
            } = {};
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.severity != IssueDetails.Severity.SEVERITY_UNSPECIFIED)
                writer.writeEnum(1, this.severity);
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (this.id != 0)
                writer.writeInt64(3, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.severity = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = SourcePosition.deserialize(reader));
                        break;
                    case 3:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueDetails {
            return IssueDetails.deserialize(bytes);
        }
    }
    export namespace IssueDetails {
        export enum Severity {
            SEVERITY_UNSPECIFIED = 0,
            DEPRECATION = 1,
            WARNING = 2,
            ERROR = 3
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedConformanceServiceService {
        static definition = {
            Parse: {
                path: "/google.api.expr.conformance.v1alpha1.ConformanceService/Parse",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ParseRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ParseRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ParseResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ParseResponse.deserialize(new Uint8Array(bytes))
            },
            Check: {
                path: "/google.api.expr.conformance.v1alpha1.ConformanceService/Check",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckResponse.deserialize(new Uint8Array(bytes))
            },
            Eval: {
                path: "/google.api.expr.conformance.v1alpha1.ConformanceService/Eval",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EvalRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EvalRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EvalResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EvalResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Parse(call: grpc_1.ServerUnaryCall<ParseRequest, ParseResponse>, callback: grpc_1.sendUnaryData<ParseResponse>): void;
        abstract Check(call: grpc_1.ServerUnaryCall<CheckRequest, CheckResponse>, callback: grpc_1.sendUnaryData<CheckResponse>): void;
        abstract Eval(call: grpc_1.ServerUnaryCall<EvalRequest, EvalResponse>, callback: grpc_1.sendUnaryData<EvalResponse>): void;
    }
    export class ConformanceServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedConformanceServiceService.definition, "ConformanceService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Parse: GrpcUnaryServiceInterface<ParseRequest, ParseResponse> = (message: ParseRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ParseResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ParseResponse>, callback?: grpc_1.requestCallback<ParseResponse>): grpc_1.ClientUnaryCall => {
            return super.Parse(message, metadata, options, callback);
        };
        Check: GrpcUnaryServiceInterface<CheckRequest, CheckResponse> = (message: CheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckResponse>, callback?: grpc_1.requestCallback<CheckResponse>): grpc_1.ClientUnaryCall => {
            return super.Check(message, metadata, options, callback);
        };
        Eval: GrpcUnaryServiceInterface<EvalRequest, EvalResponse> = (message: EvalRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EvalResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EvalResponse>, callback?: grpc_1.requestCallback<EvalResponse>): grpc_1.ClientUnaryCall => {
            return super.Eval(message, metadata, options, callback);
        };
    }
}
