/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: temporal/api/cloud/cloudservice/v1/request_response.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../operation/v1/message";
import * as dependency_2 from "./../../identity/v1/message";
import * as dependency_3 from "./../../namespace/v1/message";
import * as dependency_4 from "./../../region/v1/message";
import * as pb_1 from "google-protobuf";
export namespace temporal.api.cloud.cloudservice.v1 {
    export class GetUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
            email?: string;
            namespace?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
            email?: string;
            namespace?: string;
        }): GetUsersRequest {
            const message = new GetUsersRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
                email?: string;
                namespace?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.namespace.length)
                writer.writeString(4, this.namespace);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.namespace = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersRequest {
            return GetUsersRequest.deserialize(bytes);
        }
    }
    export class GetUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: dependency_2.temporal.api.cloud.identity.v1.User[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.User, 1) as dependency_2.temporal.api.cloud.identity.v1.User[];
        }
        set users(value: dependency_2.temporal.api.cloud.identity.v1.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.User.prototype.toObject>[];
            next_page_token?: string;
        }): GetUsersResponse {
            const message = new GetUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => dependency_2.temporal.api.cloud.identity.v1.User.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.User.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: dependency_2.temporal.api.cloud.identity.v1.User) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: dependency_2.temporal.api.cloud.identity.v1.User) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.temporal.api.cloud.identity.v1.User.deserialize(reader), dependency_2.temporal.api.cloud.identity.v1.User));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersResponse {
            return GetUsersResponse.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: string;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: dependency_2.temporal.api.cloud.identity.v1.User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.User, 1) as dependency_2.temporal.api.cloud.identity.v1.User;
        }
        set user(value: dependency_2.temporal.api.cloud.identity.v1.User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.User.prototype.toObject>;
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.user != null) {
                message.user = dependency_2.temporal.api.cloud.identity.v1.User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = dependency_2.temporal.api.cloud.identity.v1.User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
    export class CreateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: dependency_2.temporal.api.cloud.identity.v1.UserSpec;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserSpec, 1) as dependency_2.temporal.api.cloud.identity.v1.UserSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.UserSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserSpec.prototype.toObject>;
            async_operation_id?: string;
        }): CreateUserRequest {
            const message = new CreateUserRequest({});
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.UserSpec.fromObject(data.spec);
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserSpec.prototype.toObject>;
                async_operation_id?: string;
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.async_operation_id.length)
                writer.writeString(2, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.UserSpec.deserialize(reader));
                        break;
                    case 2:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
            return CreateUserRequest.deserialize(bytes);
        }
    }
    export class CreateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 2) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user_id?: string;
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): CreateUserResponse {
            const message = new CreateUserResponse({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_async_operation)
                writer.writeMessage(2, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserResponse {
            return CreateUserResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            spec?: dependency_2.temporal.api.cloud.identity.v1.UserSpec;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserSpec, 2) as dependency_2.temporal.api.cloud.identity.v1.UserSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.UserSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            user_id?: string;
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserSpec.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.UserSpec.fromObject(data.spec);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserSpec.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.UserSpec.deserialize(reader));
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): UpdateUserResponse {
            const message = new UpdateUserResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserResponse {
            return UpdateUserResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            user_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): DeleteUserResponse {
            const message = new DeleteUserResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
            return DeleteUserResponse.deserialize(bytes);
        }
    }
    export class SetUserNamespaceAccessRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            user_id?: string;
            access?: dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("access" in data && data.access != undefined) {
                    this.access = data.access;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess, 3) as dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess;
        }
        set access(value: dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_access() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            namespace?: string;
            user_id?: string;
            access?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): SetUserNamespaceAccessRequest {
            const message = new SetUserNamespaceAccessRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.access != null) {
                message.access = dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.fromObject(data.access);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                user_id?: string;
                access?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.access != null) {
                data.access = this.access.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.has_access)
                writer.writeMessage(3, this.access, () => this.access.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(4, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(5, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUserNamespaceAccessRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUserNamespaceAccessRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.access, () => message.access = dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.deserialize(reader));
                        break;
                    case 4:
                        message.resource_version = reader.readString();
                        break;
                    case 5:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUserNamespaceAccessRequest {
            return SetUserNamespaceAccessRequest.deserialize(bytes);
        }
    }
    export class SetUserNamespaceAccessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): SetUserNamespaceAccessResponse {
            const message = new SetUserNamespaceAccessResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUserNamespaceAccessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUserNamespaceAccessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUserNamespaceAccessResponse {
            return SetUserNamespaceAccessResponse.deserialize(bytes);
        }
    }
    export class GetAsyncOperationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            async_operation_id?: string;
        }): GetAsyncOperationRequest {
            const message = new GetAsyncOperationRequest({});
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation_id?: string;
            } = {};
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.async_operation_id.length)
                writer.writeString(1, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAsyncOperationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAsyncOperationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAsyncOperationRequest {
            return GetAsyncOperationRequest.deserialize(bytes);
        }
    }
    export class GetAsyncOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): GetAsyncOperationResponse {
            const message = new GetAsyncOperationResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAsyncOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAsyncOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAsyncOperationResponse {
            return GetAsyncOperationResponse.deserialize(bytes);
        }
    }
    export class CreateNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec, 2) as dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec;
        }
        set spec(value: dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.prototype.toObject>;
            async_operation_id?: string;
        }): CreateNamespaceRequest {
            const message = new CreateNamespaceRequest({});
            if (data.spec != null) {
                message.spec = dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.fromObject(data.spec);
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.prototype.toObject>;
                async_operation_id?: string;
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.deserialize(reader));
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNamespaceRequest {
            return CreateNamespaceRequest.deserialize(bytes);
        }
    }
    export class CreateNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 2) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            namespace?: string;
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): CreateNamespaceResponse {
            const message = new CreateNamespaceResponse({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.has_async_operation)
                writer.writeMessage(2, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNamespaceResponse {
            return CreateNamespaceResponse.deserialize(bytes);
        }
    }
    export class GetNamespacesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
            name?: string;
        }): GetNamespacesRequest {
            const message = new GetNamespacesRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
                name?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespacesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespacesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespacesRequest {
            return GetNamespacesRequest.deserialize(bytes);
        }
    }
    export class GetNamespacesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespaces?: dependency_3.temporal.api.cloud.namespace.v1.Namespace[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespaces" in data && data.namespaces != undefined) {
                    this.namespaces = data.namespaces;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.temporal.api.cloud.namespace.v1.Namespace, 1) as dependency_3.temporal.api.cloud.namespace.v1.Namespace[];
        }
        set namespaces(value: dependency_3.temporal.api.cloud.namespace.v1.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            namespaces?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.Namespace.prototype.toObject>[];
            next_page_token?: string;
        }): GetNamespacesResponse {
            const message = new GetNamespacesResponse({});
            if (data.namespaces != null) {
                message.namespaces = data.namespaces.map(item => dependency_3.temporal.api.cloud.namespace.v1.Namespace.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                namespaces?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.Namespace.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.namespaces != null) {
                data.namespaces = this.namespaces.map((item: dependency_3.temporal.api.cloud.namespace.v1.Namespace) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespaces.length)
                writer.writeRepeatedMessage(1, this.namespaces, (item: dependency_3.temporal.api.cloud.namespace.v1.Namespace) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespacesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespacesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.temporal.api.cloud.namespace.v1.Namespace.deserialize(reader), dependency_3.temporal.api.cloud.namespace.v1.Namespace));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespacesResponse {
            return GetNamespacesResponse.deserialize(bytes);
        }
    }
    export class GetNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            namespace?: string;
        }): GetNamespaceRequest {
            const message = new GetNamespaceRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespaceRequest {
            return GetNamespaceRequest.deserialize(bytes);
        }
    }
    export class GetNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: dependency_3.temporal.api.cloud.namespace.v1.Namespace;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getWrapperField(this, dependency_3.temporal.api.cloud.namespace.v1.Namespace, 1) as dependency_3.temporal.api.cloud.namespace.v1.Namespace;
        }
        set namespace(value: dependency_3.temporal.api.cloud.namespace.v1.Namespace) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_namespace() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            namespace?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.Namespace.prototype.toObject>;
        }): GetNamespaceResponse {
            const message = new GetNamespaceResponse({});
            if (data.namespace != null) {
                message.namespace = dependency_3.temporal.api.cloud.namespace.v1.Namespace.fromObject(data.namespace);
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.Namespace.prototype.toObject>;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_namespace)
                writer.writeMessage(1, this.namespace, () => this.namespace.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.namespace, () => message.namespace = dependency_3.temporal.api.cloud.namespace.v1.Namespace.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespaceResponse {
            return GetNamespaceResponse.deserialize(bytes);
        }
    }
    export class UpdateNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            spec?: dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec, 2) as dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec;
        }
        set spec(value: dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            namespace?: string;
            spec?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): UpdateNamespaceRequest {
            const message = new UpdateNamespaceRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.spec != null) {
                message.spec = dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.fromObject(data.spec);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                spec?: ReturnType<typeof dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_3.temporal.api.cloud.namespace.v1.NamespaceSpec.deserialize(reader));
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNamespaceRequest {
            return UpdateNamespaceRequest.deserialize(bytes);
        }
    }
    export class UpdateNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): UpdateNamespaceResponse {
            const message = new UpdateNamespaceResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNamespaceResponse {
            return UpdateNamespaceResponse.deserialize(bytes);
        }
    }
    export class RenameCustomSearchAttributeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            existing_custom_search_attribute_name?: string;
            new_custom_search_attribute_name?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("existing_custom_search_attribute_name" in data && data.existing_custom_search_attribute_name != undefined) {
                    this.existing_custom_search_attribute_name = data.existing_custom_search_attribute_name;
                }
                if ("new_custom_search_attribute_name" in data && data.new_custom_search_attribute_name != undefined) {
                    this.new_custom_search_attribute_name = data.new_custom_search_attribute_name;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get existing_custom_search_attribute_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set existing_custom_search_attribute_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_custom_search_attribute_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set new_custom_search_attribute_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            namespace?: string;
            existing_custom_search_attribute_name?: string;
            new_custom_search_attribute_name?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): RenameCustomSearchAttributeRequest {
            const message = new RenameCustomSearchAttributeRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.existing_custom_search_attribute_name != null) {
                message.existing_custom_search_attribute_name = data.existing_custom_search_attribute_name;
            }
            if (data.new_custom_search_attribute_name != null) {
                message.new_custom_search_attribute_name = data.new_custom_search_attribute_name;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                existing_custom_search_attribute_name?: string;
                new_custom_search_attribute_name?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.existing_custom_search_attribute_name != null) {
                data.existing_custom_search_attribute_name = this.existing_custom_search_attribute_name;
            }
            if (this.new_custom_search_attribute_name != null) {
                data.new_custom_search_attribute_name = this.new_custom_search_attribute_name;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.existing_custom_search_attribute_name.length)
                writer.writeString(2, this.existing_custom_search_attribute_name);
            if (this.new_custom_search_attribute_name.length)
                writer.writeString(3, this.new_custom_search_attribute_name);
            if (this.resource_version.length)
                writer.writeString(4, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(5, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameCustomSearchAttributeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameCustomSearchAttributeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.existing_custom_search_attribute_name = reader.readString();
                        break;
                    case 3:
                        message.new_custom_search_attribute_name = reader.readString();
                        break;
                    case 4:
                        message.resource_version = reader.readString();
                        break;
                    case 5:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameCustomSearchAttributeRequest {
            return RenameCustomSearchAttributeRequest.deserialize(bytes);
        }
    }
    export class RenameCustomSearchAttributeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): RenameCustomSearchAttributeResponse {
            const message = new RenameCustomSearchAttributeResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameCustomSearchAttributeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameCustomSearchAttributeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameCustomSearchAttributeResponse {
            return RenameCustomSearchAttributeResponse.deserialize(bytes);
        }
    }
    export class DeleteNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            namespace?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): DeleteNamespaceRequest {
            const message = new DeleteNamespaceRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNamespaceRequest {
            return DeleteNamespaceRequest.deserialize(bytes);
        }
    }
    export class DeleteNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): DeleteNamespaceResponse {
            const message = new DeleteNamespaceResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNamespaceResponse {
            return DeleteNamespaceResponse.deserialize(bytes);
        }
    }
    export class FailoverNamespaceRegionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            region?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            namespace?: string;
            region?: string;
            async_operation_id?: string;
        }): FailoverNamespaceRegionRequest {
            const message = new FailoverNamespaceRegionRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                region?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.region.length)
                writer.writeString(2, this.region);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FailoverNamespaceRegionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FailoverNamespaceRegionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.region = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FailoverNamespaceRegionRequest {
            return FailoverNamespaceRegionRequest.deserialize(bytes);
        }
    }
    export class FailoverNamespaceRegionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): FailoverNamespaceRegionResponse {
            const message = new FailoverNamespaceRegionResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FailoverNamespaceRegionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FailoverNamespaceRegionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FailoverNamespaceRegionResponse {
            return FailoverNamespaceRegionResponse.deserialize(bytes);
        }
    }
    export class AddNamespaceRegionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            region?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            namespace?: string;
            region?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): AddNamespaceRegionRequest {
            const message = new AddNamespaceRegionRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                region?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.region.length)
                writer.writeString(2, this.region);
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddNamespaceRegionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddNamespaceRegionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.region = reader.readString();
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddNamespaceRegionRequest {
            return AddNamespaceRegionRequest.deserialize(bytes);
        }
    }
    export class AddNamespaceRegionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): AddNamespaceRegionResponse {
            const message = new AddNamespaceRegionResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddNamespaceRegionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddNamespaceRegionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddNamespaceRegionResponse {
            return AddNamespaceRegionResponse.deserialize(bytes);
        }
    }
    export class GetRegionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetRegionsRequest {
            const message = new GetRegionsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegionsRequest {
            return GetRegionsRequest.deserialize(bytes);
        }
    }
    export class GetRegionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            regions?: dependency_4.temporal.api.cloud.region.v1.Region[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("regions" in data && data.regions != undefined) {
                    this.regions = data.regions;
                }
            }
        }
        get regions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.temporal.api.cloud.region.v1.Region, 1) as dependency_4.temporal.api.cloud.region.v1.Region[];
        }
        set regions(value: dependency_4.temporal.api.cloud.region.v1.Region[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            regions?: ReturnType<typeof dependency_4.temporal.api.cloud.region.v1.Region.prototype.toObject>[];
        }): GetRegionsResponse {
            const message = new GetRegionsResponse({});
            if (data.regions != null) {
                message.regions = data.regions.map(item => dependency_4.temporal.api.cloud.region.v1.Region.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                regions?: ReturnType<typeof dependency_4.temporal.api.cloud.region.v1.Region.prototype.toObject>[];
            } = {};
            if (this.regions != null) {
                data.regions = this.regions.map((item: dependency_4.temporal.api.cloud.region.v1.Region) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.regions.length)
                writer.writeRepeatedMessage(1, this.regions, (item: dependency_4.temporal.api.cloud.region.v1.Region) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.regions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.temporal.api.cloud.region.v1.Region.deserialize(reader), dependency_4.temporal.api.cloud.region.v1.Region));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegionsResponse {
            return GetRegionsResponse.deserialize(bytes);
        }
    }
    export class GetRegionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            region?: string;
        }): GetRegionRequest {
            const message = new GetRegionRequest({});
            if (data.region != null) {
                message.region = data.region;
            }
            return message;
        }
        toObject() {
            const data: {
                region?: string;
            } = {};
            if (this.region != null) {
                data.region = this.region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.region.length)
                writer.writeString(1, this.region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegionRequest {
            return GetRegionRequest.deserialize(bytes);
        }
    }
    export class GetRegionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            region?: dependency_4.temporal.api.cloud.region.v1.Region;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get region() {
            return pb_1.Message.getWrapperField(this, dependency_4.temporal.api.cloud.region.v1.Region, 1) as dependency_4.temporal.api.cloud.region.v1.Region;
        }
        set region(value: dependency_4.temporal.api.cloud.region.v1.Region) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_region() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            region?: ReturnType<typeof dependency_4.temporal.api.cloud.region.v1.Region.prototype.toObject>;
        }): GetRegionResponse {
            const message = new GetRegionResponse({});
            if (data.region != null) {
                message.region = dependency_4.temporal.api.cloud.region.v1.Region.fromObject(data.region);
            }
            return message;
        }
        toObject() {
            const data: {
                region?: ReturnType<typeof dependency_4.temporal.api.cloud.region.v1.Region.prototype.toObject>;
            } = {};
            if (this.region != null) {
                data.region = this.region.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_region)
                writer.writeMessage(1, this.region, () => this.region.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRegionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRegionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.region, () => message.region = dependency_4.temporal.api.cloud.region.v1.Region.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRegionResponse {
            return GetRegionResponse.deserialize(bytes);
        }
    }
    export class GetApiKeysRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
            owner_id?: string;
            owner_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("owner_type" in data && data.owner_type != undefined) {
                    this.owner_type = data.owner_type;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set owner_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
            owner_id?: string;
            owner_type?: string;
        }): GetApiKeysRequest {
            const message = new GetApiKeysRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.owner_type != null) {
                message.owner_type = data.owner_type;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
                owner_id?: string;
                owner_type?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.owner_type != null) {
                data.owner_type = this.owner_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.owner_id.length)
                writer.writeString(3, this.owner_id);
            if (this.owner_type.length)
                writer.writeString(4, this.owner_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeysRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.owner_id = reader.readString();
                        break;
                    case 4:
                        message.owner_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeysRequest {
            return GetApiKeysRequest.deserialize(bytes);
        }
    }
    export class GetApiKeysResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_keys?: dependency_2.temporal.api.cloud.identity.v1.ApiKey[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_keys" in data && data.api_keys != undefined) {
                    this.api_keys = data.api_keys;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get api_keys() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ApiKey, 1) as dependency_2.temporal.api.cloud.identity.v1.ApiKey[];
        }
        set api_keys(value: dependency_2.temporal.api.cloud.identity.v1.ApiKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            api_keys?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKey.prototype.toObject>[];
            next_page_token?: string;
        }): GetApiKeysResponse {
            const message = new GetApiKeysResponse({});
            if (data.api_keys != null) {
                message.api_keys = data.api_keys.map(item => dependency_2.temporal.api.cloud.identity.v1.ApiKey.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                api_keys?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKey.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.api_keys != null) {
                data.api_keys = this.api_keys.map((item: dependency_2.temporal.api.cloud.identity.v1.ApiKey) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.api_keys.length)
                writer.writeRepeatedMessage(1, this.api_keys, (item: dependency_2.temporal.api.cloud.identity.v1.ApiKey) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.api_keys, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.temporal.api.cloud.identity.v1.ApiKey.deserialize(reader), dependency_2.temporal.api.cloud.identity.v1.ApiKey));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeysResponse {
            return GetApiKeysResponse.deserialize(bytes);
        }
    }
    export class GetApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key_id?: string;
        }): GetApiKeyRequest {
            const message = new GetApiKeyRequest({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeyRequest {
            return GetApiKeyRequest.deserialize(bytes);
        }
    }
    export class GetApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            api_key?: dependency_2.temporal.api.cloud.identity.v1.ApiKey;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
            }
        }
        get api_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ApiKey, 1) as dependency_2.temporal.api.cloud.identity.v1.ApiKey;
        }
        set api_key(value: dependency_2.temporal.api.cloud.identity.v1.ApiKey) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_api_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            api_key?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKey.prototype.toObject>;
        }): GetApiKeyResponse {
            const message = new GetApiKeyResponse({});
            if (data.api_key != null) {
                message.api_key = dependency_2.temporal.api.cloud.identity.v1.ApiKey.fromObject(data.api_key);
            }
            return message;
        }
        toObject() {
            const data: {
                api_key?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKey.prototype.toObject>;
            } = {};
            if (this.api_key != null) {
                data.api_key = this.api_key.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_api_key)
                writer.writeMessage(1, this.api_key, () => this.api_key.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.api_key, () => message.api_key = dependency_2.temporal.api.cloud.identity.v1.ApiKey.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApiKeyResponse {
            return GetApiKeyResponse.deserialize(bytes);
        }
    }
    export class CreateApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec, 1) as dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.prototype.toObject>;
            async_operation_id?: string;
        }): CreateApiKeyRequest {
            const message = new CreateApiKeyRequest({});
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.fromObject(data.spec);
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.prototype.toObject>;
                async_operation_id?: string;
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.async_operation_id.length)
                writer.writeString(2, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.deserialize(reader));
                        break;
                    case 2:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyRequest {
            return CreateApiKeyRequest.deserialize(bytes);
        }
    }
    export class CreateApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_id?: string;
            token?: string;
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 3) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            key_id?: string;
            token?: string;
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): CreateApiKeyResponse {
            const message = new CreateApiKeyResponse({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
                token?: string;
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.has_async_operation)
                writer.writeMessage(3, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyResponse {
            return CreateApiKeyResponse.deserialize(bytes);
        }
    }
    export class UpdateApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_id?: string;
            spec?: dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec, 2) as dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key_id?: string;
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): UpdateApiKeyRequest {
            const message = new UpdateApiKeyRequest({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.fromObject(data.spec);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.ApiKeySpec.deserialize(reader));
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApiKeyRequest {
            return UpdateApiKeyRequest.deserialize(bytes);
        }
    }
    export class UpdateApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): UpdateApiKeyResponse {
            const message = new UpdateApiKeyResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateApiKeyResponse {
            return UpdateApiKeyResponse.deserialize(bytes);
        }
    }
    export class DeleteApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key_id" in data && data.key_id != undefined) {
                    this.key_id = data.key_id;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): DeleteApiKeyRequest {
            const message = new DeleteApiKeyRequest({});
            if (data.key_id != null) {
                message.key_id = data.key_id;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                key_id?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.key_id != null) {
                data.key_id = this.key_id;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key_id.length)
                writer.writeString(1, this.key_id);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key_id = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApiKeyRequest {
            return DeleteApiKeyRequest.deserialize(bytes);
        }
    }
    export class DeleteApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): DeleteApiKeyResponse {
            const message = new DeleteApiKeyResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApiKeyResponse {
            return DeleteApiKeyResponse.deserialize(bytes);
        }
    }
    export class GetUserGroupsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
            namespace?: string;
            group_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
            namespace?: string;
            group_name?: string;
        }): GetUserGroupsRequest {
            const message = new GetUserGroupsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
                namespace?: string;
                group_name?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (this.namespace.length)
                writer.writeString(3, this.namespace);
            if (this.group_name.length)
                writer.writeString(4, this.group_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserGroupsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserGroupsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    case 3:
                        message.namespace = reader.readString();
                        break;
                    case 4:
                        message.group_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserGroupsRequest {
            return GetUserGroupsRequest.deserialize(bytes);
        }
    }
    export class GetUserGroupsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            groups?: dependency_2.temporal.api.cloud.identity.v1.UserGroup[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserGroup, 1) as dependency_2.temporal.api.cloud.identity.v1.UserGroup[];
        }
        set groups(value: dependency_2.temporal.api.cloud.identity.v1.UserGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            groups?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroup.prototype.toObject>[];
            next_page_token?: string;
        }): GetUserGroupsResponse {
            const message = new GetUserGroupsResponse({});
            if (data.groups != null) {
                message.groups = data.groups.map(item => dependency_2.temporal.api.cloud.identity.v1.UserGroup.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                groups?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroup.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.groups != null) {
                data.groups = this.groups.map((item: dependency_2.temporal.api.cloud.identity.v1.UserGroup) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.groups.length)
                writer.writeRepeatedMessage(1, this.groups, (item: dependency_2.temporal.api.cloud.identity.v1.UserGroup) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserGroupsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserGroupsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.temporal.api.cloud.identity.v1.UserGroup.deserialize(reader), dependency_2.temporal.api.cloud.identity.v1.UserGroup));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserGroupsResponse {
            return GetUserGroupsResponse.deserialize(bytes);
        }
    }
    export class GetUserGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_id?: string;
        }): GetUserGroupRequest {
            const message = new GetUserGroupRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id.length)
                writer.writeString(1, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserGroupRequest {
            return GetUserGroupRequest.deserialize(bytes);
        }
    }
    export class GetUserGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: dependency_2.temporal.api.cloud.identity.v1.UserGroup;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
            }
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserGroup, 1) as dependency_2.temporal.api.cloud.identity.v1.UserGroup;
        }
        set group(value: dependency_2.temporal.api.cloud.identity.v1.UserGroup) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            group?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroup.prototype.toObject>;
        }): GetUserGroupResponse {
            const message = new GetUserGroupResponse({});
            if (data.group != null) {
                message.group = dependency_2.temporal.api.cloud.identity.v1.UserGroup.fromObject(data.group);
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroup.prototype.toObject>;
            } = {};
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group)
                writer.writeMessage(1, this.group, () => this.group.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => message.group = dependency_2.temporal.api.cloud.identity.v1.UserGroup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserGroupResponse {
            return GetUserGroupResponse.deserialize(bytes);
        }
    }
    export class CreateUserGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec, 1) as dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.prototype.toObject>;
            async_operation_id?: string;
        }): CreateUserGroupRequest {
            const message = new CreateUserGroupRequest({});
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.fromObject(data.spec);
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.prototype.toObject>;
                async_operation_id?: string;
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.async_operation_id.length)
                writer.writeString(2, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.deserialize(reader));
                        break;
                    case 2:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserGroupRequest {
            return CreateUserGroupRequest.deserialize(bytes);
        }
    }
    export class CreateUserGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: string;
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 2) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            group_id?: string;
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): CreateUserGroupResponse {
            const message = new CreateUserGroupResponse({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: string;
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id.length)
                writer.writeString(1, this.group_id);
            if (this.has_async_operation)
                writer.writeMessage(2, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserGroupResponse {
            return CreateUserGroupResponse.deserialize(bytes);
        }
    }
    export class UpdateUserGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: string;
            spec?: dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec, 2) as dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            group_id?: string;
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): UpdateUserGroupRequest {
            const message = new UpdateUserGroupRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.fromObject(data.spec);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: string;
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id.length)
                writer.writeString(1, this.group_id);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.UserGroupSpec.deserialize(reader));
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserGroupRequest {
            return UpdateUserGroupRequest.deserialize(bytes);
        }
    }
    export class UpdateUserGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): UpdateUserGroupResponse {
            const message = new UpdateUserGroupResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserGroupResponse {
            return UpdateUserGroupResponse.deserialize(bytes);
        }
    }
    export class DeleteUserGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): DeleteUserGroupRequest {
            const message = new DeleteUserGroupRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id.length)
                writer.writeString(1, this.group_id);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserGroupRequest {
            return DeleteUserGroupRequest.deserialize(bytes);
        }
    }
    export class DeleteUserGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): DeleteUserGroupResponse {
            const message = new DeleteUserGroupResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserGroupResponse {
            return DeleteUserGroupResponse.deserialize(bytes);
        }
    }
    export class SetUserGroupNamespaceAccessRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            group_id?: string;
            access?: dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("access" in data && data.access != undefined) {
                    this.access = data.access;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set group_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess, 3) as dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess;
        }
        set access(value: dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_access() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            namespace?: string;
            group_id?: string;
            access?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): SetUserGroupNamespaceAccessRequest {
            const message = new SetUserGroupNamespaceAccessRequest({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.access != null) {
                message.access = dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.fromObject(data.access);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                group_id?: string;
                access?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.access != null) {
                data.access = this.access.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.group_id.length)
                writer.writeString(2, this.group_id);
            if (this.has_access)
                writer.writeMessage(3, this.access, () => this.access.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(4, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(5, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUserGroupNamespaceAccessRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUserGroupNamespaceAccessRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.group_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.access, () => message.access = dependency_2.temporal.api.cloud.identity.v1.NamespaceAccess.deserialize(reader));
                        break;
                    case 4:
                        message.resource_version = reader.readString();
                        break;
                    case 5:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUserGroupNamespaceAccessRequest {
            return SetUserGroupNamespaceAccessRequest.deserialize(bytes);
        }
    }
    export class SetUserGroupNamespaceAccessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): SetUserGroupNamespaceAccessResponse {
            const message = new SetUserGroupNamespaceAccessResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUserGroupNamespaceAccessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUserGroupNamespaceAccessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUserGroupNamespaceAccessResponse {
            return SetUserGroupNamespaceAccessResponse.deserialize(bytes);
        }
    }
    export class CreateServiceAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec, 1) as dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.prototype.toObject>;
            async_operation_id?: string;
        }): CreateServiceAccountRequest {
            const message = new CreateServiceAccountRequest({});
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.fromObject(data.spec);
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.prototype.toObject>;
                async_operation_id?: string;
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.async_operation_id.length)
                writer.writeString(2, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServiceAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServiceAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.deserialize(reader));
                        break;
                    case 2:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServiceAccountRequest {
            return CreateServiceAccountRequest.deserialize(bytes);
        }
    }
    export class CreateServiceAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account_id?: string;
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account_id" in data && data.service_account_id != undefined) {
                    this.service_account_id = data.service_account_id;
                }
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get service_account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 2) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            service_account_id?: string;
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): CreateServiceAccountResponse {
            const message = new CreateServiceAccountResponse({});
            if (data.service_account_id != null) {
                message.service_account_id = data.service_account_id;
            }
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                service_account_id?: string;
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.service_account_id != null) {
                data.service_account_id = this.service_account_id;
            }
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_account_id.length)
                writer.writeString(1, this.service_account_id);
            if (this.has_async_operation)
                writer.writeMessage(2, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateServiceAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateServiceAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_account_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateServiceAccountResponse {
            return CreateServiceAccountResponse.deserialize(bytes);
        }
    }
    export class GetServiceAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account_id" in data && data.service_account_id != undefined) {
                    this.service_account_id = data.service_account_id;
                }
            }
        }
        get service_account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            service_account_id?: string;
        }): GetServiceAccountRequest {
            const message = new GetServiceAccountRequest({});
            if (data.service_account_id != null) {
                message.service_account_id = data.service_account_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_account_id?: string;
            } = {};
            if (this.service_account_id != null) {
                data.service_account_id = this.service_account_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_account_id.length)
                writer.writeString(1, this.service_account_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_account_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceAccountRequest {
            return GetServiceAccountRequest.deserialize(bytes);
        }
    }
    export class GetServiceAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account?: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account" in data && data.service_account != undefined) {
                    this.service_account = data.service_account;
                }
            }
        }
        get service_account() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ServiceAccount, 1) as dependency_2.temporal.api.cloud.identity.v1.ServiceAccount;
        }
        set service_account(value: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_service_account() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            service_account?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.prototype.toObject>;
        }): GetServiceAccountResponse {
            const message = new GetServiceAccountResponse({});
            if (data.service_account != null) {
                message.service_account = dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.fromObject(data.service_account);
            }
            return message;
        }
        toObject() {
            const data: {
                service_account?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.prototype.toObject>;
            } = {};
            if (this.service_account != null) {
                data.service_account = this.service_account.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_service_account)
                writer.writeMessage(1, this.service_account, () => this.service_account.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service_account, () => message.service_account = dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceAccountResponse {
            return GetServiceAccountResponse.deserialize(bytes);
        }
    }
    export class GetServiceAccountsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): GetServiceAccountsRequest {
            const message = new GetServiceAccountsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceAccountsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceAccountsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceAccountsRequest {
            return GetServiceAccountsRequest.deserialize(bytes);
        }
    }
    export class GetServiceAccountsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account?: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account" in data && data.service_account != undefined) {
                    this.service_account = data.service_account;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get service_account() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ServiceAccount, 1) as dependency_2.temporal.api.cloud.identity.v1.ServiceAccount[];
        }
        set service_account(value: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            service_account?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.prototype.toObject>[];
            next_page_token?: string;
        }): GetServiceAccountsResponse {
            const message = new GetServiceAccountsResponse({});
            if (data.service_account != null) {
                message.service_account = data.service_account.map(item => dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                service_account?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.service_account != null) {
                data.service_account = this.service_account.map((item: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_account.length)
                writer.writeRepeatedMessage(1, this.service_account, (item: dependency_2.temporal.api.cloud.identity.v1.ServiceAccount) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetServiceAccountsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetServiceAccountsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.service_account, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.temporal.api.cloud.identity.v1.ServiceAccount.deserialize(reader), dependency_2.temporal.api.cloud.identity.v1.ServiceAccount));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetServiceAccountsResponse {
            return GetServiceAccountsResponse.deserialize(bytes);
        }
    }
    export class UpdateServiceAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account_id?: string;
            spec?: dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account_id" in data && data.service_account_id != undefined) {
                    this.service_account_id = data.service_account_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get service_account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec, 2) as dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec;
        }
        set spec(value: dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            service_account_id?: string;
            spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.prototype.toObject>;
            resource_version?: string;
            async_operation_id?: string;
        }): UpdateServiceAccountRequest {
            const message = new UpdateServiceAccountRequest({});
            if (data.service_account_id != null) {
                message.service_account_id = data.service_account_id;
            }
            if (data.spec != null) {
                message.spec = dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.fromObject(data.spec);
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_account_id?: string;
                spec?: ReturnType<typeof dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.prototype.toObject>;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.service_account_id != null) {
                data.service_account_id = this.service_account_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_account_id.length)
                writer.writeString(1, this.service_account_id);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.resource_version.length)
                writer.writeString(3, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(4, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateServiceAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServiceAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_account_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = dependency_2.temporal.api.cloud.identity.v1.ServiceAccountSpec.deserialize(reader));
                        break;
                    case 3:
                        message.resource_version = reader.readString();
                        break;
                    case 4:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateServiceAccountRequest {
            return UpdateServiceAccountRequest.deserialize(bytes);
        }
    }
    export class UpdateServiceAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): UpdateServiceAccountResponse {
            const message = new UpdateServiceAccountResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateServiceAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateServiceAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateServiceAccountResponse {
            return UpdateServiceAccountResponse.deserialize(bytes);
        }
    }
    export class DeleteServiceAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_account_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_account_id" in data && data.service_account_id != undefined) {
                    this.service_account_id = data.service_account_id;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get service_account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set service_account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            service_account_id?: string;
            resource_version?: string;
            async_operation_id?: string;
        }): DeleteServiceAccountRequest {
            const message = new DeleteServiceAccountRequest({});
            if (data.service_account_id != null) {
                message.service_account_id = data.service_account_id;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                service_account_id?: string;
                resource_version?: string;
                async_operation_id?: string;
            } = {};
            if (this.service_account_id != null) {
                data.service_account_id = this.service_account_id;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_account_id.length)
                writer.writeString(1, this.service_account_id);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.async_operation_id.length)
                writer.writeString(3, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServiceAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServiceAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_account_id = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteServiceAccountRequest {
            return DeleteServiceAccountRequest.deserialize(bytes);
        }
    }
    export class DeleteServiceAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            async_operation?: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("async_operation" in data && data.async_operation != undefined) {
                    this.async_operation = data.async_operation;
                }
            }
        }
        get async_operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.temporal.api.cloud.operation.v1.AsyncOperation, 1) as dependency_1.temporal.api.cloud.operation.v1.AsyncOperation;
        }
        set async_operation(value: dependency_1.temporal.api.cloud.operation.v1.AsyncOperation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_async_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
        }): DeleteServiceAccountResponse {
            const message = new DeleteServiceAccountResponse({});
            if (data.async_operation != null) {
                message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.fromObject(data.async_operation);
            }
            return message;
        }
        toObject() {
            const data: {
                async_operation?: ReturnType<typeof dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.prototype.toObject>;
            } = {};
            if (this.async_operation != null) {
                data.async_operation = this.async_operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_async_operation)
                writer.writeMessage(1, this.async_operation, () => this.async_operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteServiceAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteServiceAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.async_operation, () => message.async_operation = dependency_1.temporal.api.cloud.operation.v1.AsyncOperation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteServiceAccountResponse {
            return DeleteServiceAccountResponse.deserialize(bytes);
        }
    }
}
