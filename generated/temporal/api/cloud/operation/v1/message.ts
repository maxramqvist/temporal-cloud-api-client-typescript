/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: temporal/api/cloud/operation/v1/message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../google/protobuf/duration";
import * as dependency_2 from "./../../../../../google/protobuf/timestamp";
import * as dependency_3 from "./../../../../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace temporal.api.cloud.operation.v1 {
    export class AsyncOperation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            state?: string;
            check_duration?: dependency_1.google.protobuf.Duration;
            operation_type?: string;
            operation_input?: dependency_3.google.protobuf.Any;
            failure_reason?: string;
            started_time?: dependency_2.google.protobuf.Timestamp;
            finished_time?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("check_duration" in data && data.check_duration != undefined) {
                    this.check_duration = data.check_duration;
                }
                if ("operation_type" in data && data.operation_type != undefined) {
                    this.operation_type = data.operation_type;
                }
                if ("operation_input" in data && data.operation_input != undefined) {
                    this.operation_input = data.operation_input;
                }
                if ("failure_reason" in data && data.failure_reason != undefined) {
                    this.failure_reason = data.failure_reason;
                }
                if ("started_time" in data && data.started_time != undefined) {
                    this.started_time = data.started_time;
                }
                if ("finished_time" in data && data.finished_time != undefined) {
                    this.finished_time = data.finished_time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get check_duration() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 3) as dependency_1.google.protobuf.Duration;
        }
        set check_duration(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_check_duration() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get operation_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set operation_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get operation_input() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 5) as dependency_3.google.protobuf.Any;
        }
        set operation_input(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_operation_input() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get failure_reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set failure_reason(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get started_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 7) as dependency_2.google.protobuf.Timestamp;
        }
        set started_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_started_time() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get finished_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 8) as dependency_2.google.protobuf.Timestamp;
        }
        set finished_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_finished_time() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: string;
            state?: string;
            check_duration?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            operation_type?: string;
            operation_input?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            failure_reason?: string;
            started_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            finished_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): AsyncOperation {
            const message = new AsyncOperation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.check_duration != null) {
                message.check_duration = dependency_1.google.protobuf.Duration.fromObject(data.check_duration);
            }
            if (data.operation_type != null) {
                message.operation_type = data.operation_type;
            }
            if (data.operation_input != null) {
                message.operation_input = dependency_3.google.protobuf.Any.fromObject(data.operation_input);
            }
            if (data.failure_reason != null) {
                message.failure_reason = data.failure_reason;
            }
            if (data.started_time != null) {
                message.started_time = dependency_2.google.protobuf.Timestamp.fromObject(data.started_time);
            }
            if (data.finished_time != null) {
                message.finished_time = dependency_2.google.protobuf.Timestamp.fromObject(data.finished_time);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                state?: string;
                check_duration?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
                operation_type?: string;
                operation_input?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
                failure_reason?: string;
                started_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                finished_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.check_duration != null) {
                data.check_duration = this.check_duration.toObject();
            }
            if (this.operation_type != null) {
                data.operation_type = this.operation_type;
            }
            if (this.operation_input != null) {
                data.operation_input = this.operation_input.toObject();
            }
            if (this.failure_reason != null) {
                data.failure_reason = this.failure_reason;
            }
            if (this.started_time != null) {
                data.started_time = this.started_time.toObject();
            }
            if (this.finished_time != null) {
                data.finished_time = this.finished_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.state.length)
                writer.writeString(2, this.state);
            if (this.has_check_duration)
                writer.writeMessage(3, this.check_duration, () => this.check_duration.serialize(writer));
            if (this.operation_type.length)
                writer.writeString(4, this.operation_type);
            if (this.has_operation_input)
                writer.writeMessage(5, this.operation_input, () => this.operation_input.serialize(writer));
            if (this.failure_reason.length)
                writer.writeString(6, this.failure_reason);
            if (this.has_started_time)
                writer.writeMessage(7, this.started_time, () => this.started_time.serialize(writer));
            if (this.has_finished_time)
                writer.writeMessage(8, this.finished_time, () => this.finished_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AsyncOperation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AsyncOperation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.check_duration, () => message.check_duration = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 4:
                        message.operation_type = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.operation_input, () => message.operation_input = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    case 6:
                        message.failure_reason = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.started_time, () => message.started_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.finished_time, () => message.finished_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AsyncOperation {
            return AsyncOperation.deserialize(bytes);
        }
    }
}
