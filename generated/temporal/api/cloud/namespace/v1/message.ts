/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: temporal/api/cloud/namespace/v1/message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace temporal.api.cloud.namespace.v1 {
    export class CertificateFilterSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            common_name?: string;
            organization?: string;
            organizational_unit?: string;
            subject_alternative_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("common_name" in data && data.common_name != undefined) {
                    this.common_name = data.common_name;
                }
                if ("organization" in data && data.organization != undefined) {
                    this.organization = data.organization;
                }
                if ("organizational_unit" in data && data.organizational_unit != undefined) {
                    this.organizational_unit = data.organizational_unit;
                }
                if ("subject_alternative_name" in data && data.subject_alternative_name != undefined) {
                    this.subject_alternative_name = data.subject_alternative_name;
                }
            }
        }
        get common_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set common_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organization() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set organization(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get organizational_unit() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set organizational_unit(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get subject_alternative_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set subject_alternative_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            common_name?: string;
            organization?: string;
            organizational_unit?: string;
            subject_alternative_name?: string;
        }): CertificateFilterSpec {
            const message = new CertificateFilterSpec({});
            if (data.common_name != null) {
                message.common_name = data.common_name;
            }
            if (data.organization != null) {
                message.organization = data.organization;
            }
            if (data.organizational_unit != null) {
                message.organizational_unit = data.organizational_unit;
            }
            if (data.subject_alternative_name != null) {
                message.subject_alternative_name = data.subject_alternative_name;
            }
            return message;
        }
        toObject() {
            const data: {
                common_name?: string;
                organization?: string;
                organizational_unit?: string;
                subject_alternative_name?: string;
            } = {};
            if (this.common_name != null) {
                data.common_name = this.common_name;
            }
            if (this.organization != null) {
                data.organization = this.organization;
            }
            if (this.organizational_unit != null) {
                data.organizational_unit = this.organizational_unit;
            }
            if (this.subject_alternative_name != null) {
                data.subject_alternative_name = this.subject_alternative_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.common_name.length)
                writer.writeString(1, this.common_name);
            if (this.organization.length)
                writer.writeString(2, this.organization);
            if (this.organizational_unit.length)
                writer.writeString(3, this.organizational_unit);
            if (this.subject_alternative_name.length)
                writer.writeString(4, this.subject_alternative_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CertificateFilterSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CertificateFilterSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.common_name = reader.readString();
                        break;
                    case 2:
                        message.organization = reader.readString();
                        break;
                    case 3:
                        message.organizational_unit = reader.readString();
                        break;
                    case 4:
                        message.subject_alternative_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CertificateFilterSpec {
            return CertificateFilterSpec.deserialize(bytes);
        }
    }
    export class MtlsAuthSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accepted_client_ca?: string;
            certificate_filters?: CertificateFilterSpec[];
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accepted_client_ca" in data && data.accepted_client_ca != undefined) {
                    this.accepted_client_ca = data.accepted_client_ca;
                }
                if ("certificate_filters" in data && data.certificate_filters != undefined) {
                    this.certificate_filters = data.certificate_filters;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get accepted_client_ca() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accepted_client_ca(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get certificate_filters() {
            return pb_1.Message.getRepeatedWrapperField(this, CertificateFilterSpec, 2) as CertificateFilterSpec[];
        }
        set certificate_filters(value: CertificateFilterSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            accepted_client_ca?: string;
            certificate_filters?: ReturnType<typeof CertificateFilterSpec.prototype.toObject>[];
            enabled?: boolean;
        }): MtlsAuthSpec {
            const message = new MtlsAuthSpec({});
            if (data.accepted_client_ca != null) {
                message.accepted_client_ca = data.accepted_client_ca;
            }
            if (data.certificate_filters != null) {
                message.certificate_filters = data.certificate_filters.map(item => CertificateFilterSpec.fromObject(item));
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                accepted_client_ca?: string;
                certificate_filters?: ReturnType<typeof CertificateFilterSpec.prototype.toObject>[];
                enabled?: boolean;
            } = {};
            if (this.accepted_client_ca != null) {
                data.accepted_client_ca = this.accepted_client_ca;
            }
            if (this.certificate_filters != null) {
                data.certificate_filters = this.certificate_filters.map((item: CertificateFilterSpec) => item.toObject());
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accepted_client_ca.length)
                writer.writeString(1, this.accepted_client_ca);
            if (this.certificate_filters.length)
                writer.writeRepeatedMessage(2, this.certificate_filters, (item: CertificateFilterSpec) => item.serialize(writer));
            if (this.enabled != false)
                writer.writeBool(3, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MtlsAuthSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MtlsAuthSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accepted_client_ca = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.certificate_filters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CertificateFilterSpec.deserialize(reader), CertificateFilterSpec));
                        break;
                    case 3:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MtlsAuthSpec {
            return MtlsAuthSpec.deserialize(bytes);
        }
    }
    export class ApiKeyAuthSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enabled?: boolean;
        }): ApiKeyAuthSpec {
            const message = new ApiKeyAuthSpec({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiKeyAuthSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiKeyAuthSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApiKeyAuthSpec {
            return ApiKeyAuthSpec.deserialize(bytes);
        }
    }
    export class CodecServerSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpoint?: string;
            pass_access_token?: boolean;
            include_cross_origin_credentials?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("pass_access_token" in data && data.pass_access_token != undefined) {
                    this.pass_access_token = data.pass_access_token;
                }
                if ("include_cross_origin_credentials" in data && data.include_cross_origin_credentials != undefined) {
                    this.include_cross_origin_credentials = data.include_cross_origin_credentials;
                }
            }
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pass_access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set pass_access_token(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get include_cross_origin_credentials() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set include_cross_origin_credentials(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            endpoint?: string;
            pass_access_token?: boolean;
            include_cross_origin_credentials?: boolean;
        }): CodecServerSpec {
            const message = new CodecServerSpec({});
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.pass_access_token != null) {
                message.pass_access_token = data.pass_access_token;
            }
            if (data.include_cross_origin_credentials != null) {
                message.include_cross_origin_credentials = data.include_cross_origin_credentials;
            }
            return message;
        }
        toObject() {
            const data: {
                endpoint?: string;
                pass_access_token?: boolean;
                include_cross_origin_credentials?: boolean;
            } = {};
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.pass_access_token != null) {
                data.pass_access_token = this.pass_access_token;
            }
            if (this.include_cross_origin_credentials != null) {
                data.include_cross_origin_credentials = this.include_cross_origin_credentials;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpoint.length)
                writer.writeString(1, this.endpoint);
            if (this.pass_access_token != false)
                writer.writeBool(2, this.pass_access_token);
            if (this.include_cross_origin_credentials != false)
                writer.writeBool(3, this.include_cross_origin_credentials);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodecServerSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodecServerSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpoint = reader.readString();
                        break;
                    case 2:
                        message.pass_access_token = reader.readBool();
                        break;
                    case 3:
                        message.include_cross_origin_credentials = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CodecServerSpec {
            return CodecServerSpec.deserialize(bytes);
        }
    }
    export class NamespaceSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            regions?: string[];
            retention_days?: number;
            mtls_auth?: MtlsAuthSpec;
            api_key_auth?: ApiKeyAuthSpec;
            custom_search_attributes?: Map<string, string>;
            codec_server?: CodecServerSpec;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("regions" in data && data.regions != undefined) {
                    this.regions = data.regions;
                }
                if ("retention_days" in data && data.retention_days != undefined) {
                    this.retention_days = data.retention_days;
                }
                if ("mtls_auth" in data && data.mtls_auth != undefined) {
                    this.mtls_auth = data.mtls_auth;
                }
                if ("api_key_auth" in data && data.api_key_auth != undefined) {
                    this.api_key_auth = data.api_key_auth;
                }
                if ("custom_search_attributes" in data && data.custom_search_attributes != undefined) {
                    this.custom_search_attributes = data.custom_search_attributes;
                }
                if ("codec_server" in data && data.codec_server != undefined) {
                    this.codec_server = data.codec_server;
                }
            }
            if (!this.custom_search_attributes)
                this.custom_search_attributes = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get regions() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set regions(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get retention_days() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set retention_days(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get mtls_auth() {
            return pb_1.Message.getWrapperField(this, MtlsAuthSpec, 4) as MtlsAuthSpec;
        }
        set mtls_auth(value: MtlsAuthSpec) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_mtls_auth() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get api_key_auth() {
            return pb_1.Message.getWrapperField(this, ApiKeyAuthSpec, 7) as ApiKeyAuthSpec;
        }
        set api_key_auth(value: ApiKeyAuthSpec) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_api_key_auth() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get custom_search_attributes() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set custom_search_attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get codec_server() {
            return pb_1.Message.getWrapperField(this, CodecServerSpec, 6) as CodecServerSpec;
        }
        set codec_server(value: CodecServerSpec) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_codec_server() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            name?: string;
            regions?: string[];
            retention_days?: number;
            mtls_auth?: ReturnType<typeof MtlsAuthSpec.prototype.toObject>;
            api_key_auth?: ReturnType<typeof ApiKeyAuthSpec.prototype.toObject>;
            custom_search_attributes?: {
                [key: string]: string;
            };
            codec_server?: ReturnType<typeof CodecServerSpec.prototype.toObject>;
        }): NamespaceSpec {
            const message = new NamespaceSpec({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.regions != null) {
                message.regions = data.regions;
            }
            if (data.retention_days != null) {
                message.retention_days = data.retention_days;
            }
            if (data.mtls_auth != null) {
                message.mtls_auth = MtlsAuthSpec.fromObject(data.mtls_auth);
            }
            if (data.api_key_auth != null) {
                message.api_key_auth = ApiKeyAuthSpec.fromObject(data.api_key_auth);
            }
            if (typeof data.custom_search_attributes == "object") {
                message.custom_search_attributes = new Map(Object.entries(data.custom_search_attributes));
            }
            if (data.codec_server != null) {
                message.codec_server = CodecServerSpec.fromObject(data.codec_server);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                regions?: string[];
                retention_days?: number;
                mtls_auth?: ReturnType<typeof MtlsAuthSpec.prototype.toObject>;
                api_key_auth?: ReturnType<typeof ApiKeyAuthSpec.prototype.toObject>;
                custom_search_attributes?: {
                    [key: string]: string;
                };
                codec_server?: ReturnType<typeof CodecServerSpec.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.regions != null) {
                data.regions = this.regions;
            }
            if (this.retention_days != null) {
                data.retention_days = this.retention_days;
            }
            if (this.mtls_auth != null) {
                data.mtls_auth = this.mtls_auth.toObject();
            }
            if (this.api_key_auth != null) {
                data.api_key_auth = this.api_key_auth.toObject();
            }
            if (this.custom_search_attributes != null) {
                data.custom_search_attributes = (Object.fromEntries)(this.custom_search_attributes);
            }
            if (this.codec_server != null) {
                data.codec_server = this.codec_server.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.regions.length)
                writer.writeRepeatedString(2, this.regions);
            if (this.retention_days != 0)
                writer.writeInt32(3, this.retention_days);
            if (this.has_mtls_auth)
                writer.writeMessage(4, this.mtls_auth, () => this.mtls_auth.serialize(writer));
            if (this.has_api_key_auth)
                writer.writeMessage(7, this.api_key_auth, () => this.api_key_auth.serialize(writer));
            for (const [key, value] of this.custom_search_attributes) {
                writer.writeMessage(5, this.custom_search_attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_codec_server)
                writer.writeMessage(6, this.codec_server, () => this.codec_server.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NamespaceSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NamespaceSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.retention_days = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.mtls_auth, () => message.mtls_auth = MtlsAuthSpec.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.api_key_auth, () => message.api_key_auth = ApiKeyAuthSpec.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.custom_search_attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 6:
                        reader.readMessage(message.codec_server, () => message.codec_server = CodecServerSpec.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NamespaceSpec {
            return NamespaceSpec.deserialize(bytes);
        }
    }
    export class Endpoints extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            web_address?: string;
            mtls_grpc_address?: string;
            grpc_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("web_address" in data && data.web_address != undefined) {
                    this.web_address = data.web_address;
                }
                if ("mtls_grpc_address" in data && data.mtls_grpc_address != undefined) {
                    this.mtls_grpc_address = data.mtls_grpc_address;
                }
                if ("grpc_address" in data && data.grpc_address != undefined) {
                    this.grpc_address = data.grpc_address;
                }
            }
        }
        get web_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set web_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mtls_grpc_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mtls_grpc_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get grpc_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set grpc_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            web_address?: string;
            mtls_grpc_address?: string;
            grpc_address?: string;
        }): Endpoints {
            const message = new Endpoints({});
            if (data.web_address != null) {
                message.web_address = data.web_address;
            }
            if (data.mtls_grpc_address != null) {
                message.mtls_grpc_address = data.mtls_grpc_address;
            }
            if (data.grpc_address != null) {
                message.grpc_address = data.grpc_address;
            }
            return message;
        }
        toObject() {
            const data: {
                web_address?: string;
                mtls_grpc_address?: string;
                grpc_address?: string;
            } = {};
            if (this.web_address != null) {
                data.web_address = this.web_address;
            }
            if (this.mtls_grpc_address != null) {
                data.mtls_grpc_address = this.mtls_grpc_address;
            }
            if (this.grpc_address != null) {
                data.grpc_address = this.grpc_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.web_address.length)
                writer.writeString(1, this.web_address);
            if (this.mtls_grpc_address.length)
                writer.writeString(2, this.mtls_grpc_address);
            if (this.grpc_address.length)
                writer.writeString(3, this.grpc_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Endpoints {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Endpoints();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.web_address = reader.readString();
                        break;
                    case 2:
                        message.mtls_grpc_address = reader.readString();
                        break;
                    case 3:
                        message.grpc_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Endpoints {
            return Endpoints.deserialize(bytes);
        }
    }
    export class Limits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            actions_per_second_limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actions_per_second_limit" in data && data.actions_per_second_limit != undefined) {
                    this.actions_per_second_limit = data.actions_per_second_limit;
                }
            }
        }
        get actions_per_second_limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set actions_per_second_limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            actions_per_second_limit?: number;
        }): Limits {
            const message = new Limits({});
            if (data.actions_per_second_limit != null) {
                message.actions_per_second_limit = data.actions_per_second_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                actions_per_second_limit?: number;
            } = {};
            if (this.actions_per_second_limit != null) {
                data.actions_per_second_limit = this.actions_per_second_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actions_per_second_limit != 0)
                writer.writeInt32(1, this.actions_per_second_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Limits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Limits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.actions_per_second_limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Limits {
            return Limits.deserialize(bytes);
        }
    }
    export class AWSPrivateLinkInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            allowed_principal_arns?: string[];
            vpc_endpoint_service_names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allowed_principal_arns" in data && data.allowed_principal_arns != undefined) {
                    this.allowed_principal_arns = data.allowed_principal_arns;
                }
                if ("vpc_endpoint_service_names" in data && data.vpc_endpoint_service_names != undefined) {
                    this.vpc_endpoint_service_names = data.vpc_endpoint_service_names;
                }
            }
        }
        get allowed_principal_arns() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set allowed_principal_arns(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get vpc_endpoint_service_names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set vpc_endpoint_service_names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            allowed_principal_arns?: string[];
            vpc_endpoint_service_names?: string[];
        }): AWSPrivateLinkInfo {
            const message = new AWSPrivateLinkInfo({});
            if (data.allowed_principal_arns != null) {
                message.allowed_principal_arns = data.allowed_principal_arns;
            }
            if (data.vpc_endpoint_service_names != null) {
                message.vpc_endpoint_service_names = data.vpc_endpoint_service_names;
            }
            return message;
        }
        toObject() {
            const data: {
                allowed_principal_arns?: string[];
                vpc_endpoint_service_names?: string[];
            } = {};
            if (this.allowed_principal_arns != null) {
                data.allowed_principal_arns = this.allowed_principal_arns;
            }
            if (this.vpc_endpoint_service_names != null) {
                data.vpc_endpoint_service_names = this.vpc_endpoint_service_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.allowed_principal_arns.length)
                writer.writeRepeatedString(1, this.allowed_principal_arns);
            if (this.vpc_endpoint_service_names.length)
                writer.writeRepeatedString(2, this.vpc_endpoint_service_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AWSPrivateLinkInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AWSPrivateLinkInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AWSPrivateLinkInfo {
            return AWSPrivateLinkInfo.deserialize(bytes);
        }
    }
    export class PrivateConnectivity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            region?: string;
            aws_private_link?: AWSPrivateLinkInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("aws_private_link" in data && data.aws_private_link != undefined) {
                    this.aws_private_link = data.aws_private_link;
                }
            }
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get aws_private_link() {
            return pb_1.Message.getWrapperField(this, AWSPrivateLinkInfo, 2) as AWSPrivateLinkInfo;
        }
        set aws_private_link(value: AWSPrivateLinkInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_aws_private_link() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            region?: string;
            aws_private_link?: ReturnType<typeof AWSPrivateLinkInfo.prototype.toObject>;
        }): PrivateConnectivity {
            const message = new PrivateConnectivity({});
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.aws_private_link != null) {
                message.aws_private_link = AWSPrivateLinkInfo.fromObject(data.aws_private_link);
            }
            return message;
        }
        toObject() {
            const data: {
                region?: string;
                aws_private_link?: ReturnType<typeof AWSPrivateLinkInfo.prototype.toObject>;
            } = {};
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.aws_private_link != null) {
                data.aws_private_link = this.aws_private_link.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.region.length)
                writer.writeString(1, this.region);
            if (this.has_aws_private_link)
                writer.writeMessage(2, this.aws_private_link, () => this.aws_private_link.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateConnectivity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateConnectivity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.region = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.aws_private_link, () => message.aws_private_link = AWSPrivateLinkInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateConnectivity {
            return PrivateConnectivity.deserialize(bytes);
        }
    }
    export class Namespace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            namespace?: string;
            resource_version?: string;
            spec?: NamespaceSpec;
            state?: string;
            async_operation_id?: string;
            endpoints?: Endpoints;
            active_region?: string;
            limits?: Limits;
            private_connectivities?: PrivateConnectivity[];
            created_time?: dependency_1.google.protobuf.Timestamp;
            last_modified_time?: dependency_1.google.protobuf.Timestamp;
            region_status?: Map<string, NamespaceRegionStatus>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource_version" in data && data.resource_version != undefined) {
                    this.resource_version = data.resource_version;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
                if ("endpoints" in data && data.endpoints != undefined) {
                    this.endpoints = data.endpoints;
                }
                if ("active_region" in data && data.active_region != undefined) {
                    this.active_region = data.active_region;
                }
                if ("limits" in data && data.limits != undefined) {
                    this.limits = data.limits;
                }
                if ("private_connectivities" in data && data.private_connectivities != undefined) {
                    this.private_connectivities = data.private_connectivities;
                }
                if ("created_time" in data && data.created_time != undefined) {
                    this.created_time = data.created_time;
                }
                if ("last_modified_time" in data && data.last_modified_time != undefined) {
                    this.last_modified_time = data.last_modified_time;
                }
                if ("region_status" in data && data.region_status != undefined) {
                    this.region_status = data.region_status;
                }
            }
            if (!this.region_status)
                this.region_status = new Map();
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, NamespaceSpec, 3) as NamespaceSpec;
        }
        set spec(value: NamespaceSpec) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get endpoints() {
            return pb_1.Message.getWrapperField(this, Endpoints, 6) as Endpoints;
        }
        set endpoints(value: Endpoints) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_endpoints() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get active_region() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set active_region(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get limits() {
            return pb_1.Message.getWrapperField(this, Limits, 8) as Limits;
        }
        set limits(value: Limits) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_limits() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get private_connectivities() {
            return pb_1.Message.getRepeatedWrapperField(this, PrivateConnectivity, 9) as PrivateConnectivity[];
        }
        set private_connectivities(value: PrivateConnectivity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get created_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set created_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_created_time() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get last_modified_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set last_modified_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_last_modified_time() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get region_status() {
            return pb_1.Message.getField(this, 12) as any as Map<string, NamespaceRegionStatus>;
        }
        set region_status(value: Map<string, NamespaceRegionStatus>) {
            pb_1.Message.setField(this, 12, value as any);
        }
        static fromObject(data: {
            namespace?: string;
            resource_version?: string;
            spec?: ReturnType<typeof NamespaceSpec.prototype.toObject>;
            state?: string;
            async_operation_id?: string;
            endpoints?: ReturnType<typeof Endpoints.prototype.toObject>;
            active_region?: string;
            limits?: ReturnType<typeof Limits.prototype.toObject>;
            private_connectivities?: ReturnType<typeof PrivateConnectivity.prototype.toObject>[];
            created_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            last_modified_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            region_status?: {
                [key: string]: ReturnType<typeof NamespaceRegionStatus.prototype.toObject>;
            };
        }): Namespace {
            const message = new Namespace({});
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource_version != null) {
                message.resource_version = data.resource_version;
            }
            if (data.spec != null) {
                message.spec = NamespaceSpec.fromObject(data.spec);
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            if (data.endpoints != null) {
                message.endpoints = Endpoints.fromObject(data.endpoints);
            }
            if (data.active_region != null) {
                message.active_region = data.active_region;
            }
            if (data.limits != null) {
                message.limits = Limits.fromObject(data.limits);
            }
            if (data.private_connectivities != null) {
                message.private_connectivities = data.private_connectivities.map(item => PrivateConnectivity.fromObject(item));
            }
            if (data.created_time != null) {
                message.created_time = dependency_1.google.protobuf.Timestamp.fromObject(data.created_time);
            }
            if (data.last_modified_time != null) {
                message.last_modified_time = dependency_1.google.protobuf.Timestamp.fromObject(data.last_modified_time);
            }
            if (typeof data.region_status == "object") {
                message.region_status = new Map(Object.entries(data.region_status).map(([key, value]) => [key, NamespaceRegionStatus.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                namespace?: string;
                resource_version?: string;
                spec?: ReturnType<typeof NamespaceSpec.prototype.toObject>;
                state?: string;
                async_operation_id?: string;
                endpoints?: ReturnType<typeof Endpoints.prototype.toObject>;
                active_region?: string;
                limits?: ReturnType<typeof Limits.prototype.toObject>;
                private_connectivities?: ReturnType<typeof PrivateConnectivity.prototype.toObject>[];
                created_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                last_modified_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                region_status?: {
                    [key: string]: ReturnType<typeof NamespaceRegionStatus.prototype.toObject>;
                };
            } = {};
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource_version != null) {
                data.resource_version = this.resource_version;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            if (this.endpoints != null) {
                data.endpoints = this.endpoints.toObject();
            }
            if (this.active_region != null) {
                data.active_region = this.active_region;
            }
            if (this.limits != null) {
                data.limits = this.limits.toObject();
            }
            if (this.private_connectivities != null) {
                data.private_connectivities = this.private_connectivities.map((item: PrivateConnectivity) => item.toObject());
            }
            if (this.created_time != null) {
                data.created_time = this.created_time.toObject();
            }
            if (this.last_modified_time != null) {
                data.last_modified_time = this.last_modified_time.toObject();
            }
            if (this.region_status != null) {
                data.region_status = (Object.fromEntries)((Array.from)(this.region_status).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.namespace.length)
                writer.writeString(1, this.namespace);
            if (this.resource_version.length)
                writer.writeString(2, this.resource_version);
            if (this.has_spec)
                writer.writeMessage(3, this.spec, () => this.spec.serialize(writer));
            if (this.state.length)
                writer.writeString(4, this.state);
            if (this.async_operation_id.length)
                writer.writeString(5, this.async_operation_id);
            if (this.has_endpoints)
                writer.writeMessage(6, this.endpoints, () => this.endpoints.serialize(writer));
            if (this.active_region.length)
                writer.writeString(7, this.active_region);
            if (this.has_limits)
                writer.writeMessage(8, this.limits, () => this.limits.serialize(writer));
            if (this.private_connectivities.length)
                writer.writeRepeatedMessage(9, this.private_connectivities, (item: PrivateConnectivity) => item.serialize(writer));
            if (this.has_created_time)
                writer.writeMessage(10, this.created_time, () => this.created_time.serialize(writer));
            if (this.has_last_modified_time)
                writer.writeMessage(11, this.last_modified_time, () => this.last_modified_time.serialize(writer));
            for (const [key, value] of this.region_status) {
                writer.writeMessage(12, this.region_status, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Namespace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Namespace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.namespace = reader.readString();
                        break;
                    case 2:
                        message.resource_version = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.spec, () => message.spec = NamespaceSpec.deserialize(reader));
                        break;
                    case 4:
                        message.state = reader.readString();
                        break;
                    case 5:
                        message.async_operation_id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.endpoints, () => message.endpoints = Endpoints.deserialize(reader));
                        break;
                    case 7:
                        message.active_region = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.limits, () => message.limits = Limits.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.private_connectivities, () => pb_1.Message.addToRepeatedWrapperField(message, 9, PrivateConnectivity.deserialize(reader), PrivateConnectivity));
                        break;
                    case 10:
                        reader.readMessage(message.created_time, () => message.created_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.last_modified_time, () => message.last_modified_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.region_status as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = NamespaceRegionStatus.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Namespace {
            return Namespace.deserialize(bytes);
        }
    }
    export class NamespaceRegionStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            async_operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("async_operation_id" in data && data.async_operation_id != undefined) {
                    this.async_operation_id = data.async_operation_id;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get async_operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set async_operation_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            state?: string;
            async_operation_id?: string;
        }): NamespaceRegionStatus {
            const message = new NamespaceRegionStatus({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.async_operation_id != null) {
                message.async_operation_id = data.async_operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                async_operation_id?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.async_operation_id != null) {
                data.async_operation_id = this.async_operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.async_operation_id.length)
                writer.writeString(2, this.async_operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NamespaceRegionStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NamespaceRegionStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.async_operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NamespaceRegionStatus {
            return NamespaceRegionStatus.deserialize(bytes);
        }
    }
}
